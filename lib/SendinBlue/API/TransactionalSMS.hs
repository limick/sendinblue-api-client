{-
   SendinBlue API

   SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 

   OpenAPI Version: 3.0.1
   SendinBlue API API version: 3.0.0
   Contact: contact@sendinblue.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : SendinBlue.API.TransactionalSMS
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module SendinBlue.API.TransactionalSMS where

import SendinBlue.Core
import SendinBlue.MimeTypes
import SendinBlue.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** TransactionalSMS

-- *** getSmsEvents

-- | @GET \/transactionalSMS\/statistics\/events@
-- 
-- Get all your SMS activity (unaggregated events)
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
getSmsEvents
  :: SendinBlueRequest GetSmsEvents MimeNoContent GetSmsEventReport MimeJSON
getSmsEvents =
  _mkRequest "GET" ["/transactionalSMS/statistics/events"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data GetSmsEvents  

-- | /Optional Param/ "limit" - Number of documents per page
instance HasOptionalParam GetSmsEvents Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "startDate" - Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report
instance HasOptionalParam GetSmsEvents StartDateText where
  applyOptionalParam req (StartDateText xs) =
    req `addQuery` toQuery ("startDate", Just xs)

-- | /Optional Param/ "endDate" - Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report
instance HasOptionalParam GetSmsEvents EndDateText where
  applyOptionalParam req (EndDateText xs) =
    req `addQuery` toQuery ("endDate", Just xs)

-- | /Optional Param/ "offset" - Index of the first document of the page
instance HasOptionalParam GetSmsEvents Offset where
  applyOptionalParam req (Offset xs) =
    req `addQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "days" - Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'
instance HasOptionalParam GetSmsEvents Days where
  applyOptionalParam req (Days xs) =
    req `addQuery` toQuery ("days", Just xs)

-- | /Optional Param/ "phoneNumber" - Filter the report for a specific phone number
instance HasOptionalParam GetSmsEvents PhoneNumber where
  applyOptionalParam req (PhoneNumber xs) =
    req `addQuery` toQuery ("phoneNumber", Just xs)

-- | /Optional Param/ "event" - Filter the report for specific events
instance HasOptionalParam GetSmsEvents Event2 where
  applyOptionalParam req (Event2 xs) =
    req `addQuery` toQuery ("event", Just xs)

-- | /Optional Param/ "tags" - Filter the report for specific tags passed as a serialized urlencoded array
instance HasOptionalParam GetSmsEvents Tags where
  applyOptionalParam req (Tags xs) =
    req `addQuery` toQuery ("tags", Just xs)

-- | /Optional Param/ "sort" - Sort the results in the ascending/descending order of record creation
instance HasOptionalParam GetSmsEvents Sort where
  applyOptionalParam req (Sort xs) =
    req `addQuery` toQuery ("sort", Just xs)
-- | @application/json@
instance Produces GetSmsEvents MimeJSON


-- *** getTransacAggregatedSmsReport0

-- | @GET \/transactionalSMS\/statistics\/aggregatedReport@
-- 
-- Get your SMS activity aggregated over a period of time
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
getTransacAggregatedSmsReport0
  :: SendinBlueRequest GetTransacAggregatedSmsReport0 MimeNoContent GetTransacAggregatedSmsReport MimeJSON
getTransacAggregatedSmsReport0 =
  _mkRequest "GET" ["/transactionalSMS/statistics/aggregatedReport"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data GetTransacAggregatedSmsReport0  

-- | /Optional Param/ "startDate" - Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report
instance HasOptionalParam GetTransacAggregatedSmsReport0 StartDateText where
  applyOptionalParam req (StartDateText xs) =
    req `addQuery` toQuery ("startDate", Just xs)

-- | /Optional Param/ "endDate" - Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report
instance HasOptionalParam GetTransacAggregatedSmsReport0 EndDateText where
  applyOptionalParam req (EndDateText xs) =
    req `addQuery` toQuery ("endDate", Just xs)

-- | /Optional Param/ "days" - Number of days in the past including today (positive integer). Not compatible with startDate and endDate
instance HasOptionalParam GetTransacAggregatedSmsReport0 Days where
  applyOptionalParam req (Days xs) =
    req `addQuery` toQuery ("days", Just xs)

-- | /Optional Param/ "tag" - Filter on a tag
instance HasOptionalParam GetTransacAggregatedSmsReport0 Tag where
  applyOptionalParam req (Tag xs) =
    req `addQuery` toQuery ("tag", Just xs)
-- | @application/json@
instance Produces GetTransacAggregatedSmsReport0 MimeJSON


-- *** getTransacSmsReport0

-- | @GET \/transactionalSMS\/statistics\/reports@
-- 
-- Get your SMS activity aggregated per day
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
getTransacSmsReport0
  :: SendinBlueRequest GetTransacSmsReport0 MimeNoContent GetTransacSmsReport MimeJSON
getTransacSmsReport0 =
  _mkRequest "GET" ["/transactionalSMS/statistics/reports"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data GetTransacSmsReport0  

-- | /Optional Param/ "startDate" - Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report
instance HasOptionalParam GetTransacSmsReport0 StartDateText where
  applyOptionalParam req (StartDateText xs) =
    req `addQuery` toQuery ("startDate", Just xs)

-- | /Optional Param/ "endDate" - Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report
instance HasOptionalParam GetTransacSmsReport0 EndDateText where
  applyOptionalParam req (EndDateText xs) =
    req `addQuery` toQuery ("endDate", Just xs)

-- | /Optional Param/ "days" - Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'
instance HasOptionalParam GetTransacSmsReport0 Days where
  applyOptionalParam req (Days xs) =
    req `addQuery` toQuery ("days", Just xs)

-- | /Optional Param/ "tag" - Filter on a tag
instance HasOptionalParam GetTransacSmsReport0 Tag where
  applyOptionalParam req (Tag xs) =
    req `addQuery` toQuery ("tag", Just xs)

-- | /Optional Param/ "sort" - Sort the results in the ascending/descending order of record creation
instance HasOptionalParam GetTransacSmsReport0 Sort where
  applyOptionalParam req (Sort xs) =
    req `addQuery` toQuery ("sort", Just xs)
-- | @application/json@
instance Produces GetTransacSmsReport0 MimeJSON


-- *** sendTransacSms0

-- | @POST \/transactionalSMS\/sms@
-- 
-- Send SMS message to a mobile number
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
sendTransacSms0
  :: (Consumes SendTransacSms0 MimeJSON, MimeRender MimeJSON SendTransacSms)
  => SendTransacSms -- ^ "sendTransacSms" -  Values to send a transactional SMS
  -> SendinBlueRequest SendTransacSms0 MimeJSON SendSms MimeJSON
sendTransacSms0 sendTransacSms =
  _mkRequest "POST" ["/transactionalSMS/sms"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` sendTransacSms

data SendTransacSms0 

-- | /Body Param/ "sendTransacSms" - Values to send a transactional SMS
instance HasBodyParam SendTransacSms0 SendTransacSms 

-- | @application/json@
instance Consumes SendTransacSms0 MimeJSON

-- | @application/json@
instance Produces SendTransacSms0 MimeJSON

