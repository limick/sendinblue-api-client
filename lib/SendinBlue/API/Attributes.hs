{-
   SendinBlue API

   SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 

   OpenAPI spec version: 2.0
   SendinBlue API API version: 3.0.0
   Contact: contact@sendinblue.com
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : SendinBlue.API.Attributes
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module SendinBlue.API.Attributes where

import SendinBlue.Core
import SendinBlue.MimeTypes
import SendinBlue.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Attributes

-- *** createAttribute1

-- | @POST \/contacts\/attributes\/{attributeCategory}\/{attributeName}@
-- 
-- Creates contact attribute
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
createAttribute1 
  :: (Consumes CreateAttribute1 MimeJSON, MimeRender MimeJSON CreateAttribute)
  => AttributeCategory2 -- ^ "attributeCategory" -  Category of the attribute
  -> AttributeName -- ^ "attributeName" -  Name of the attribute
  -> CreateAttribute -- ^ "createAttribute" -  Values to create an attribute
  -> SendinBlueRequest CreateAttribute1 MimeJSON res MimeJSON
createAttribute1 (AttributeCategory2 attributeCategory) (AttributeName attributeName) createAttribute =
  _mkRequest "POST" ["/contacts/attributes/",toPath attributeCategory,"/",toPath attributeName]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` createAttribute

data CreateAttribute1 

-- | /Body Param/ "createAttribute" - Values to create an attribute
instance HasBodyParam CreateAttribute1 CreateAttribute 

-- | @application/json@
instance Consumes CreateAttribute1 MimeJSON

-- | @application/json@
instance Produces CreateAttribute1 MimeJSON


-- *** deleteAttribute0

-- | @DELETE \/contacts\/attributes\/{attributeCategory}\/{attributeName}@
-- 
-- Deletes an attribute
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
deleteAttribute0 
  :: AttributeCategory2 -- ^ "attributeCategory" -  Category of the attribute
  -> AttributeName -- ^ "attributeName" -  Name of the existing attribute
  -> SendinBlueRequest DeleteAttribute0 MimeNoContent res MimeJSON
deleteAttribute0 (AttributeCategory2 attributeCategory) (AttributeName attributeName) =
  _mkRequest "DELETE" ["/contacts/attributes/",toPath attributeCategory,"/",toPath attributeName]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data DeleteAttribute0  

-- | @application/json@
instance Consumes DeleteAttribute0 MimeJSON

-- | @application/json@
instance Produces DeleteAttribute0 MimeJSON


-- *** getAttributes1

-- | @GET \/contacts\/attributes@
-- 
-- Lists all attributes
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
getAttributes1 
  :: SendinBlueRequest GetAttributes1 MimeNoContent GetAttributes MimeJSON
getAttributes1 =
  _mkRequest "GET" ["/contacts/attributes"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data GetAttributes1  

-- | @application/json@
instance Consumes GetAttributes1 MimeJSON

-- | @application/json@
instance Produces GetAttributes1 MimeJSON


-- *** updateAttribute1

-- | @PUT \/contacts\/attributes\/{attributeCategory}\/{attributeName}@
-- 
-- Updates contact attribute
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
updateAttribute1 
  :: (Consumes UpdateAttribute1 MimeJSON, MimeRender MimeJSON UpdateAttribute)
  => AttributeCategory -- ^ "attributeCategory" -  Category of the attribute
  -> AttributeName -- ^ "attributeName" -  Name of the existing attribute
  -> UpdateAttribute -- ^ "updateAttribute" -  Values to update an attribute
  -> SendinBlueRequest UpdateAttribute1 MimeJSON res MimeJSON
updateAttribute1 (AttributeCategory attributeCategory) (AttributeName attributeName) updateAttribute =
  _mkRequest "PUT" ["/contacts/attributes/",toPath attributeCategory,"/",toPath attributeName]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` updateAttribute

data UpdateAttribute1 

-- | /Body Param/ "updateAttribute" - Values to update an attribute
instance HasBodyParam UpdateAttribute1 UpdateAttribute 

-- | @application/json@
instance Consumes UpdateAttribute1 MimeJSON

-- | @application/json@
instance Produces UpdateAttribute1 MimeJSON

