{-
   SendinBlue API

   SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 

   OpenAPI Version: 3.0.1
   SendinBlue API API version: 3.0.0
   Contact: contact@sendinblue.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : SendinBlue.API.Reseller
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module SendinBlue.API.Reseller where

import SendinBlue.Core
import SendinBlue.MimeTypes
import SendinBlue.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Reseller

-- *** addCredits0

-- | @POST \/reseller\/children\/{childIdentifier}\/credits\/add@
-- 
-- Add Email and/or SMS credits to a specific child account
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
addCredits0
  :: (Consumes AddCredits0 MimeJSON, MimeRender MimeJSON AddCredits)
  => AddCredits -- ^ "addCredits" -  Values to post to add credit to a specific child account
  -> ChildIdentifier -- ^ "childIdentifier" -  Either auth key or id of reseller's child
  -> SendinBlueRequest AddCredits0 MimeJSON RemainingCreditModel MimeJSON
addCredits0 addCredits (ChildIdentifier childIdentifier) =
  _mkRequest "POST" ["/reseller/children/",toPath childIdentifier,"/credits/add"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` addCredits

data AddCredits0 

-- | /Body Param/ "addCredits" - Values to post to add credit to a specific child account
instance HasBodyParam AddCredits0 AddCredits 

-- | @application/json@
instance Consumes AddCredits0 MimeJSON

-- | @application/json@
instance Produces AddCredits0 MimeJSON


-- *** associateIpToChild

-- | @POST \/reseller\/children\/{childIdentifier}\/ips\/associate@
-- 
-- Associate a dedicated IP to the child
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
associateIpToChild
  :: (Consumes AssociateIpToChild MimeJSON, MimeRender MimeJSON ManageIp)
  => ManageIp -- ^ "ip" -  IP to associate
  -> ChildIdentifier -- ^ "childIdentifier" -  Either auth key or id of reseller's child
  -> SendinBlueRequest AssociateIpToChild MimeJSON NoContent MimeNoContent
associateIpToChild ip (ChildIdentifier childIdentifier) =
  _mkRequest "POST" ["/reseller/children/",toPath childIdentifier,"/ips/associate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` ip

data AssociateIpToChild 

-- | /Body Param/ "ip" - IP to associate
instance HasBodyParam AssociateIpToChild ManageIp 

-- | @application/json@
instance Consumes AssociateIpToChild MimeJSON

instance Produces AssociateIpToChild MimeNoContent


-- *** createChildDomain

-- | @POST \/reseller\/children\/{childIdentifier}\/domains@
-- 
-- Create a domain for a child account
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
createChildDomain
  :: (Consumes CreateChildDomain MimeJSON, MimeRender MimeJSON AddChildDomain)
  => AddChildDomain -- ^ "addChildDomain" -  Sender domain to add for a specific child account. This will not be displayed to the parent account.
  -> ChildIdentifier -- ^ "childIdentifier" -  Either auth key or id of reseller's child
  -> SendinBlueRequest CreateChildDomain MimeJSON NoContent MimeNoContent
createChildDomain addChildDomain (ChildIdentifier childIdentifier) =
  _mkRequest "POST" ["/reseller/children/",toPath childIdentifier,"/domains"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` addChildDomain

data CreateChildDomain 

-- | /Body Param/ "addChildDomain" - Sender domain to add for a specific child account. This will not be displayed to the parent account.
instance HasBodyParam CreateChildDomain AddChildDomain 

-- | @application/json@
instance Consumes CreateChildDomain MimeJSON

instance Produces CreateChildDomain MimeNoContent


-- *** createResellerChild

-- | @POST \/reseller\/children@
-- 
-- Creates a reseller child
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
createResellerChild
  :: (Consumes CreateResellerChild MimeJSON)
  => SendinBlueRequest CreateResellerChild MimeJSON CreateReseller MimeJSON
createResellerChild =
  _mkRequest "POST" ["/reseller/children"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data CreateResellerChild 

-- | /Body Param/ "resellerChild" - reseller child to add
instance HasBodyParam CreateResellerChild CreateChild 

-- | @application/json@
instance Consumes CreateResellerChild MimeJSON

-- | @application/json@
instance Produces CreateResellerChild MimeJSON


-- *** deleteChildDomain

-- | @DELETE \/reseller\/children\/{childIdentifier}\/domains\/{domainName}@
-- 
-- Delete the sender domain of the reseller child based on the childIdentifier and domainName passed
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
deleteChildDomain
  :: ChildIdentifier -- ^ "childIdentifier" -  Either auth key or id of reseller's child
  -> DomainName -- ^ "domainName" -  Pass the existing domain that needs to be deleted
  -> SendinBlueRequest DeleteChildDomain MimeNoContent NoContent MimeNoContent
deleteChildDomain (ChildIdentifier childIdentifier) (DomainName domainName) =
  _mkRequest "DELETE" ["/reseller/children/",toPath childIdentifier,"/domains/",toPath domainName]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data DeleteChildDomain  
instance Produces DeleteChildDomain MimeNoContent


-- *** deleteResellerChild

-- | @DELETE \/reseller\/children\/{childIdentifier}@
-- 
-- Delete a single reseller child based on the child identifier supplied
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
deleteResellerChild
  :: ChildIdentifier -- ^ "childIdentifier" -  Either auth key or child id of reseller's child
  -> SendinBlueRequest DeleteResellerChild MimeNoContent NoContent MimeNoContent
deleteResellerChild (ChildIdentifier childIdentifier) =
  _mkRequest "DELETE" ["/reseller/children/",toPath childIdentifier]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data DeleteResellerChild  
instance Produces DeleteResellerChild MimeNoContent


-- *** dissociateIpFromChild

-- | @POST \/reseller\/children\/{childIdentifier}\/ips\/dissociate@
-- 
-- Dissociate a dedicated IP to the child
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
dissociateIpFromChild
  :: (Consumes DissociateIpFromChild MimeJSON, MimeRender MimeJSON ManageIp)
  => ManageIp -- ^ "ip" -  IP to dissociate
  -> ChildIdentifier -- ^ "childIdentifier" -  Either auth key or id of reseller's child
  -> SendinBlueRequest DissociateIpFromChild MimeJSON NoContent MimeNoContent
dissociateIpFromChild ip (ChildIdentifier childIdentifier) =
  _mkRequest "POST" ["/reseller/children/",toPath childIdentifier,"/ips/dissociate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` ip

data DissociateIpFromChild 

-- | /Body Param/ "ip" - IP to dissociate
instance HasBodyParam DissociateIpFromChild ManageIp 

-- | @application/json@
instance Consumes DissociateIpFromChild MimeJSON

instance Produces DissociateIpFromChild MimeNoContent


-- *** getChildAccountCreationStatus0

-- | @GET \/reseller\/children\/{childIdentifier}\/accountCreationStatus@
-- 
-- Get the status of a reseller's child account creation, whether it is successfully created (exists) or not based on the childIdentifier supplied
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
getChildAccountCreationStatus0
  :: ChildIdentifier -- ^ "childIdentifier" -  Either auth key or id of reseller's child
  -> SendinBlueRequest GetChildAccountCreationStatus0 MimeNoContent GetChildAccountCreationStatus MimeJSON
getChildAccountCreationStatus0 (ChildIdentifier childIdentifier) =
  _mkRequest "GET" ["/reseller/children/",toPath childIdentifier,"/accountCreationStatus"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data GetChildAccountCreationStatus0  
-- | @application/json@
instance Produces GetChildAccountCreationStatus0 MimeJSON


-- *** getChildDomains

-- | @GET \/reseller\/children\/{childIdentifier}\/domains@
-- 
-- Get all sender domains for a specific child account
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
getChildDomains
  :: ChildIdentifier -- ^ "childIdentifier" -  Either auth key or id of reseller's child
  -> SendinBlueRequest GetChildDomains MimeNoContent [GetChildDomain] MimeJSON
getChildDomains (ChildIdentifier childIdentifier) =
  _mkRequest "GET" ["/reseller/children/",toPath childIdentifier,"/domains"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data GetChildDomains  
-- | @application/json@
instance Produces GetChildDomains MimeJSON


-- *** getChildInfo0

-- | @GET \/reseller\/children\/{childIdentifier}@
-- 
-- Get a child account's details
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
getChildInfo0
  :: ChildIdentifier -- ^ "childIdentifier" -  Either auth key or id of reseller's child
  -> SendinBlueRequest GetChildInfo0 MimeNoContent GetChildInfo MimeJSON
getChildInfo0 (ChildIdentifier childIdentifier) =
  _mkRequest "GET" ["/reseller/children/",toPath childIdentifier]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data GetChildInfo0  
-- | @application/json@
instance Produces GetChildInfo0 MimeJSON


-- *** getResellerChilds

-- | @GET \/reseller\/children@
-- 
-- Get the list of all children accounts
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
getResellerChilds
  :: SendinBlueRequest GetResellerChilds MimeNoContent GetChildrenList MimeJSON
getResellerChilds =
  _mkRequest "GET" ["/reseller/children"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data GetResellerChilds  

-- | /Optional Param/ "limit" - Number of documents for child accounts information per page
instance HasOptionalParam GetResellerChilds Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "offset" - Index of the first document in the page
instance HasOptionalParam GetResellerChilds Offset where
  applyOptionalParam req (Offset xs) =
    req `addQuery` toQuery ("offset", Just xs)
-- | @application/json@
instance Produces GetResellerChilds MimeJSON


-- *** getSsoToken0

-- | @GET \/reseller\/children\/{childIdentifier}\/auth@
-- 
-- Get session token to access Sendinblue (SSO)
-- 
-- It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern => https:/email.mydomain.com/login/sso?token=[token]
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
getSsoToken0
  :: ChildIdentifier -- ^ "childIdentifier" -  Either auth key or id of reseller's child
  -> SendinBlueRequest GetSsoToken0 MimeNoContent GetSsoToken MimeJSON
getSsoToken0 (ChildIdentifier childIdentifier) =
  _mkRequest "GET" ["/reseller/children/",toPath childIdentifier,"/auth"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data GetSsoToken0  
-- | @application/json@
instance Produces GetSsoToken0 MimeJSON


-- *** removeCredits0

-- | @POST \/reseller\/children\/{childIdentifier}\/credits\/remove@
-- 
-- Remove Email and/or SMS credits from a specific child account
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
removeCredits0
  :: (Consumes RemoveCredits0 MimeJSON, MimeRender MimeJSON RemoveCredits)
  => RemoveCredits -- ^ "removeCredits" -  Values to post to remove email or SMS credits from a specific child account
  -> ChildIdentifier -- ^ "childIdentifier" -  Either auth key or id of reseller's child
  -> SendinBlueRequest RemoveCredits0 MimeJSON RemainingCreditModel MimeJSON
removeCredits0 removeCredits (ChildIdentifier childIdentifier) =
  _mkRequest "POST" ["/reseller/children/",toPath childIdentifier,"/credits/remove"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` removeCredits

data RemoveCredits0 

-- | /Body Param/ "removeCredits" - Values to post to remove email or SMS credits from a specific child account
instance HasBodyParam RemoveCredits0 RemoveCredits 

-- | @application/json@
instance Consumes RemoveCredits0 MimeJSON

-- | @application/json@
instance Produces RemoveCredits0 MimeJSON


-- *** updateChildAccountStatus0

-- | @PUT \/reseller\/children\/{childIdentifier}\/accountStatus@
-- 
-- Update info of reseller's child account status based on the identifier supplied
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
updateChildAccountStatus0
  :: (Consumes UpdateChildAccountStatus0 MimeJSON, MimeRender MimeJSON UpdateChildAccountStatus)
  => UpdateChildAccountStatus -- ^ "updateChildAccountStatus" -  values to update in child account status
  -> ChildIdentifier -- ^ "childIdentifier" -  Either auth key or id of reseller's child
  -> SendinBlueRequest UpdateChildAccountStatus0 MimeJSON NoContent MimeNoContent
updateChildAccountStatus0 updateChildAccountStatus (ChildIdentifier childIdentifier) =
  _mkRequest "PUT" ["/reseller/children/",toPath childIdentifier,"/accountStatus"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` updateChildAccountStatus

data UpdateChildAccountStatus0 

-- | /Body Param/ "updateChildAccountStatus" - values to update in child account status
instance HasBodyParam UpdateChildAccountStatus0 UpdateChildAccountStatus 

-- | @application/json@
instance Consumes UpdateChildAccountStatus0 MimeJSON

instance Produces UpdateChildAccountStatus0 MimeNoContent


-- *** updateChildDomain0

-- | @PUT \/reseller\/children\/{childIdentifier}\/domains\/{domainName}@
-- 
-- Update the sender domain of reseller's child based on the childIdentifier and domainName passed
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
updateChildDomain0
  :: (Consumes UpdateChildDomain0 MimeJSON, MimeRender MimeJSON UpdateChildDomain)
  => UpdateChildDomain -- ^ "updateChildDomain" -  value to update for sender domain
  -> ChildIdentifier -- ^ "childIdentifier" -  Either auth key or id of reseller's child
  -> DomainName -- ^ "domainName" -  Pass the existing domain that needs to be updated
  -> SendinBlueRequest UpdateChildDomain0 MimeJSON NoContent MimeNoContent
updateChildDomain0 updateChildDomain (ChildIdentifier childIdentifier) (DomainName domainName) =
  _mkRequest "PUT" ["/reseller/children/",toPath childIdentifier,"/domains/",toPath domainName]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` updateChildDomain

data UpdateChildDomain0 

-- | /Body Param/ "updateChildDomain" - value to update for sender domain
instance HasBodyParam UpdateChildDomain0 UpdateChildDomain 

-- | @application/json@
instance Consumes UpdateChildDomain0 MimeJSON

instance Produces UpdateChildDomain0 MimeNoContent


-- *** updateResellerChild

-- | @PUT \/reseller\/children\/{childIdentifier}@
-- 
-- Update info of reseller's child based on the child identifier supplied
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
updateResellerChild
  :: (Consumes UpdateResellerChild MimeJSON, MimeRender MimeJSON UpdateChild)
  => UpdateChild -- ^ "resellerChild" -  values to update in child profile
  -> ChildIdentifier -- ^ "childIdentifier" -  Either auth key or id of reseller's child
  -> SendinBlueRequest UpdateResellerChild MimeJSON NoContent MimeNoContent
updateResellerChild resellerChild (ChildIdentifier childIdentifier) =
  _mkRequest "PUT" ["/reseller/children/",toPath childIdentifier]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` resellerChild

data UpdateResellerChild 

-- | /Body Param/ "resellerChild" - values to update in child profile
instance HasBodyParam UpdateResellerChild UpdateChild 

-- | @application/json@
instance Consumes UpdateResellerChild MimeJSON

instance Produces UpdateResellerChild MimeNoContent

