{-
   SendinBlue API

   SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 

   OpenAPI spec version: 2.0
   SendinBlue API API version: 3.0.0
   Contact: contact@sendinblue.com
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : SendinBlue.API.EmailCampaigns
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module SendinBlue.API.EmailCampaigns where

import SendinBlue.Core
import SendinBlue.MimeTypes
import SendinBlue.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** EmailCampaigns

-- *** createEmailCampaign0

-- | @POST \/emailCampaigns@
-- 
-- Create an email campaign
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
createEmailCampaign0 
  :: (Consumes CreateEmailCampaign0 MimeJSON, MimeRender MimeJSON CreateEmailCampaign)
  => CreateEmailCampaign -- ^ "emailCampaigns" -  Values to create a campaign
  -> SendinBlueRequest CreateEmailCampaign0 MimeJSON CreateModel MimeJSON
createEmailCampaign0 emailCampaigns =
  _mkRequest "POST" ["/emailCampaigns"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` emailCampaigns

data CreateEmailCampaign0 

-- | /Body Param/ "emailCampaigns" - Values to create a campaign
instance HasBodyParam CreateEmailCampaign0 CreateEmailCampaign 

-- | @application/json@
instance Consumes CreateEmailCampaign0 MimeJSON

-- | @application/json@
instance Produces CreateEmailCampaign0 MimeJSON


-- *** deleteEmailCampaign

-- | @DELETE \/emailCampaigns\/{campaignId}@
-- 
-- Delete an email campaign
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
deleteEmailCampaign 
  :: CampaignId -- ^ "campaignId" -  id of the campaign
  -> SendinBlueRequest DeleteEmailCampaign MimeNoContent res MimeJSON
deleteEmailCampaign (CampaignId campaignId) =
  _mkRequest "DELETE" ["/emailCampaigns/",toPath campaignId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data DeleteEmailCampaign  

-- | @application/json@
instance Consumes DeleteEmailCampaign MimeJSON

-- | @application/json@
instance Produces DeleteEmailCampaign MimeJSON


-- *** emailExportRecipients0

-- | @POST \/emailCampaigns\/{campaignId}\/exportRecipients@
-- 
-- Export the recipients of a campaign
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
emailExportRecipients0 
  :: (Consumes EmailExportRecipients0 MimeJSON)
  => CampaignId -- ^ "campaignId" -  Id of the campaign
  -> SendinBlueRequest EmailExportRecipients0 MimeJSON CreatedProcessId MimeJSON
emailExportRecipients0 (CampaignId campaignId) =
  _mkRequest "POST" ["/emailCampaigns/",toPath campaignId,"/exportRecipients"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data EmailExportRecipients0 

-- | /Body Param/ "recipientExport" - Values to send for a recipient export request
instance HasBodyParam EmailExportRecipients0 EmailExportRecipients 

-- | @application/json@
instance Consumes EmailExportRecipients0 MimeJSON

-- | @application/json@
instance Produces EmailExportRecipients0 MimeJSON


-- *** getEmailCampaign0

-- | @GET \/emailCampaigns\/{campaignId}@
-- 
-- Get campaign informations
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
getEmailCampaign0 
  :: CampaignId -- ^ "campaignId" -  Id of the campaign
  -> SendinBlueRequest GetEmailCampaign0 MimeNoContent GetEmailCampaign MimeJSON
getEmailCampaign0 (CampaignId campaignId) =
  _mkRequest "GET" ["/emailCampaigns/",toPath campaignId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data GetEmailCampaign0  

-- | @application/json@
instance Consumes GetEmailCampaign0 MimeJSON

-- | @application/json@
instance Produces GetEmailCampaign0 MimeJSON


-- *** getEmailCampaigns0

-- | @GET \/emailCampaigns@
-- 
-- Return all your created campaigns
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
getEmailCampaigns0 
  :: SendinBlueRequest GetEmailCampaigns0 MimeNoContent GetEmailCampaigns MimeJSON
getEmailCampaigns0 =
  _mkRequest "GET" ["/emailCampaigns"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data GetEmailCampaigns0  

-- | /Optional Param/ "type" - Filter on the type of the campaigns
instance HasOptionalParam GetEmailCampaigns0 ParamType where
  applyOptionalParam req (ParamType xs) =
    req `setQuery` toQuery ("type", Just xs)

-- | /Optional Param/ "status" - Filter on the status of the campaign
instance HasOptionalParam GetEmailCampaigns0 Status where
  applyOptionalParam req (Status xs) =
    req `setQuery` toQuery ("status", Just xs)

-- | /Optional Param/ "startDate" - Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )
instance HasOptionalParam GetEmailCampaigns0 StartDate where
  applyOptionalParam req (StartDate xs) =
    req `setQuery` toQuery ("startDate", Just xs)

-- | /Optional Param/ "endDate" - Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )
instance HasOptionalParam GetEmailCampaigns0 EndDate where
  applyOptionalParam req (EndDate xs) =
    req `setQuery` toQuery ("endDate", Just xs)

-- | /Optional Param/ "limit" - Number of documents per page
instance HasOptionalParam GetEmailCampaigns0 Limit where
  applyOptionalParam req (Limit xs) =
    req `setQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "offset" - Index of the first document in the page
instance HasOptionalParam GetEmailCampaigns0 Offset where
  applyOptionalParam req (Offset xs) =
    req `setQuery` toQuery ("offset", Just xs)

-- | @application/json@
instance Consumes GetEmailCampaigns0 MimeJSON

-- | @application/json@
instance Produces GetEmailCampaigns0 MimeJSON


-- *** getSharedTemplateUrl0

-- | @GET \/emailCampaigns\/{campaignId}\/sharedUrl@
-- 
-- Get a shared template url
-- 
-- Get a unique URL to share & import an email template from one Sendinblue account to another.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
getSharedTemplateUrl0 
  :: CampaignId -- ^ "campaignId" -  Id of the campaign or template
  -> SendinBlueRequest GetSharedTemplateUrl0 MimeNoContent GetSharedTemplateUrl MimeJSON
getSharedTemplateUrl0 (CampaignId campaignId) =
  _mkRequest "GET" ["/emailCampaigns/",toPath campaignId,"/sharedUrl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data GetSharedTemplateUrl0  

-- | @application/json@
instance Consumes GetSharedTemplateUrl0 MimeJSON

-- | @application/json@
instance Produces GetSharedTemplateUrl0 MimeJSON


-- *** sendEmailCampaignNow

-- | @POST \/emailCampaigns\/{campaignId}\/sendNow@
-- 
-- Send an email campaign immediately, based on campaignId
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
sendEmailCampaignNow 
  :: CampaignId -- ^ "campaignId" -  Id of the campaign
  -> SendinBlueRequest SendEmailCampaignNow MimeNoContent res MimeJSON
sendEmailCampaignNow (CampaignId campaignId) =
  _mkRequest "POST" ["/emailCampaigns/",toPath campaignId,"/sendNow"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data SendEmailCampaignNow  

-- | @application/json@
instance Consumes SendEmailCampaignNow MimeJSON

-- | @application/json@
instance Produces SendEmailCampaignNow MimeJSON


-- *** sendReport0

-- | @POST \/emailCampaigns\/{campaignId}\/sendReport@
-- 
-- Send the report of a campaigns
-- 
-- A PDF will be sent to the specified email addresses
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
sendReport0 
  :: (Consumes SendReport0 MimeJSON, MimeRender MimeJSON SendReport)
  => CampaignId -- ^ "campaignId" -  Id of the campaign
  -> SendReport -- ^ "sendReport" -  Values for send a report
  -> SendinBlueRequest SendReport0 MimeJSON res MimeJSON
sendReport0 (CampaignId campaignId) sendReport =
  _mkRequest "POST" ["/emailCampaigns/",toPath campaignId,"/sendReport"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` sendReport

data SendReport0 

-- | /Body Param/ "sendReport" - Values for send a report
instance HasBodyParam SendReport0 SendReport 

-- | @application/json@
instance Consumes SendReport0 MimeJSON

-- | @application/json@
instance Produces SendReport0 MimeJSON


-- *** sendTestEmail0

-- | @POST \/emailCampaigns\/{campaignId}\/sendTest@
-- 
-- Send an email campaign to your test list
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
sendTestEmail0 
  :: (Consumes SendTestEmail0 MimeJSON, MimeRender MimeJSON SendTestEmail)
  => CampaignId -- ^ "campaignId" -  Id of the campaign
  -> SendTestEmail -- ^ "emailTo"
  -> SendinBlueRequest SendTestEmail0 MimeJSON res MimeJSON
sendTestEmail0 (CampaignId campaignId) emailTo =
  _mkRequest "POST" ["/emailCampaigns/",toPath campaignId,"/sendTest"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` emailTo

data SendTestEmail0 
instance HasBodyParam SendTestEmail0 SendTestEmail 

-- | @application/json@
instance Consumes SendTestEmail0 MimeJSON

-- | @application/json@
instance Produces SendTestEmail0 MimeJSON


-- *** updateCampaignStatus0

-- | @PUT \/emailCampaigns\/{campaignId}\/status@
-- 
-- Update a campaign status
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
updateCampaignStatus0 
  :: (Consumes UpdateCampaignStatus0 MimeJSON, MimeRender MimeJSON UpdateCampaignStatus)
  => CampaignId -- ^ "campaignId" -  Id of the campaign
  -> UpdateCampaignStatus -- ^ "status" -  Status of the campaign
  -> SendinBlueRequest UpdateCampaignStatus0 MimeJSON res MimeJSON
updateCampaignStatus0 (CampaignId campaignId) status =
  _mkRequest "PUT" ["/emailCampaigns/",toPath campaignId,"/status"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` status

data UpdateCampaignStatus0 

-- | /Body Param/ "status" - Status of the campaign
instance HasBodyParam UpdateCampaignStatus0 UpdateCampaignStatus 

-- | @application/json@
instance Consumes UpdateCampaignStatus0 MimeJSON

-- | @application/json@
instance Produces UpdateCampaignStatus0 MimeJSON


-- *** updateEmailCampaign0

-- | @PUT \/emailCampaigns\/{campaignId}@
-- 
-- Update a campaign
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
updateEmailCampaign0 
  :: (Consumes UpdateEmailCampaign0 MimeJSON, MimeRender MimeJSON UpdateEmailCampaign)
  => CampaignId -- ^ "campaignId" -  Id of the campaign
  -> UpdateEmailCampaign -- ^ "emailCampaign" -  Values to update a campaign
  -> SendinBlueRequest UpdateEmailCampaign0 MimeJSON res MimeJSON
updateEmailCampaign0 (CampaignId campaignId) emailCampaign =
  _mkRequest "PUT" ["/emailCampaigns/",toPath campaignId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` emailCampaign

data UpdateEmailCampaign0 

-- | /Body Param/ "emailCampaign" - Values to update a campaign
instance HasBodyParam UpdateEmailCampaign0 UpdateEmailCampaign 

-- | @application/json@
instance Consumes UpdateEmailCampaign0 MimeJSON

-- | @application/json@
instance Produces UpdateEmailCampaign0 MimeJSON

