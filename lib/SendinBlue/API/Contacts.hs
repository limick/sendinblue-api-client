{-
   SendinBlue API

   SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 

   OpenAPI Version: 3.0.1
   SendinBlue API API version: 3.0.0
   Contact: contact@sendinblue.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : SendinBlue.API.Contacts
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module SendinBlue.API.Contacts where

import SendinBlue.Core
import SendinBlue.MimeTypes
import SendinBlue.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Contacts

-- *** addContactToList0

-- | @POST \/contacts\/lists\/{listId}\/contacts\/add@
-- 
-- Add existing contacts to a list
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
addContactToList0
  :: (Consumes AddContactToList0 MimeJSON, MimeRender MimeJSON AddContactToList)
  => AddContactToList -- ^ "contactEmails" -  Emails addresses of the contacts
  -> ListId -- ^ "listId" -  Id of the list
  -> SendinBlueRequest AddContactToList0 MimeJSON PostContactInfo MimeJSON
addContactToList0 contactEmails (ListId listId) =
  _mkRequest "POST" ["/contacts/lists/",toPath listId,"/contacts/add"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` contactEmails

data AddContactToList0 

-- | /Body Param/ "contactEmails" - Emails addresses of the contacts
instance HasBodyParam AddContactToList0 AddContactToList 

-- | @application/json@
instance Consumes AddContactToList0 MimeJSON

-- | @application/json@
instance Produces AddContactToList0 MimeJSON


-- *** createAttribute0

-- | @POST \/contacts\/attributes\/{attributeCategory}\/{attributeName}@
-- 
-- Create contact attribute
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
createAttribute0
  :: (Consumes CreateAttribute0 MimeJSON, MimeRender MimeJSON CreateAttribute)
  => CreateAttribute -- ^ "createAttribute" -  Values to create an attribute
  -> AttributeCategory2 -- ^ "attributeCategory" -  Category of the attribute
  -> AttributeName -- ^ "attributeName" -  Name of the attribute
  -> SendinBlueRequest CreateAttribute0 MimeJSON NoContent MimeNoContent
createAttribute0 createAttribute (AttributeCategory2 attributeCategory) (AttributeName attributeName) =
  _mkRequest "POST" ["/contacts/attributes/",toPath attributeCategory,"/",toPath attributeName]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` createAttribute

data CreateAttribute0 

-- | /Body Param/ "createAttribute" - Values to create an attribute
instance HasBodyParam CreateAttribute0 CreateAttribute 

-- | @application/json@
instance Consumes CreateAttribute0 MimeJSON

instance Produces CreateAttribute0 MimeNoContent


-- *** createContact0

-- | @POST \/contacts@
-- 
-- Create a contact
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
createContact0
  :: (Consumes CreateContact0 MimeJSON, MimeRender MimeJSON CreateContact)
  => CreateContact -- ^ "createContact" -  Values to create a contact
  -> SendinBlueRequest CreateContact0 MimeJSON CreateUpdateContactModel MimeJSON
createContact0 createContact =
  _mkRequest "POST" ["/contacts"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` createContact

data CreateContact0 

-- | /Body Param/ "createContact" - Values to create a contact
instance HasBodyParam CreateContact0 CreateContact 

-- | @application/json@
instance Consumes CreateContact0 MimeJSON

-- | @application/json@
instance Produces CreateContact0 MimeJSON


-- *** createDoiContact0

-- | @POST \/contacts\/doubleOptinConfirmation@
-- 
-- Create Contact via DOI (Double-Opt-In) Flow
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
createDoiContact0
  :: (Consumes CreateDoiContact0 MimeJSON, MimeRender MimeJSON CreateDoiContact)
  => CreateDoiContact -- ^ "createDoiContact" -  Values to create the Double opt-in (DOI) contact
  -> SendinBlueRequest CreateDoiContact0 MimeJSON NoContent MimeNoContent
createDoiContact0 createDoiContact =
  _mkRequest "POST" ["/contacts/doubleOptinConfirmation"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` createDoiContact

data CreateDoiContact0 

-- | /Body Param/ "createDoiContact" - Values to create the Double opt-in (DOI) contact
instance HasBodyParam CreateDoiContact0 CreateDoiContact 

-- | @application/json@
instance Consumes CreateDoiContact0 MimeJSON

instance Produces CreateDoiContact0 MimeNoContent


-- *** createFolder

-- | @POST \/contacts\/folders@
-- 
-- Create a folder
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
createFolder
  :: (Consumes CreateFolder MimeJSON, MimeRender MimeJSON CreateUpdateFolder)
  => CreateUpdateFolder -- ^ "createFolder" -  Name of the folder
  -> SendinBlueRequest CreateFolder MimeJSON CreateModel MimeJSON
createFolder createFolder =
  _mkRequest "POST" ["/contacts/folders"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` createFolder

data CreateFolder 

-- | /Body Param/ "createFolder" - Name of the folder
instance HasBodyParam CreateFolder CreateUpdateFolder 

-- | @application/json@
instance Consumes CreateFolder MimeJSON

-- | @application/json@
instance Produces CreateFolder MimeJSON


-- *** createList0

-- | @POST \/contacts\/lists@
-- 
-- Create a list
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
createList0
  :: (Consumes CreateList0 MimeJSON, MimeRender MimeJSON CreateList)
  => CreateList -- ^ "createList" -  Values to create a list
  -> SendinBlueRequest CreateList0 MimeJSON CreateModel MimeJSON
createList0 createList =
  _mkRequest "POST" ["/contacts/lists"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` createList

data CreateList0 

-- | /Body Param/ "createList" - Values to create a list
instance HasBodyParam CreateList0 CreateList 

-- | @application/json@
instance Consumes CreateList0 MimeJSON

-- | @application/json@
instance Produces CreateList0 MimeJSON


-- *** deleteAttribute

-- | @DELETE \/contacts\/attributes\/{attributeCategory}\/{attributeName}@
-- 
-- Delete an attribute
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
deleteAttribute
  :: AttributeCategory2 -- ^ "attributeCategory" -  Category of the attribute
  -> AttributeName -- ^ "attributeName" -  Name of the existing attribute
  -> SendinBlueRequest DeleteAttribute MimeNoContent NoContent MimeNoContent
deleteAttribute (AttributeCategory2 attributeCategory) (AttributeName attributeName) =
  _mkRequest "DELETE" ["/contacts/attributes/",toPath attributeCategory,"/",toPath attributeName]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data DeleteAttribute  
instance Produces DeleteAttribute MimeNoContent


-- *** deleteContact

-- | @DELETE \/contacts\/{email}@
-- 
-- Delete a contact
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
deleteContact
  :: Email -- ^ "email" -  Email (urlencoded) of the contact
  -> SendinBlueRequest DeleteContact MimeNoContent NoContent MimeNoContent
deleteContact (Email email) =
  _mkRequest "DELETE" ["/contacts/",toPath email]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data DeleteContact  
instance Produces DeleteContact MimeNoContent


-- *** deleteFolder

-- | @DELETE \/contacts\/folders\/{folderId}@
-- 
-- Delete a folder (and all its lists)
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
deleteFolder
  :: FolderId -- ^ "folderId" -  Id of the folder
  -> SendinBlueRequest DeleteFolder MimeNoContent NoContent MimeNoContent
deleteFolder (FolderId folderId) =
  _mkRequest "DELETE" ["/contacts/folders/",toPath folderId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data DeleteFolder  
instance Produces DeleteFolder MimeNoContent


-- *** deleteList

-- | @DELETE \/contacts\/lists\/{listId}@
-- 
-- Delete a list
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
deleteList
  :: ListId -- ^ "listId" -  Id of the list
  -> SendinBlueRequest DeleteList MimeNoContent NoContent MimeNoContent
deleteList (ListId listId) =
  _mkRequest "DELETE" ["/contacts/lists/",toPath listId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data DeleteList  
instance Produces DeleteList MimeNoContent


-- *** getAttributes0

-- | @GET \/contacts\/attributes@
-- 
-- List all attributes
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
getAttributes0
  :: SendinBlueRequest GetAttributes0 MimeNoContent GetAttributes MimeJSON
getAttributes0 =
  _mkRequest "GET" ["/contacts/attributes"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data GetAttributes0  
-- | @application/json@
instance Produces GetAttributes0 MimeJSON


-- *** getContactInfo

-- | @GET \/contacts\/{email}@
-- 
-- Get a contact's details
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
getContactInfo
  :: Email -- ^ "email" -  Email (urlencoded) of the contact OR its SMS attribute value
  -> SendinBlueRequest GetContactInfo MimeNoContent GetExtendedContactDetails MimeJSON
getContactInfo (Email email) =
  _mkRequest "GET" ["/contacts/",toPath email]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data GetContactInfo  
-- | @application/json@
instance Produces GetContactInfo MimeJSON


-- *** getContactStats

-- | @GET \/contacts\/{email}\/campaignStats@
-- 
-- Get email campaigns' statistics for a contact
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
getContactStats
  :: Email -- ^ "email" -  Email address (urlencoded) of the contact
  -> SendinBlueRequest GetContactStats MimeNoContent GetContactCampaignStats MimeJSON
getContactStats (Email email) =
  _mkRequest "GET" ["/contacts/",toPath email,"/campaignStats"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data GetContactStats  

-- | /Optional Param/ "startDate" - Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate
instance HasOptionalParam GetContactStats StartDateDate where
  applyOptionalParam req (StartDateDate xs) =
    req `addQuery` toQuery ("startDate", Just xs)

-- | /Optional Param/ "endDate" - Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate
instance HasOptionalParam GetContactStats EndDateDate where
  applyOptionalParam req (EndDateDate xs) =
    req `addQuery` toQuery ("endDate", Just xs)
-- | @application/json@
instance Produces GetContactStats MimeJSON


-- *** getContacts0

-- | @GET \/contacts@
-- 
-- Get all the contacts
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
getContacts0
  :: SendinBlueRequest GetContacts0 MimeNoContent GetContacts MimeJSON
getContacts0 =
  _mkRequest "GET" ["/contacts"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data GetContacts0  

-- | /Optional Param/ "limit" - Number of documents per page
instance HasOptionalParam GetContacts0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "offset" - Index of the first document of the page
instance HasOptionalParam GetContacts0 Offset where
  applyOptionalParam req (Offset xs) =
    req `addQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "modifiedSince" - Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.
instance HasOptionalParam GetContacts0 ModifiedSince where
  applyOptionalParam req (ModifiedSince xs) =
    req `addQuery` toQuery ("modifiedSince", Just xs)

-- | /Optional Param/ "sort" - Sort the results in the ascending/descending order of record creation
instance HasOptionalParam GetContacts0 Sort where
  applyOptionalParam req (Sort xs) =
    req `addQuery` toQuery ("sort", Just xs)
-- | @application/json@
instance Produces GetContacts0 MimeJSON


-- *** getContactsFromList

-- | @GET \/contacts\/lists\/{listId}\/contacts@
-- 
-- Get contacts in a list
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
getContactsFromList
  :: ListId -- ^ "listId" -  Id of the list
  -> SendinBlueRequest GetContactsFromList MimeNoContent GetContacts MimeJSON
getContactsFromList (ListId listId) =
  _mkRequest "GET" ["/contacts/lists/",toPath listId,"/contacts"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data GetContactsFromList  

-- | /Optional Param/ "modifiedSince" - Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.
instance HasOptionalParam GetContactsFromList ModifiedSince where
  applyOptionalParam req (ModifiedSince xs) =
    req `addQuery` toQuery ("modifiedSince", Just xs)

-- | /Optional Param/ "limit" - Number of documents per page
instance HasOptionalParam GetContactsFromList Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "offset" - Index of the first document of the page
instance HasOptionalParam GetContactsFromList Offset where
  applyOptionalParam req (Offset xs) =
    req `addQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "sort" - Sort the results in the ascending/descending order of record creation
instance HasOptionalParam GetContactsFromList Sort where
  applyOptionalParam req (Sort xs) =
    req `addQuery` toQuery ("sort", Just xs)
-- | @application/json@
instance Produces GetContactsFromList MimeJSON


-- *** getFolder0

-- | @GET \/contacts\/folders\/{folderId}@
-- 
-- Returns a folder's details
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
getFolder0
  :: FolderId -- ^ "folderId" -  id of the folder
  -> SendinBlueRequest GetFolder0 MimeNoContent GetFolder MimeJSON
getFolder0 (FolderId folderId) =
  _mkRequest "GET" ["/contacts/folders/",toPath folderId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data GetFolder0  
-- | @application/json@
instance Produces GetFolder0 MimeJSON


-- *** getFolderLists0

-- | @GET \/contacts\/folders\/{folderId}\/lists@
-- 
-- Get lists in a folder
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
getFolderLists0
  :: FolderId -- ^ "folderId" -  Id of the folder
  -> SendinBlueRequest GetFolderLists0 MimeNoContent GetFolderLists MimeJSON
getFolderLists0 (FolderId folderId) =
  _mkRequest "GET" ["/contacts/folders/",toPath folderId,"/lists"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data GetFolderLists0  

-- | /Optional Param/ "limit" - Number of documents per page
instance HasOptionalParam GetFolderLists0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "offset" - Index of the first document of the page
instance HasOptionalParam GetFolderLists0 Offset where
  applyOptionalParam req (Offset xs) =
    req `addQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "sort" - Sort the results in the ascending/descending order of record creation
instance HasOptionalParam GetFolderLists0 Sort where
  applyOptionalParam req (Sort xs) =
    req `addQuery` toQuery ("sort", Just xs)
-- | @application/json@
instance Produces GetFolderLists0 MimeJSON


-- *** getFolders0

-- | @GET \/contacts\/folders@
-- 
-- Get all folders
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
getFolders0
  :: Limit -- ^ "limit" -  Number of documents per page
  -> Offset -- ^ "offset" -  Index of the first document of the page
  -> SendinBlueRequest GetFolders0 MimeNoContent GetFolders MimeJSON
getFolders0 (Limit limit) (Offset offset) =
  _mkRequest "GET" ["/contacts/folders"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `addQuery` toQuery ("limit", Just limit)
    `addQuery` toQuery ("offset", Just offset)

data GetFolders0  

-- | /Optional Param/ "sort" - Sort the results in the ascending/descending order of record creation
instance HasOptionalParam GetFolders0 Sort where
  applyOptionalParam req (Sort xs) =
    req `addQuery` toQuery ("sort", Just xs)
-- | @application/json@
instance Produces GetFolders0 MimeJSON


-- *** getList0

-- | @GET \/contacts\/lists\/{listId}@
-- 
-- Get a list's details
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
getList0
  :: ListId -- ^ "listId" -  Id of the list
  -> SendinBlueRequest GetList0 MimeNoContent GetExtendedList MimeJSON
getList0 (ListId listId) =
  _mkRequest "GET" ["/contacts/lists/",toPath listId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data GetList0  
-- | @application/json@
instance Produces GetList0 MimeJSON


-- *** getLists0

-- | @GET \/contacts\/lists@
-- 
-- Get all the lists
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
getLists0
  :: SendinBlueRequest GetLists0 MimeNoContent GetLists MimeJSON
getLists0 =
  _mkRequest "GET" ["/contacts/lists"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data GetLists0  

-- | /Optional Param/ "limit" - Number of documents per page
instance HasOptionalParam GetLists0 Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "offset" - Index of the first document of the page
instance HasOptionalParam GetLists0 Offset where
  applyOptionalParam req (Offset xs) =
    req `addQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "sort" - Sort the results in the ascending/descending order of record creation
instance HasOptionalParam GetLists0 Sort where
  applyOptionalParam req (Sort xs) =
    req `addQuery` toQuery ("sort", Just xs)
-- | @application/json@
instance Produces GetLists0 MimeJSON


-- *** importContacts

-- | @POST \/contacts\/import@
-- 
-- Import contacts
-- 
-- It returns the background process ID which on completion calls the notify URL that you have set in the input.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
importContacts
  :: (Consumes ImportContacts MimeJSON, MimeRender MimeJSON RequestContactImport)
  => RequestContactImport -- ^ "requestContactImport" -  Values to import contacts in Sendinblue. To know more about the expected format, please have a look at ``https://help.sendinblue.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns``
  -> SendinBlueRequest ImportContacts MimeJSON CreatedProcessId MimeJSON
importContacts requestContactImport =
  _mkRequest "POST" ["/contacts/import"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` requestContactImport

data ImportContacts 

-- | /Body Param/ "requestContactImport" - Values to import contacts in Sendinblue. To know more about the expected format, please have a look at ``https://help.sendinblue.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns``
instance HasBodyParam ImportContacts RequestContactImport 

-- | @application/json@
instance Consumes ImportContacts MimeJSON

-- | @application/json@
instance Produces ImportContacts MimeJSON


-- *** removeContactFromList0

-- | @POST \/contacts\/lists\/{listId}\/contacts\/remove@
-- 
-- Delete a contact from a list
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
removeContactFromList0
  :: (Consumes RemoveContactFromList0 MimeJSON, MimeRender MimeJSON RemoveContactFromList)
  => RemoveContactFromList -- ^ "contactEmails" -  Emails adresses of the contact
  -> ListId -- ^ "listId" -  Id of the list
  -> SendinBlueRequest RemoveContactFromList0 MimeJSON PostContactInfo MimeJSON
removeContactFromList0 contactEmails (ListId listId) =
  _mkRequest "POST" ["/contacts/lists/",toPath listId,"/contacts/remove"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` contactEmails

data RemoveContactFromList0 

-- | /Body Param/ "contactEmails" - Emails adresses of the contact
instance HasBodyParam RemoveContactFromList0 RemoveContactFromList 

-- | @application/json@
instance Consumes RemoveContactFromList0 MimeJSON

-- | @application/json@
instance Produces RemoveContactFromList0 MimeJSON


-- *** requestContactExport0

-- | @POST \/contacts\/export@
-- 
-- Export contacts
-- 
-- It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
requestContactExport0
  :: (Consumes RequestContactExport0 MimeJSON, MimeRender MimeJSON RequestContactExport)
  => RequestContactExport -- ^ "requestContactExport" -  Values to request a contact export
  -> SendinBlueRequest RequestContactExport0 MimeJSON CreatedProcessId MimeJSON
requestContactExport0 requestContactExport =
  _mkRequest "POST" ["/contacts/export"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` requestContactExport

data RequestContactExport0 

-- | /Body Param/ "requestContactExport" - Values to request a contact export
instance HasBodyParam RequestContactExport0 RequestContactExport 

-- | @application/json@
instance Consumes RequestContactExport0 MimeJSON

-- | @application/json@
instance Produces RequestContactExport0 MimeJSON


-- *** updateAttribute0

-- | @PUT \/contacts\/attributes\/{attributeCategory}\/{attributeName}@
-- 
-- Update contact attribute
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
updateAttribute0
  :: (Consumes UpdateAttribute0 MimeJSON, MimeRender MimeJSON UpdateAttribute)
  => UpdateAttribute -- ^ "updateAttribute" -  Values to update an attribute
  -> AttributeCategory -- ^ "attributeCategory" -  Category of the attribute
  -> AttributeName -- ^ "attributeName" -  Name of the existing attribute
  -> SendinBlueRequest UpdateAttribute0 MimeJSON NoContent MimeNoContent
updateAttribute0 updateAttribute (AttributeCategory attributeCategory) (AttributeName attributeName) =
  _mkRequest "PUT" ["/contacts/attributes/",toPath attributeCategory,"/",toPath attributeName]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` updateAttribute

data UpdateAttribute0 

-- | /Body Param/ "updateAttribute" - Values to update an attribute
instance HasBodyParam UpdateAttribute0 UpdateAttribute 

-- | @application/json@
instance Consumes UpdateAttribute0 MimeJSON

instance Produces UpdateAttribute0 MimeNoContent


-- *** updateContact0

-- | @PUT \/contacts\/{email}@
-- 
-- Update a contact
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
updateContact0
  :: (Consumes UpdateContact0 MimeJSON, MimeRender MimeJSON UpdateContact)
  => UpdateContact -- ^ "updateContact" -  Values to update a contact
  -> Email -- ^ "email" -  Email (urlencoded) of the contact
  -> SendinBlueRequest UpdateContact0 MimeJSON NoContent MimeNoContent
updateContact0 updateContact (Email email) =
  _mkRequest "PUT" ["/contacts/",toPath email]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` updateContact

data UpdateContact0 

-- | /Body Param/ "updateContact" - Values to update a contact
instance HasBodyParam UpdateContact0 UpdateContact 

-- | @application/json@
instance Consumes UpdateContact0 MimeJSON

instance Produces UpdateContact0 MimeNoContent


-- *** updateFolder

-- | @PUT \/contacts\/folders\/{folderId}@
-- 
-- Update a folder
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
updateFolder
  :: (Consumes UpdateFolder MimeJSON, MimeRender MimeJSON CreateUpdateFolder)
  => CreateUpdateFolder -- ^ "updateFolder" -  Name of the folder
  -> FolderId -- ^ "folderId" -  Id of the folder
  -> SendinBlueRequest UpdateFolder MimeJSON NoContent MimeNoContent
updateFolder updateFolder (FolderId folderId) =
  _mkRequest "PUT" ["/contacts/folders/",toPath folderId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` updateFolder

data UpdateFolder 

-- | /Body Param/ "updateFolder" - Name of the folder
instance HasBodyParam UpdateFolder CreateUpdateFolder 

-- | @application/json@
instance Consumes UpdateFolder MimeJSON

instance Produces UpdateFolder MimeNoContent


-- *** updateList0

-- | @PUT \/contacts\/lists\/{listId}@
-- 
-- Update a list
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
updateList0
  :: (Consumes UpdateList0 MimeJSON, MimeRender MimeJSON UpdateList)
  => UpdateList -- ^ "updateList" -  Values to update a list
  -> ListId -- ^ "listId" -  Id of the list
  -> SendinBlueRequest UpdateList0 MimeJSON NoContent MimeNoContent
updateList0 updateList (ListId listId) =
  _mkRequest "PUT" ["/contacts/lists/",toPath listId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `setBodyParam` updateList

data UpdateList0 

-- | /Body Param/ "updateList" - Values to update a list
instance HasBodyParam UpdateList0 UpdateList 

-- | @application/json@
instance Consumes UpdateList0 MimeJSON

instance Produces UpdateList0 MimeNoContent

