---
swagger: "2.0"
info:
  description: "SendinBlue provide a RESTFul API that can be used with any languages.\
    \ With this API, you will be able to :\n  - Manage your campaigns and get the\
    \ statistics\n  - Manage your contacts\n  - Send transactional Emails and SMS\n\
    \  - and much more...\n\nYou can download our wrappers at https://github.com/orgs/sendinblue\n\
    \n**Possible responses**\n  | Code | Message |\n  | :-------------: | -------------\
    \ |\n  | 200  | OK. Successful Request  |\n  | 201  | OK. Successful Creation\
    \ |\n  | 202  | OK. Request accepted |\n  | 204  | OK. Successful Update/Deletion\
    \  |\n  | 400  | Error. Bad Request  |\n  | 401  | Error. Authentication Needed\
    \  |\n  | 402  | Error. Not enough credit, plan upgrade needed  |\n  | 403  |\
    \ Error. Permission denied  |\n  | 404  | Error. Object does not exist |\n  |\
    \ 405  | Error. Method not allowed  |\n  | 406  | Error. Not Acceptable  |\n"
  version: "3.0.0"
  title: "SendinBlue API"
  contact:
    name: "Sendinblue Support"
    url: "https://account.sendinblue.com/support"
    email: "contact@sendinblue.com"
  license:
    name: "MIT"
    url: "http://opensource.org/licenses/MIT"
host: "api.sendinblue.com"
basePath: "/v3"
schemes:
- "https"
consumes:
- "application/json"
produces:
- "application/json"
security:
- api-key: []
paths:
  /account:
    get:
      tags:
      - "Account"
      summary: "Get your account informations, plans and credits details"
      operationId: "getAccount"
      parameters: []
      responses:
        "200":
          description: "account informations"
          examples:
            application/json:
              plan:
              - type: "payAsYouGo"
                credits: 5000
                creditsType: "sendLimit"
              - type: "subscription"
                credits: 39983
                creditsType: "sendLimit"
                startDate: "2017-03-11"
                endDate: "2017-04-11"
              - type: "sms"
                credits: 999.5360000000001
                creditsType: "sendLimit"
              relay:
                enabled: true
                data:
                  userName: "john.smith@example.com"
                  relay: "smtp-relay.domain.com"
                  port: 587
              marketingAutomation:
                key: "kzfr5xxxxxxttuyo1"
                enabled: true
              email: "john.smith@example.com"
              firstName: "John"
              lastName: "Smith"
              companyName: "MyShop"
              address:
                city: "New-York"
                street: "1677B 8th Avenue"
                zipCode: "7665"
                country: "USA"
          schema:
            $ref: "#/definitions/getAccount"
  /reseller/children:
    get:
      tags:
      - "Reseller"
      summary: "Gets the list of all reseller's children accounts"
      operationId: "getResellerChilds"
      parameters:
      - name: "limit"
        in: "query"
        description: "Number of documents for child accounts information per page"
        required: false
        type: "integer"
        default: 10
        maximum: 20
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Index of the first document in the page"
        required: false
        type: "integer"
        default: 0
        format: "int64"
      responses:
        "200":
          description: "list of children"
          examples:
            application/json:
              children:
              - email: "john.smith@example.com"
                firstName: "John"
                lastName: "Smith"
                companyName: "MyCompany"
                credits:
                  emailCredits: 98555
                  smsCredits: 87556
                statistics:
                  previousMonthTotalSent: 7654
                  currentMonthTotalSent: 4566
                  totalSent: 987554
                password: "abC0xxxxxx3jkL"
                ips:
                - "176.2.39.4"
                - "231.43.21.7"
                apiKeys:
                  v2:
                  - name: "N˚2"
                    key: "nOpxxxxxy7z"
                  v3:
                  - name: "N˚3"
                    key: "xkeysib-21881axxxxxcc92e04-mIrexxxx7z"
                id: 187588
              - email: "alex.pain@example.com"
                firstName: "Alex"
                lastName: "Pain"
                companyName: "MyStore"
                credits:
                  emailCredits: 2000
                  smsCredits: 0
                statistics:
                  previousMonthTotalSent: 654
                  currentMonthTotalSent: 300
                  totalSent: 6553
                password: "abC0xxxxx64kL"
                ips:
                - "176.2.39.4"
                - "231.43.21.7"
                apiKeys:
                  v2:
                  - name: "N˚2"
                    key: "nOpxxxxxy7z"
                  v3:
                  - name: "N˚3"
                    key: "xkeysib-21881axxxxxcc92e04-mIrexxxx7z"
                id: 187669
          schema:
            $ref: "#/definitions/getChildrenList"
        "403":
          description: "Current account is not a reseller"
          schema:
            $ref: "#/definitions/errorModel"
    post:
      tags:
      - "Reseller"
      summary: "Creates a reseller child"
      operationId: "createResellerChild"
      parameters:
      - in: "body"
        name: "resellerChild"
        description: "reseller child to add"
        required: false
        schema:
          $ref: "#/definitions/createChild"
      responses:
        "201":
          description: "child created"
          schema:
            $ref: "#/definitions/createReseller"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "403":
          description: "Current account is not a reseller"
          schema:
            $ref: "#/definitions/errorModel"
  /reseller/children/{childAuthKey}:
    get:
      tags:
      - "Reseller"
      summary: "Gets the info about a specific child account"
      operationId: "getChildInfo"
      parameters:
      - name: "childAuthKey"
        in: "path"
        description: "auth key of reseller's child"
        required: true
        type: "string"
      responses:
        "200":
          description: "Information for the child"
          examples:
            application/json:
              email: "john.smith@example.com"
              firstName: "John"
              lastName: "Smith"
              companyName: "MyCompany"
              credits:
                emailCredits: 98555
                smsCredits: 87556
              statistics:
                previousMonthTotalSent: 7654
                currentMonthTotalSent: 4566
                totalSent: 987554
              password: "abC0xxxxx3jkL"
              ips:
              - "176.2.39.4"
              - "231.43.21.7"
              apiKeys:
                v2:
                - name: "N˚2"
                  key: "nOpxxxxxy7z"
                v3:
                - name: "N˚3"
                  key: "xkeysib-21881axxxxxcc92e04-mIrexxxx7z"
          schema:
            $ref: "#/definitions/getChildInfo"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "403":
          description: "Current account is not a reseller"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Child auth key not found"
          schema:
            $ref: "#/definitions/errorModel"
    put:
      tags:
      - "Reseller"
      summary: "Updates infos of reseller's child based on the childAuthKey supplied"
      operationId: "updateResellerChild"
      parameters:
      - name: "childAuthKey"
        in: "path"
        description: "auth key of reseller's child"
        required: true
        type: "string"
      - in: "body"
        name: "resellerChild"
        description: "values to update in child profile"
        required: true
        schema:
          $ref: "#/definitions/updateChild"
      responses:
        "204":
          description: "reseller's child updated"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "403":
          description: "Current account is not a reseller"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Child auth key not found"
          schema:
            $ref: "#/definitions/errorModel"
    delete:
      tags:
      - "Reseller"
      summary: "Deletes a single reseller child based on the childAuthKey supplied"
      operationId: "deleteResellerChild"
      parameters:
      - name: "childAuthKey"
        in: "path"
        description: "auth key of reseller's child"
        required: true
        type: "string"
      responses:
        "204":
          description: "child deleted"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "403":
          description: "Current account is not a reseller"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Child auth key not found"
          schema:
            $ref: "#/definitions/errorModel"
  /reseller/children/{childAuthKey}/accountStatus:
    put:
      tags:
      - "Reseller"
      summary: "Updates infos of reseller's child account status based on the childAuthKey\
        \ supplied"
      operationId: "updateChildAccountStatus"
      parameters:
      - name: "childAuthKey"
        in: "path"
        description: "auth key of reseller's child"
        required: true
        type: "string"
      - in: "body"
        name: "updateChildAccountStatus"
        description: "values to update in child account status"
        required: true
        schema:
          $ref: "#/definitions/updateChildAccountStatus"
      responses:
        "204":
          description: "reseller's child account status updated"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "403":
          description: "Current account is not a reseller"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Child auth key not found"
          schema:
            $ref: "#/definitions/errorModel"
  /reseller/children/{childAuthKey}/accountCreationStatus:
    get:
      tags:
      - "Reseller"
      summary: "Returns the status of reseller's child account creation, whether it\
        \ is successfully created (exists) or not based on the childAuthKey supplied"
      operationId: "getChildAccountCreationStatus"
      parameters:
      - name: "childAuthKey"
        in: "path"
        description: "auth key of reseller's child"
        required: true
        type: "string"
      responses:
        "200":
          description: "status of reseller's child account"
          examples:
            application/json:
              childAccountCreated: true
          schema:
            $ref: "#/definitions/getChildAccountCreationStatus"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "403":
          description: "Current account is not a reseller"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Child auth key not found"
          schema:
            $ref: "#/definitions/errorModel"
  /reseller/children/{childAuthKey}/ips/associate:
    post:
      tags:
      - "Reseller"
      summary: "Associate a dedicated IP to the child"
      operationId: "associateIpToChild"
      parameters:
      - name: "childAuthKey"
        in: "path"
        description: "auth key of reseller's child"
        required: true
        type: "string"
      - in: "body"
        name: "ip"
        description: "IP to associate"
        required: true
        schema:
          $ref: "#/definitions/manageIp"
      responses:
        "204":
          description: "Dedicated IP is associated to the child"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Child auth key not found"
          schema:
            $ref: "#/definitions/errorModel"
  /reseller/children/{childAuthKey}/ips/dissociate:
    post:
      tags:
      - "Reseller"
      summary: "Dissociate a dedicated IP to the child"
      operationId: "dissociateIpFromChild"
      parameters:
      - name: "childAuthKey"
        in: "path"
        description: "auth key of reseller's child"
        required: true
        type: "string"
      - in: "body"
        name: "ip"
        description: "IP to dissociate"
        required: true
        schema:
          $ref: "#/definitions/manageIp"
      responses:
        "204":
          description: "Dedicated IP is dissociated from the child"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Child auth key not found"
          schema:
            $ref: "#/definitions/errorModel"
  /reseller/children/{childAuthKey}/credits/add:
    post:
      tags:
      - "Reseller"
      summary: "Add Email and/or SMS credits to a specific child account"
      operationId: "addCredits"
      parameters:
      - name: "childAuthKey"
        in: "path"
        description: "auth key of reseller's child"
        required: true
        type: "string"
      - in: "body"
        name: "addCredits"
        description: "Values to post to add credit to a specific child account"
        required: true
        schema:
          $ref: "#/definitions/addCredits"
      responses:
        "200":
          description: "Credits added"
          examples:
            application/json:
              child:
                sms: 500
                email: 2000
              reseller:
                sms: 12900
                email: 2000000
          schema:
            $ref: "#/definitions/remainingCreditModel"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "403":
          description: "Current account is not a reseller"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Child auth key not found"
          schema:
            $ref: "#/definitions/errorModel"
  /reseller/children/{childAuthKey}/credits/remove:
    post:
      tags:
      - "Reseller"
      summary: "Remove Email and/or SMS credits from a specific child account"
      operationId: "removeCredits"
      parameters:
      - name: "childAuthKey"
        in: "path"
        description: "auth key of reseller's child"
        required: true
        type: "string"
      - in: "body"
        name: "removeCredits"
        description: "Values to post to remove email or SMS credits from a specific\
          \ child account"
        required: true
        schema:
          $ref: "#/definitions/removeCredits"
      responses:
        "200":
          description: "Credits removed"
          examples:
            application/json:
              child:
                sms: 500
                email: 2000
              reseller:
                sms: 12900
                email: 2000000
          schema:
            $ref: "#/definitions/remainingCreditModel"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "403":
          description: "Current account is not a reseller"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Child ID not found"
          schema:
            $ref: "#/definitions/errorModel"
  /reseller/children/{childAuthKey}/domains:
    get:
      tags:
      - "Reseller"
      summary: "Gets all the sender domains of a specific child account"
      operationId: "getChildDomains"
      parameters:
      - name: "childAuthKey"
        in: "path"
        description: "auth key of reseller's child"
        required: true
        type: "string"
      responses:
        "200":
          description: "Sender domains of the child"
          examples:
            application/json:
            - domain: "mycustomdomain.com"
              active: true
            - domain: "mynewdomain.com"
              active: true
          schema:
            $ref: "#/definitions/getChildDomains"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "403":
          description: "Current account is not a reseller"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Child auth key not found"
          schema:
            $ref: "#/definitions/errorModel"
    post:
      tags:
      - "Reseller"
      summary: "Creates a domain for a child account"
      operationId: "createChildDomain"
      parameters:
      - name: "childAuthKey"
        in: "path"
        description: "auth key of reseller's child"
        required: true
        type: "string"
      - in: "body"
        name: "addChildDomain"
        description: "Sender domain to add for a specific child account"
        required: true
        schema:
          $ref: "#/definitions/addChildDomain"
      responses:
        "201":
          description: "Domain added"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "403":
          description: "Current account is not a reseller"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Child auth key not found"
          schema:
            $ref: "#/definitions/errorModel"
  /reseller/children/{childAuthKey}/domains/{domainName}:
    put:
      tags:
      - "Reseller"
      summary: "Updates the sender domain of reseller's child based on the childAuthKey\
        \ and domainName passed"
      operationId: "updateChildDomain"
      parameters:
      - name: "childAuthKey"
        in: "path"
        description: "auth key of reseller's child"
        required: true
        type: "string"
      - name: "domainName"
        in: "path"
        description: "Pass the existing domain that needs to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "updateChildDomain"
        description: "value to update for sender domain"
        required: true
        schema:
          $ref: "#/definitions/updateChildDomain"
      responses:
        "204":
          description: "reseller's child domain updated"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "403":
          description: "Current account is not a reseller"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Child auth key not found"
          schema:
            $ref: "#/definitions/errorModel"
    delete:
      tags:
      - "Reseller"
      summary: "Deletes the sender domain of the reseller child based on the childAuthKey\
        \ and domainName passed"
      operationId: "deleteChildDomain"
      parameters:
      - name: "childAuthKey"
        in: "path"
        description: "auth key of reseller's child"
        required: true
        type: "string"
      - name: "domainName"
        in: "path"
        description: "Pass the existing domain that needs to be deleted"
        required: true
        type: "string"
      responses:
        "204":
          description: "child domain deleted"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "403":
          description: "Current account is not a reseller"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Child auth key not found"
          schema:
            $ref: "#/definitions/errorModel"
  /reseller/children/{childAuthKey}/auth:
    get:
      tags:
      - "Reseller"
      summary: "Get session token to access Sendinblue (SSO)"
      description: "It returns a session [token] which will remain valid for a short\
        \ period of time. A child account will be able to access a white-labeled section\
        \ by using the following url pattern => https:/email.mydomain.com/login/sso?token=[token]"
      operationId: "getSsoToken"
      parameters:
      - name: "childAuthKey"
        in: "path"
        description: "auth key of reseller's child"
        required: true
        type: "string"
      responses:
        "200":
          description: "Session token"
          examples:
            application/json:
              token: "5cadaxxxxxxxxxxxxxxxxxxxx5a179f85a0"
          schema:
            $ref: "#/definitions/getSsoToken"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "403":
          description: "Current account is not a reseller"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Child auth key not found"
          schema:
            $ref: "#/definitions/errorModel"
  /senders:
    get:
      tags:
      - "Senders"
      summary: "Get the list of all your senders"
      operationId: "getSenders"
      parameters:
      - name: "ip"
        in: "query"
        description: "Filter your senders for a specific ip (available for dedicated\
          \ IP usage only)"
        required: false
        type: "string"
      - name: "domain"
        in: "query"
        description: "Filter your senders for a specific domain"
        required: false
        type: "string"
      responses:
        "200":
          description: "list of senders"
          examples:
            application/json:
              senders:
              - id: 1
                name: "Marketing"
                email: "marketing@mycompany.com"
                active: true
                ips:
                - ip: "123.98.689.7"
                  domain: "mycompany.com"
                  weight: 100
              - id: 2
                name: "Newsletter"
                email: "newsletter@mycompany.com"
                active: false
                ips:
                - ip: "123.98.689.7"
                  domain: "mycompany.com"
                  weight: 50
                - ip: "123.98.643.2"
                  domain: "news.mycompany.com"
                  weight: 50
          schema:
            $ref: "#/definitions/getSendersList"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
    post:
      tags:
      - "Senders"
      summary: "Create a new sender"
      operationId: "createSender"
      parameters:
      - in: "body"
        name: "sender"
        description: "sender's name"
        required: false
        schema:
          $ref: "#/definitions/createSender"
      responses:
        "201":
          description: "sender created"
          schema:
            $ref: "#/definitions/createSenderModel"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
  /senders/{senderId}:
    put:
      tags:
      - "Senders"
      summary: "Update a sender"
      operationId: "updateSender"
      parameters:
      - name: "senderId"
        in: "path"
        description: "Id of the sender"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "sender"
        description: "sender's name"
        required: false
        schema:
          $ref: "#/definitions/updateSender"
      responses:
        "204":
          description: "sender updated"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Sender ID not found"
          schema:
            $ref: "#/definitions/errorModel"
    delete:
      tags:
      - "Senders"
      summary: "Delete a sender"
      operationId: "deleteSender"
      parameters:
      - name: "senderId"
        in: "path"
        description: "Id of the sender"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "204":
          description: "sender deleted"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Sender ID not found"
          schema:
            $ref: "#/definitions/errorModel"
  /senders/{senderId}/ips:
    get:
      tags:
      - "Senders"
      summary: "Return all the dedicated IPs for a sender"
      operationId: "getIpsFromSender"
      parameters:
      - name: "senderId"
        in: "path"
        description: "Id of the sender"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "list of dedicated IPs"
          examples:
            application/json:
              ips:
              - id: 3
                ip: "123.65.8.22"
                domain: "mailing.myshop.dom"
                weight: 40
              - id: 5
                ip: "123.43.21.3"
                domain: "newsletter.myshop.dom"
                weight: 60
          schema:
            $ref: "#/definitions/getIpsFromSender"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Sender ID not found"
          schema:
            $ref: "#/definitions/errorModel"
  /senders/ips:
    get:
      tags:
      - "Senders"
      summary: "Return all the dedicated IPs for your account"
      operationId: "getIps"
      parameters: []
      responses:
        "200":
          description: "list of dedicated IPs"
          examples:
            application/json:
              ips:
              - id: 3
                ip: "67.145.89.3"
                active: true
                domain: "mailing.myshop.com"
              - id: 5
                ip: "76.76.125.9"
                active: true
                domain: "newsletter.myshop.com"
              - id: 6
                ip: "123.65.8.22"
                active: false
                domain: "notifications.myshop.com"
          schema:
            $ref: "#/definitions/getIps"
  /processes:
    get:
      tags:
      - "Process"
      summary: "Return all the processes for your account"
      operationId: "getProcesses"
      parameters:
      - name: "limit"
        in: "query"
        description: "Number limitation for the result returned"
        required: false
        type: "integer"
        default: 10
        maximum: 50
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Beginning point in the list to retrieve from."
        required: false
        type: "integer"
        default: 0
        format: "int64"
      responses:
        "200":
          description: "processes informations"
          examples:
            application/json:
              processes:
              - id: 40
                status: "completed"
                name: "TRANS-CALC"
              - id: 43
                status: "queued"
                name: "TRANS-GLOBAL-CALC"
              - id: 194
                status: "completed"
                name: "SEARCH_EXPORT_USERS"
                export_url: "<a href=\"https://export-url.com/upload/file-name.csv\"\
                  \ target=\"_blank\">filename.csv</a>"
              count: 3
          schema:
            $ref: "#/definitions/getProcesses"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
  /processes/{processId}:
    get:
      tags:
      - "Process"
      summary: "Return the informations for a process"
      operationId: "getProcess"
      parameters:
      - name: "processId"
        in: "path"
        description: "Id of the process"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "process informations"
          examples:
            application/json:
              id: 194
              status: "completed"
              name: "SEARCH_EXPORT_USERS"
              export_url: "<a href=\"https://export-url.com/upload/file-name.csv\"\
                \ target=\"_blank\">filename.csv</a>"
          schema:
            $ref: "#/definitions/getProcess"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Process ID not found"
          examples:
            application/json:
              code: "invalid_parameter"
              message: "processId is invalid"
          schema:
            $ref: "#/definitions/errorModel"
  /emailCampaigns:
    get:
      tags:
      - "Email Campaigns"
      summary: "Return all your created campaigns"
      operationId: "getEmailCampaigns"
      parameters:
      - name: "type"
        in: "query"
        description: "Filter on the type of the campaigns"
        required: false
        type: "string"
        enum:
        - "classic"
        - "trigger"
      - name: "status"
        in: "query"
        description: "Filter on the status of the campaign"
        required: false
        type: "string"
        enum:
        - "suspended"
        - "archive"
        - "sent"
        - "queued"
        - "draft"
        - "inProcess"
      - name: "startDate"
        in: "query"
        description: "Mandatory if endDate is used. Starting (urlencoded) UTC date-time\
          \ (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer\
          \ to pass your timezone in date-time format for accurate result ( only available\
          \ if either 'status' not passed and if passed is set to 'sent' )"
        required: false
        type: "string"
        format: "date-time"
      - name: "endDate"
        in: "query"
        description: "Mandatory if startDate is used. Ending (urlencoded) UTC date-time\
          \ (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer\
          \ to pass your timezone in date-time format for accurate result ( only available\
          \ if either 'status' not passed and if passed is set to 'sent' )"
        required: false
        type: "string"
        format: "date-time"
      - name: "limit"
        in: "query"
        description: "Number of documents per page"
        required: false
        type: "integer"
        default: 500
        maximum: 1000
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Index of the first document in the page"
        required: false
        type: "integer"
        default: 0
        format: "int64"
      responses:
        "200":
          description: "Email campaigns informations"
          examples:
            applications/json:
              campaigns:
              - id: 12
                name: "EN - Sales Summer 2017"
                subject: "20% OFF for 2017 Summer Sales"
                type: "classic"
                status: "sent"
                scheduledAt: "2017-06-01T12:30:00Z"
                testSent: true
                header: "[DEFAULT_HEADER]"
                footer: "[DEFAULT_FOOTER]"
                sender:
                  email: "marketing@mycompany.com"
                  name: "Marketing"
                  id: 26
                replyTo: "replyto@domain.com"
                toField: "{FNAME} {LNAME}"
                htmlContent: "This is my HTML Content"
                shareLink: "http://example.com/fhsgccc.html?t=9865448900"
                tag: "Newsletter"
                createdAt: "2017-05-01T12:30:00Z"
                modifiedAt: "2017-05-01T12:30:00Z"
                inlineImageActivation: true
                mirrorActive: true
                recurring: false
                recipients:
                  lists:
                  - 5
                  exclusionLists:
                  - 13
                statistics:
                  globalStats:
                    uniqueClicks: 2300
                    clickers: 2665
                    complaints: 1
                    delivered: 19765
                    sent: 19887
                    softBounces: 100
                    hardBounces: 87
                    uniqueViews: 7779
                    unsubscriptions: 2
                    viewed: 8999
                  campaignStats:
                  - listId: 5
                    uniqueClicks: 2300
                    clickers: 2665
                    complaints: 1
                    delivered: 19765
                    sent: 19887
                    softBounces: 100
                    hardBounces: 87
                    uniqueViews: 7779
                    unsubscriptions: 2
                    viewed: 8999
                    deferred: 30
                  mirrorClick: 120
                  remaining: 1000
                  linksStats:
                    http://myUrl1.domain.com: 80
                  statsByDomain:
                    yahoo:
                      uniqueClicks: 2300
                      clickers: 2665
                      complaints: 1
                      delivered: 19765
                      sent: 19887
                      softBounces: 100
                      hardBounces: 87
                      uniqueViews: 7779
                      unsubscriptions: 2
                      viewed: 8999
                      deferred: 30
                    gmail:
                      uniqueClicks: 2300
                      clickers: 2665
                      complaints: 1
                      delivered: 19765
                      sent: 19887
                      softBounces: 100
                      hardBounces: 87
                      uniqueViews: 7779
                      unsubscriptions: 2
                      viewed: 8999
                      deferred: 30
              - id: 22
                name: "Weekly - 1"
                subject: "Week 1 - Newsletter"
                type: "Classic"
                status: "draft"
                scheduledAt: ""
                testSent: false
                header: "[DEFAULT_HEADER]"
                footer: "[DEFAULT_FOOTER]"
                sender:
                  email: "newsletter@mycompany.com"
                  name: "Newsletter"
                  id: 26
                replyTo: "replyto@domain.com"
                toField: "{FNAME} {LNAME}"
                htmlContent: "This is my HTML Content"
                shareLink: "http://example.com/fhsgccc.html?t=9865448900"
                tag: "Newsletter"
                createdAt: "2017-05-01T12:30:00Z"
                modifiedAt: "2017-05-01T12:30:00Z"
                inlineImageActivation: true
                mirrorActive: true
                recurring: false
                recipients:
                  lists:
                  - 10
                  exclusionLists:
                  - 45
                statistics:
                  globalStats:
                    uniqueClicks: 2300
                    clickers: 2665
                    complaints: 1
                    delivered: 19765
                    sent: 19887
                    softBounces: 100
                    hardBounces: 87
                    uniqueViews: 7779
                    unsubscriptions: 2
                    viewed: 8999
                  campaignStats:
                  - listId: 10
                    uniqueClicks: 2300
                    clickers: 2665
                    complaints: 1
                    delivered: 19765
                    sent: 19887
                    softBounces: 100
                    hardBounces: 87
                    uniqueViews: 7779
                    unsubscriptions: 2
                    viewed: 8999
                    deferred: 30
                  mirrorClick: 120
                  remaining: 1000
                  linksStats:
                    http://myUrl1.domain.com:
                      nbClick: 80
                    http://myUrl2.domain.com:
                      nbClick: 80
                    http://myUrl3.domain.com:
                      nbClick: 80
                  statsByDomain:
                    gmail:
                      uniqueClicks: 2300
                      clickers: 2665
                      complaints: 1
                      delivered: 19765
                      sent: 19887
                      softBounces: 100
                      hardBounces: 87
                      uniqueViews: 7779
                      unsubscriptions: 2
                      viewed: 8999
                      deferred: 30
                    aol:
                      uniqueClicks: 2300
                      clickers: 2665
                      complaints: 1
                      delivered: 19765
                      sent: 19887
                      softBounces: 100
                      hardBounces: 87
                      uniqueViews: 7779
                      unsubscriptions: 2
                      viewed: 8999
                      deferred: 30
              count: 2
          schema:
            $ref: "#/definitions/getEmailCampaigns"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
    post:
      tags:
      - "Email Campaigns"
      summary: "Create an email campaign"
      operationId: "createEmailCampaign"
      parameters:
      - in: "body"
        name: "emailCampaigns"
        description: "Values to create a campaign"
        required: true
        schema:
          $ref: "#/definitions/createEmailCampaign"
      responses:
        "201":
          description: "Email campaign created"
          schema:
            $ref: "#/definitions/createModel"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
  /emailCampaigns/{campaignId}:
    get:
      tags:
      - "Email Campaigns"
      summary: "Get campaign informations"
      operationId: "getEmailCampaign"
      parameters:
      - name: "campaignId"
        in: "path"
        description: "Id of the campaign"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Email campaign informations"
          examples:
            application/json:
              id: 22
              name: "Weekly - 1"
              subject: "Week 1 - Newsletter"
              type: "classic"
              status: "draft"
              scheduledAt: "2017-09-22T12:30:00Z"
              testSent: false
              header: "[DEFAULT_HEADER]"
              footer: "[DEFAULT_FOOTER]"
              sender:
                email: "newsletter@mycompany.com"
                name: "Newsletter"
                id: 26
              replyTo: "replyto@domain.com"
              toField: "{FNAME} {LNAME}"
              htmlContent: "This is my HTML Content"
              shareLink: "http://dhh.sendinblue.com/fhsgccc.html?t=9865448900"
              tag: "Newsletter"
              createdAt: "2017-05-01T12:30:00Z"
              modifiedAt: "2017-05-01T12:30:00Z"
              inlineImageActivation: true
              mirrorActive: true
              recurring: false
              recipients:
                lists:
                - 22
                exclusionLists:
                - 45
              statistics:
                globalStats:
                  uniqueClicks: 2300
                  clickers: 2665
                  complaints: 1
                  delivered: 19765
                  sent: 19887
                  softBounces: 100
                  hardBounces: 87
                  uniqueViews: 7779
                  unsubscriptions: 2
                  viewed: 8999
                campaignStats:
                - listId: 22
                  uniqueClicks: 2300
                  clickers: 2665
                  complaints: 1
                  delivered: 19765
                  sent: 19887
                  softBounces: 100
                  hardBounces: 87
                  uniqueViews: 7779
                  unsubscriptions: 2
                  viewed: 8999
                  deferred: 30
                mirrorClick: 120
                remaining: 1000
                linksStats:
                  http://myUrl1.domain.com:
                    nbClick: 80
                  http://myUrl2.domain.com:
                    nbClick: 80
                  http://myUrl3.domain.com:
                    nbClick: 80
                statsByDomain:
                  gmail:
                    uniqueClicks: 2300
                    clickers: 2665
                    complaints: 1
                    delivered: 19765
                    sent: 19887
                    softBounces: 100
                    hardBounces: 87
                    uniqueViews: 7779
                    unsubscriptions: 2
                    viewed: 8999
                    deferred: 30
                statsByDevice:
                  desktop:
                    mac:
                      clickers: 1
                      uniqueClicks: 0
                      viewed: 2
                      uniqueViews: 1
                  mobile:
                    androidMobile:
                      clickers: 1
                      uniqueClicks: 0
                      viewed: 1
                      uniqueViews: 0
                    iPhone:
                      clickers: 1
                      uniqueClicks: 0
                      viewed: 2
                      uniqueViews: 0
                statsByBrowser:
                  thunderbird:
                    clickers: 1
                    uniqueClicks: 0
                    viewed: 1
                    uniqueViews: 0
                  safari:
                    clickers: 1
                    uniqueClicks: 0
                    viewed: 1
                    uniqueViews: 0
                  internetExplorer:
                    clickers: 0
                    uniqueClicks: 0
                    viewed: 1
                    uniqueViews: 0
          schema:
            $ref: "#/definitions/getEmailCampaign"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Campaign ID not found"
          schema:
            $ref: "#/definitions/errorModel"
    put:
      tags:
      - "Email Campaigns"
      summary: "Update a campaign"
      operationId: "updateEmailCampaign"
      parameters:
      - name: "campaignId"
        in: "path"
        description: "Id of the campaign"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "emailCampaign"
        description: "Values to update a campaign"
        required: true
        schema:
          $ref: "#/definitions/updateEmailCampaign"
      responses:
        "204":
          description: "Email Campaign has been updated"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Campaign ID not found"
          schema:
            $ref: "#/definitions/errorModel"
    delete:
      tags:
      - "Email Campaigns"
      summary: "Delete an email campaign"
      operationId: "deleteEmailCampaign"
      parameters:
      - name: "campaignId"
        in: "path"
        description: "id of the campaign"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "204":
          description: "Email campaign has been deleted"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Campaign ID not found"
          schema:
            $ref: "#/definitions/errorModel"
  /emailCampaigns/{campaignId}/sendNow:
    post:
      tags:
      - "Email Campaigns"
      summary: "Send an email campaign immediately, based on campaignId"
      operationId: "sendEmailCampaignNow"
      parameters:
      - name: "campaignId"
        in: "path"
        description: "Id of the campaign"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "204":
          description: "Email campaign has been scheduled"
        "400":
          description: "Campaign could not be sent"
          schema:
            $ref: "#/definitions/errorModel"
        "402":
          description: "You don't have enough credit to send your campaign. Please\
            \ update your plan"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Campaign ID not found"
          schema:
            $ref: "#/definitions/errorModel"
  /emailCampaigns/{campaignId}/sendTest:
    post:
      tags:
      - "Email Campaigns"
      summary: "Send an email campaign to your test list"
      operationId: "sendTestEmail"
      parameters:
      - name: "campaignId"
        in: "path"
        description: "Id of the campaign"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "emailTo"
        required: true
        schema:
          $ref: "#/definitions/sendTestEmail"
      responses:
        "204":
          description: "Test email has been sent successfully to all recipients"
        "400":
          description: "Test email could not be sent to the following email addresses"
          schema:
            $ref: "#/definitions/postSendFailed"
        "404":
          description: "Campaign ID not found"
          schema:
            $ref: "#/definitions/errorModel"
  /emailCampaigns/{campaignId}/exportRecipients:
    post:
      tags:
      - "Email Campaigns"
      summary: "Export the recipients of a campaign"
      operationId: "emailExportRecipients"
      parameters:
      - name: "campaignId"
        in: "path"
        description: "Id of the campaign"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "recipientExport"
        description: "Values to send for a recipient export request"
        required: false
        schema:
          $ref: "#/definitions/emailExportRecipients"
      responses:
        "202":
          description: "Recipient export request has been accepted"
          schema:
            $ref: "#/definitions/createdProcessId"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Campaign ID not found"
          schema:
            $ref: "#/definitions/errorModel"
  /emailCampaigns/{campaignId}/sendReport:
    post:
      tags:
      - "Email Campaigns"
      summary: "Send the report of a campaigns"
      description: "A PDF will be sent to the specified email addresses"
      operationId: "sendReport"
      parameters:
      - name: "campaignId"
        in: "path"
        description: "Id of the campaign"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "sendReport"
        description: "Values for send a report"
        required: true
        schema:
          $ref: "#/definitions/sendReport"
      responses:
        "204":
          description: "Report has been successfully sent to the defined recipients"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Campaign ID not found"
          schema:
            $ref: "#/definitions/errorModel"
  /emailCampaigns/{campaignId}/status:
    put:
      tags:
      - "Email Campaigns"
      summary: "Update a campaign status"
      operationId: "updateCampaignStatus"
      parameters:
      - name: "campaignId"
        in: "path"
        description: "Id of the campaign"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "status"
        description: "Status of the campaign"
        required: true
        schema:
          $ref: "#/definitions/updateCampaignStatus"
      responses:
        "204":
          description: "The campaign status has been updated successfully"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Campaign ID not found"
          schema:
            $ref: "#/definitions/errorModel"
  /emailCampaigns/{campaignId}/sharedUrl:
    get:
      tags:
      - "Email Campaigns"
      summary: "Get a shared template url"
      description: "Get a unique URL to share & import an email template from one\
        \ Sendinblue account to another."
      operationId: "getSharedTemplateUrl"
      parameters:
      - name: "campaignId"
        in: "path"
        description: "Id of the campaign or template"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Shared template URL information"
          examples:
            application/json:
              sharedUrl: "https://my.sendinblue.com/pt2YU7R5W_guXlowgumy_VX4pFsKu._zd0Gjj96x1_GMmzc1Qps5ZIpj6nx-"
          schema:
            $ref: "#/definitions/getSharedTemplateUrl"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Campaign/Template ID not found"
          schema:
            $ref: "#/definitions/errorModel"
        "405":
          description: "Only email campaigns or templates are allowed"
          schema:
            $ref: "#/definitions/errorModel"
  /smtp/blockedContacts:
    get:
      tags:
      - "SMTP"
      summary: "Get the list of blocked or unsubscribed transactional contacts"
      operationId: "getTransacBlockedContacts"
      parameters:
      - name: "startDate"
        in: "query"
        description: "Mandatory if endDate is used. Starting date (YYYY-MM-DD) from\
          \ which you want to fetch the blocked or unsubscribed contacts"
        required: false
        type: "string"
      - name: "endDate"
        in: "query"
        description: "Mandatory if startDate is used. Ending date (YYYY-MM-DD) till\
          \ which you want to fetch the blocked or unsubscribed contacts"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        description: "Number of documents returned per page"
        required: false
        type: "integer"
        default: 50
        maximum: 100
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Index of the first document on the page"
        required: false
        type: "integer"
        default: 0
        format: "int64"
      - name: "senders"
        in: "query"
        description: "Comma separated list of emails of the senders from which contacts\
          \ are blocked or unsubscribed"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        "200":
          description: "List of blocked or unsubscribed transactional contacts"
          examples:
            application/json:
              contacts:
              - email: "abc@xyz.com"
                senderEmail: "ez312@gmal.com"
                reason:
                  message: "Admin blocked"
                  code: "adminBlocked"
                blockedAt: "2017-05-01T12:30:00Z"
              count: 1
          schema:
            $ref: "#/definitions/getTransacBlockedContacts"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
  /smtp/blockedContacts/{email}:
    delete:
      tags:
      - "SMTP"
      summary: "Unblock or resubscribe a transactional contact"
      parameters:
      - name: "email"
        in: "path"
        description: "contact email (urlencoded) to unblock."
        required: true
        type: "string"
      responses:
        "204":
          description: "Contact unblocked"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Contact email not found"
          schema:
            $ref: "#/definitions/errorModel"
  /smtp/statistics/reports:
    get:
      tags:
      - "SMTP"
      summary: "Get your transactional email activity aggregated per day"
      operationId: "getSmtpReport"
      parameters:
      - name: "limit"
        in: "query"
        description: "Number of documents returned per page"
        required: false
        type: "integer"
        default: 10
        maximum: 30
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Index of the first document on the page"
        required: false
        type: "integer"
        default: 0
        format: "int64"
      - name: "startDate"
        in: "query"
        description: "Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD)"
        required: false
        type: "string"
      - name: "endDate"
        in: "query"
        description: "Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD)"
        required: false
        type: "string"
      - name: "days"
        in: "query"
        description: "Number of days in the past including today (positive integer).\
          \ Not compatible with 'startDate' and 'endDate'"
        required: false
        type: "integer"
      - name: "tag"
        in: "query"
        description: "Tag of the emails"
        required: false
        type: "string"
      responses:
        "200":
          description: "Aggregated report informations"
          examples:
            application/json:
              reports:
              - date: "2017-04-30"
                requests: 10756
                delivered: 10103
                hardBounces: 21
                softBounces: 137
                clicks: 1026
                uniqueClicks: 720
                opens: 5091
                uniqueOpens: 2318
                spamReports: 0
                blocked: 519
                invalid: 1
                unsubscribed: 0
              - date: "2017-05-01"
                requests: 18812
                delivered: 17499
                hardBounces: 34
                softBounces: 254
                clicks: 1514
                uniqueClicks: 1090
                opens: 10089
                uniqueOpens: 4393
                spamReports: 0
                blocked: 920
                invalid: 2
                unsubscribed: 3
          schema:
            $ref: "#/definitions/getReports"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
  /smtp/statistics/aggregatedReport:
    get:
      tags:
      - "SMTP"
      summary: "Get your transactional email activity aggregated over a period of\
        \ time"
      operationId: "getAggregatedSmtpReport"
      parameters:
      - name: "startDate"
        in: "query"
        description: "Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD).\
          \ Must be lower than equal to endDate"
        required: false
        type: "string"
      - name: "endDate"
        in: "query"
        description: "Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD).\
          \ Must be greater than equal to startDate"
        required: false
        type: "string"
      - name: "days"
        in: "query"
        description: "Number of days in the past including today (positive integer).\
          \ Not compatible with 'startDate' and 'endDate'"
        required: false
        type: "integer"
      - name: "tag"
        in: "query"
        description: "Tag of the emails"
        required: false
        type: "string"
      responses:
        "200":
          description: "Aggregated report informations"
          examples:
            application/json:
              range: "2016-09-08|2017-04-28"
              requests: 19887
              delivered: 18996
              hardBounces: 234
              softBounces: 1533
              clicks: 9987
              uniqueClicks: 8766
              opens: 17654
              uniqueOpens: 13688
              spamReports: 1
              blocked: 2
              invalid: 0
              unsubscribed: 2
          schema:
            $ref: "#/definitions/getAggregatedReport"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
  /smtp/statistics/events:
    get:
      tags:
      - "SMTP"
      summary: "Get all your transactional email activity (unaggregated events)"
      operationId: "getEmailEventReport"
      parameters:
      - name: "limit"
        in: "query"
        description: "Number limitation for the result returned"
        required: false
        type: "integer"
        default: 50
        maximum: 100
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Beginning point in the list to retrieve from."
        required: false
        type: "integer"
        default: 0
        format: "int64"
      - name: "startDate"
        in: "query"
        description: "Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD).\
          \ Must be lower than equal to endDate"
        required: false
        type: "string"
      - name: "endDate"
        in: "query"
        description: "Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD).\
          \ Must be greater than equal to startDate"
        required: false
        type: "string"
      - name: "days"
        in: "query"
        description: "Number of days in the past including today (positive integer).\
          \ Not compatible with 'startDate' and 'endDate'"
        required: false
        type: "integer"
      - name: "email"
        in: "query"
        description: "Filter the report for a specific email addresses"
        required: false
        type: "string"
        format: "email"
      - name: "event"
        in: "query"
        description: "Filter the report for a specific event type"
        required: false
        type: "string"
        enum:
        - "bounces"
        - "hardBounces"
        - "softBounces"
        - "delivered"
        - "spam"
        - "requests"
        - "opened"
        - "clicks"
        - "invalid"
        - "deferred"
        - "blocked"
        - "unsubscribed"
      - name: "tags"
        in: "query"
        description: "Filter the report for tags (serialized and urlencoded array)"
        required: false
        type: "string"
      - name: "messageId"
        in: "query"
        description: "Filter on a specific message id"
        required: false
        type: "string"
      - name: "templateId"
        in: "query"
        description: "Filter on a specific template id"
        required: false
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Email events report informations"
          examples:
            application/json:
              events:
              - email: "john.smith@example.com"
                date: "2017-03-12T12:30:00Z"
                messageId: "<201798300811.5787683@example.domain.com>"
                event: "deferred"
                reason: "Error connection timeout"
                tag: "OrderConfirmation"
                from: "john@example.com"
              - email: "john.smith@example.com"
                date: "2017-03-13T16:30:00Z"
                messageId: "<201798300811.5787683@example.domain.com>"
                event: "delivered"
                tag: "OrderConfirmation"
                from: "john@example.com"
          schema:
            $ref: "#/definitions/getEmailEventReport"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
  /smtp/templates:
    get:
      tags:
      - "SMTP"
      summary: "Get the list of transactional email templates"
      operationId: "getSmtpTemplates"
      parameters:
      - name: "templateStatus"
        in: "query"
        description: "Filter on the status of the template. Active = true, inactive\
          \ = false"
        required: false
        type: "boolean"
      - name: "limit"
        in: "query"
        description: "Number of documents returned per page"
        required: false
        type: "integer"
        default: 50
        maximum: 1000
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Index of the first document in the page"
        required: false
        type: "integer"
        default: 0
        format: "int64"
      responses:
        "200":
          description: "transactional email templates informations"
          examples:
            application/json:
              count: 2
              templates:
              - id: 5
                name: "ChristomasTimeTemplate"
                subject: "Merry Christmas"
                isActive: false
                testSent: false
                sender:
                  name: "John"
                  email: "john.smith@example.com"
                  id: 23
                replyTo: "replyto@domain.com"
                toField: ""
                tag: "Festival"
                htmlContent: "HTML CONTENT 1"
                createdAt: "2016-02-24T14:44:24Z"
                modifiedAt: "2016-02-24T15:37:11Z"
              - id: 12
                name: "SummerSales2017Template"
                subject: "Enjoy our summer Sales !"
                isActive: true
                testSent: false
                sender:
                  name: "John"
                  email: "john.smith@example.com"
                  id: 23
                replyTo: "replyto@domain.com"
                toField: ""
                tag: "Summer"
                htmlContent: "HTML CONTENT 2"
                createdAt: "2016-02-25T11:53:26Z"
                modifiedAt: "2016-02-25T11:53:26Z"
          schema:
            $ref: "#/definitions/getSmtpTemplates"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
    post:
      tags:
      - "SMTP"
      summary: "Create a transactional email template"
      operationId: "createSmtpTemplate"
      parameters:
      - in: "body"
        name: "smtpTemplate"
        description: "values to update in transactional email template"
        required: true
        schema:
          $ref: "#/definitions/createSmtpTemplate"
      responses:
        "201":
          description: "transactional email template created"
          schema:
            $ref: "#/definitions/createModel"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
  /smtp/templates/{templateId}:
    get:
      tags:
      - "SMTP"
      summary: "Returns the template informations"
      operationId: "getSmtpTemplate"
      parameters:
      - name: "templateId"
        in: "path"
        description: "id of the template"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Email template informations"
          examples:
            application/json:
              id: 33
              name: "OrderConfirmation"
              subject: "Order Confirmation : Thanks for your Purchase !"
              isActive: true
              testSent: false
              sender:
                name: "John"
                email: "john.smith@example.com"
                id: 26
              replyTo: "replyto@domain.com"
              toField: ""
              tag: ""
              htmlContent: "HTML CONTENT 4"
              createdAt: "2016-02-25T11:53:26Z"
              modifiedAt: "2016-02-25T11:53:26Z"
          schema:
            $ref: "#/definitions/getSmtpTemplateOverview"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Template ID not found"
          schema:
            $ref: "#/definitions/errorModel"
    put:
      tags:
      - "SMTP"
      summary: "Updates a transactional email templates"
      operationId: "updateSmtpTemplate"
      parameters:
      - name: "templateId"
        in: "path"
        description: "id of the template"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "smtpTemplate"
        description: "values to update in transactional email template"
        required: true
        schema:
          $ref: "#/definitions/updateSmtpTemplate"
      responses:
        "204":
          description: "transactional email template updated"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Template ID not found"
          schema:
            $ref: "#/definitions/errorModel"
    delete:
      tags:
      - "SMTP"
      summary: "Delete an inactive transactional email template"
      operationId: "deleteSmtpTemplate"
      parameters:
      - name: "templateId"
        in: "path"
        description: "id of the template"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "204":
          description: "Inactive transactional email template has been deleted"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Template ID not found"
          schema:
            $ref: "#/definitions/errorModel"
  /smtp/templates/{templateId}/sendTest:
    post:
      tags:
      - "SMTP"
      summary: "Send a template to your test list"
      operationId: "sendTestTemplate"
      parameters:
      - name: "templateId"
        in: "path"
        description: "Id of the template"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "sendTestEmail"
        required: true
        schema:
          $ref: "#/definitions/sendTestEmail"
      responses:
        "204":
          description: "Test email has been sent successfully to all recipients"
        "400":
          description: "Test email could not be sent to the following email addresses"
          schema:
            $ref: "#/definitions/postSendFailed"
        "404":
          description: "Template ID not found"
          schema:
            $ref: "#/definitions/errorModel"
  /smtp/templates/{templateId}/send:
    post:
      tags:
      - "SMTP"
      summary: "Send a template"
      description: "This endpoint is deprecated. Prefer v3/smtp/email instead."
      operationId: "sendTemplate"
      parameters:
      - name: "templateId"
        in: "path"
        description: "Id of the template"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "sendEmail"
        required: true
        schema:
          $ref: "#/definitions/sendEmail"
      responses:
        "201":
          description: "Email has been sent successfully to all recipients"
          schema:
            $ref: "#/definitions/sendTemplateEmail"
        "400":
          description: "Email could not be sent to the following email addresses"
          schema:
            $ref: "#/definitions/postSendFailed"
        "404":
          description: "Template ID not found"
          schema:
            $ref: "#/definitions/errorModel"
      deprecated: true
  /smtp/email:
    post:
      tags:
      - "SMTP"
      summary: "Send a transactional email"
      operationId: "sendTransacEmail"
      parameters:
      - in: "body"
        name: "sendSmtpEmail"
        description: "Values to send a transactional email"
        required: true
        schema:
          $ref: "#/definitions/sendSmtpEmail"
      responses:
        "201":
          description: "transactional email sent"
          schema:
            $ref: "#/definitions/createSmtpEmail"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
  /smtp/emails:
    get:
      tags:
      - "SMTP"
      summary: "Get the list of transactional emails on the basis of allowed filters"
      description: "This endpoint will show the list of emails for past 30 days by\
        \ default. To retrieve emails before that time, please pass startDate and\
        \ endDate in query filters."
      operationId: "getTransacEmailsList"
      parameters:
      - name: "email"
        in: "query"
        description: "Mandatory if templateId and messageId are not passed in query\
          \ filters. Email address to which transactional email has been sent."
        required: false
        type: "string"
      - name: "templateId"
        in: "query"
        description: "Mandatory if email and messageId are not passed in query filters.\
          \ Id of the template that was used to compose transactional email."
        required: false
        type: "integer"
        format: "int64"
      - name: "messageId"
        in: "query"
        description: "Mandatory if templateId and email are not passed in query filters.\
          \ Message ID of the transactional email sent."
        required: false
        type: "string"
      - name: "startDate"
        in: "query"
        description: "Mandatory if endDate is used. Starting date (YYYY-MM-DD) from\
          \ which you want to fetch the list. Maximum time period that can be selected\
          \ is one month."
        required: false
        type: "string"
      - name: "endDate"
        in: "query"
        description: "Mandatory if startDate is used. Ending date (YYYY-MM-DD) till\
          \ which you want to fetch the list. Maximum time period that can be selected\
          \ is one month."
        required: false
        type: "string"
        format: "date"
      responses:
        "200":
          description: "List of transactional emails"
          examples:
            application/json:
              transactionalEmails:
              - email: "abc@xyz.com"
                subject: "summer camp"
                templateId: 15
                messageId: "<201798300811.5787683@relay.domain.com>"
                uuid: "5a78c-209ok98262910-std2341"
                date: "2019-05-25T11:53:26Z"
              - email: "test@test.com"
                subject: "details verification"
                templateId: 15
                messageId: "<201798300811.5700093@relay.domain.com>"
                uuid: "5a78c-209ok98262910-s99a341"
                date: "2019-05-25T07:28:11Z"
          schema:
            $ref: "#/definitions/getTransacEmailsList"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
  /smtp/emails/{uuid}:
    get:
      tags:
      - "SMTP"
      summary: "Get the personalized content of a sent transactional email"
      operationId: "getTransacEmailContent"
      parameters:
      - name: "uuid"
        in: "path"
        description: "Unique id of the transactional email that has been sent to a\
          \ particular contact"
        required: true
        type: "string"
      responses:
        "200":
          description: "Transactional email content"
          examples:
            application/json:
              email: "abc@example.com"
              subject: "Summer Camps"
              templateId: 12
              date: "2016-02-25T11:53:26Z"
              events:
              - name: "sent"
                time: "2016-02-25T11:53:26Z"
              - name: "delivered"
                time: "2016-02-25T11:55:26Z"
              - name: "opened"
                time: "2016-02-26T09:53:26Z"
              body: "<!DOCTYPE html> <html> <body> <h1>Greetings from the team</h1>\
                \ <p>This is the actual html content sent</p> </body> </html>"
          schema:
            $ref: "#/definitions/getTransacEmailContent"
  /smtp/deleteHardbounces:
    post:
      tags:
      - "SMTP"
      summary: "Delete hardbounces"
      description: "Delete hardbounces. To use carefully (e.g. in case of temporary\
        \ ISP failures)"
      operationId: "deleteHardbounces"
      parameters:
      - in: "body"
        name: "deleteHardbounces"
        description: "values to delete hardbounces"
        required: false
        schema:
          $ref: "#/definitions/deleteHardbounces"
      responses:
        "204":
          description: "Hardbounces deleted"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
  /webhooks:
    get:
      tags:
      - "Webhooks"
      summary: "Get all webhooks"
      operationId: "getWebhooks"
      parameters:
      - name: "type"
        in: "query"
        description: "Filter on webhook type"
        required: false
        type: "string"
        default: "transactional"
        enum:
        - "marketing"
        - "transactional"
      responses:
        "200":
          description: "Webhooks informations"
          examples:
            application/json:
              webhooks:
              - url: "https://example.domain.com/webhook/events/kzfxxxxxxxx0uyo1"
                id: 9864
                description: "Webhook triggered on campaign openings"
                events:
                - "opened"
                type: "transac"
                createdAt: "2016-07-18T12:30:09Z"
                modifiedAt: "2016-07-18T16:00:50Z"
              - url: "http://exmaple.domain.com/15kxxxxxn1"
                id: 22770
                description: "Webhook triggered on campaign hard bounces"
                events:
                - "hardBounces"
                type: "marketing"
                createdAt: "2017-02-20T14:30:00Z"
                modifiedAt: "2017-02-20T19:00:00Z"
          schema:
            $ref: "#/definitions/getWebhooks"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
    post:
      tags:
      - "Webhooks"
      summary: "Create a webhook"
      operationId: "createWebhook"
      parameters:
      - in: "body"
        name: "createWebhook"
        description: "Values to create a webhook"
        required: true
        schema:
          $ref: "#/definitions/createWebhook"
      responses:
        "201":
          description: "Webhook created"
          schema:
            $ref: "#/definitions/createModel"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
  /webhooks/{webhookId}:
    get:
      tags:
      - "Webhooks"
      summary: "Get a webhook details"
      operationId: "getWebhook"
      parameters:
      - name: "webhookId"
        in: "path"
        description: "Id of the webhook"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Webhook informations"
          examples:
            application/json:
              url: "http://example.domain.com/1brxxxxxx5p1"
              id: 7287
              description: "Webhook triggered on campaign openings and addition of\
                \ lists"
              events:
              - "listAdditions"
              - "opened"
              type: "marketing"
              createdAt: "2016-06-07T09:10:10Z"
              modifiedAt: "2016-06-08T11:30:00Z"
          schema:
            $ref: "#/definitions/getWebhook"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Webhook ID not found"
          schema:
            $ref: "#/definitions/errorModel"
    put:
      tags:
      - "Webhooks"
      summary: "Update a webhook"
      operationId: "updateWebhook"
      parameters:
      - name: "webhookId"
        in: "path"
        description: "Id of the webhook"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "updateWebhook"
        description: "Values to update a webhook"
        required: true
        schema:
          $ref: "#/definitions/updateWebhook"
      responses:
        "204":
          description: "Webhook updated"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Webhook ID not found"
          schema:
            $ref: "#/definitions/errorModel"
    delete:
      tags:
      - "Webhooks"
      summary: "Delete a webhook"
      operationId: "deleteWebhook"
      parameters:
      - name: "webhookId"
        in: "path"
        description: "Id of the webhook"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "204":
          description: "Webhook deleted"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Webhook ID not found"
          schema:
            $ref: "#/definitions/errorModel"
  /contacts:
    get:
      tags:
      - "Contacts"
      summary: "Get all the contacts"
      operationId: "getContacts"
      parameters:
      - name: "limit"
        in: "query"
        description: "Number of documents per page"
        required: false
        type: "integer"
        default: 50
        maximum: 1000
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Index of the first document of the page"
        required: false
        type: "integer"
        default: 0
        format: "int64"
      - name: "modifiedSince"
        in: "query"
        description: "Filter (urlencoded) the contacts modified after a given UTC\
          \ date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in\
          \ date-time format for accurate result."
        required: false
        type: "string"
        format: "date-time"
      responses:
        "200":
          description: "All contacts listed"
          examples:
            application/json:
              contacts:
              - email: "contact1@example.com"
                id: 247
                emailBlacklisted: true
                smsBlacklisted: true
                createdAt: "2017-05-01T17:05:03Z"
                modifiedAt: "2017-05-01T17:05:03Z"
                listIds:
                - 43
                - 58
                attributes:
                  SMS: "33058407250"
                  IDENTIFICATION: "1-3RHQ-259"
                  CIV: "MS"
                  LAST_NAME: "Brennon"
                  FIRST_NAME: "Meg"
                  DOB: "1986-05-02"
                  ADDRESS: "1 5th avenue"
                  ZIP_CODE: "44300"
                  CITY: "New-York"
                  ACTION_CODE: "17HH98CH"
              - email: "33058407248@mailin-sms.com"
                id: 245
                emailBlacklisted: true
                smsBlacklisted: false
                createdAt: "2017-05-01T17:05:03Z"
                modifiedAt: "2017-05-01T17:05:03Z"
                listIds:
                - 43
                - 61
                - 58
                attributes:
                  SMS: "33058407248"
                  IDENTIFICATION: "1-78JS-432"
                  CIV: "MS"
                  LAST_NAME: "Press"
                  FIRST_NAME: "Sophia"
                  DOB: "1980-09-11"
                  ADDRESS: "5 Flower Street"
                  ZIP_CODE: "44119"
                  CITY: "Seattle"
                  ACTION_CODE: "17HU765"
              count: 3
          schema:
            $ref: "#/definitions/getContacts"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
    post:
      tags:
      - "Contacts"
      summary: "Create a contact"
      operationId: "createContact"
      parameters:
      - in: "body"
        name: "createContact"
        description: "Values to create a contact"
        required: true
        schema:
          $ref: "#/definitions/createContact"
      responses:
        "201":
          description: "Contact created"
          schema:
            $ref: "#/definitions/createUpdateContactModel"
        "204":
          description: "Contact updated"
          schema:
            $ref: "#/definitions/createUpdateContactModel"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
  /contacts/{email}:
    get:
      tags:
      - "Contacts"
      summary: "Retrieves contact informations"
      operationId: "getContactInfo"
      parameters:
      - name: "email"
        in: "path"
        description: "Email (urlencoded) of the contact OR its SMS attribute value"
        required: true
        type: "string"
      responses:
        "200":
          description: "Contact informations"
          examples:
            application/json:
              email: "peggy.rain@example.com"
              id: 42
              emailBlacklisted: false
              smsBlacklisted: false
              createdAt: "2017-05-02T16:40:31Z"
              modifiedAt: "2017-05-02T16:40:31Z"
              attributes:
                FIRST_NAME: "Peggy"
                LAST_NAME: "Rain"
                SMS: "3087433387669"
                CIV: "1"
                DOB: "1986-04-13"
                ADDRESS: "987 5th avenue"
                ZIP_CODE: "87544"
                CITY: "New-York"
                AREA: "NY"
              listIds:
              - 40
              statistics:
                messagesSent:
                - campaignId: 21
                  eventTime: "2016-05-03T20:15:13Z"
                - campaignId: 42
                  eventTime: "2016-10-17T10:30:01Z"
                opened:
                - campaignId: 21
                  count: 2
                  eventTime: "2016-05-03T21:24:56Z"
                  ip: "66.249.93.118"
                - campaignId: 68
                  count: 1
                  eventTime: "2017-01-30T13:56:40Z"
                  ip: "66.249.93.217"
                clicked:
                - campaignId: 21
                  links:
                  - count: 2
                    eventTime: "2016-05-03T21:25:01Z"
                    ip: "66.249.93.118"
                    url: "https://url.domain.com/fbe5387ec717e333628380454f68670010b205ff/1/go?uid={EMAIL}&utm_source=sendinblue&utm_campaign=test_camp&utm_medium=email"
          schema:
            $ref: "#/definitions/getExtendedContactDetails"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Contact's email not found"
          schema:
            $ref: "#/definitions/errorModel"
    put:
      tags:
      - "Contacts"
      summary: "Updates a contact"
      operationId: "updateContact"
      parameters:
      - name: "email"
        in: "path"
        description: "Email (urlencoded) of the contact"
        required: true
        type: "string"
      - in: "body"
        name: "updateContact"
        description: "Values to update a contact"
        required: true
        schema:
          $ref: "#/definitions/updateContact"
      responses:
        "204":
          description: "Contact updated"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Contact's email not found"
          schema:
            $ref: "#/definitions/errorModel"
    delete:
      tags:
      - "Contacts"
      summary: "Deletes a contact"
      operationId: "deleteContact"
      parameters:
      - name: "email"
        in: "path"
        description: "Email (urlencoded) of the contact"
        required: true
        type: "string"
      responses:
        "204":
          description: "Contact deleted"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Contact not found"
          schema:
            $ref: "#/definitions/errorModel"
        "405":
          description: "You're not allowed to delete registered email contact with\
            \ SendinBlue"
          schema:
            $ref: "#/definitions/errorModel"
  /contacts/{email}/campaignStats:
    get:
      tags:
      - "Contacts"
      summary: "Get the campaigns statistics for a contact"
      operationId: "getContactStats"
      parameters:
      - name: "email"
        in: "path"
        description: "Email address (urlencoded) of the contact"
        required: true
        type: "string"
      responses:
        "200":
          description: "Contact campaign statistics informations"
          examples:
            application/json:
              messagesSent:
              - campaignId: 21
                eventTime: "2016-05-03T20:15:13Z"
              - campaignId: 42
                eventTime: "2016-10-17T10:30:01Z"
              - campaignId: 45
                eventTime: "2016-11-09T11:45:02Z"
              opened:
              - campaignId: 21
                count: 2
                eventTime: "2016-05-03T21:24:56Z"
                ip: "66.249.93.118"
              - campaignId: 45
                count: 1
                eventTime: "2017-01-30T13:56:40Z"
                ip: "66.249.93.217"
              clicked:
              - campaignId: 21
                links:
                - count: 2
                  eventTime: "2016-05-03T21:25:01Z"
                  ip: "66.249.93.118"
                  url: "https://url.domain.com/fbe5387ec717e333628380454f68670010b205ff/1/go?uid={EMAIL}&utm_source=sendinblue&utm_campaign=test_camp&utm_medium=email"
          schema:
            $ref: "#/definitions/getContactCampaignStats"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Contact's email not found"
          schema:
            $ref: "#/definitions/errorModel"
  /contacts/attributes:
    get:
      tags:
      - "Contacts"
      - "Attributes"
      summary: "Lists all attributes"
      operationId: "getAttributes"
      parameters: []
      responses:
        "200":
          description: "Attributes listed"
          examples:
            application/json:
              attributes:
              - name: "LASTNAME"
                category: "normal"
                type: "text"
              - name: "FIRSTNAME"
                category: "normal"
                type: "text"
              - name: "DOB"
                category: "normal"
                type: "date"
              - name: "GENDER"
                category: "category"
                type: "text"
                enumeration:
                - value: 1
                  label: "Men"
                - value: 2
                  label: "Women"
                - value: 3
                  label: "Kid"
          schema:
            $ref: "#/definitions/getAttributes"
  /contacts/attributes/{attributeCategory}/{attributeName}:
    post:
      tags:
      - "Contacts"
      - "Attributes"
      summary: "Creates contact attribute"
      operationId: "createAttribute"
      parameters:
      - name: "attributeCategory"
        in: "path"
        description: "Category of the attribute"
        required: true
        type: "string"
        enum:
        - "normal"
        - "transactional"
        - "category"
        - "calculated"
        - "global"
      - name: "attributeName"
        in: "path"
        description: "Name of the attribute"
        required: true
        type: "string"
      - in: "body"
        name: "createAttribute"
        description: "Values to create an attribute"
        required: true
        schema:
          $ref: "#/definitions/createAttribute"
      responses:
        "201":
          description: "Attribute created"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
    put:
      tags:
      - "Contacts"
      - "Attributes"
      summary: "Updates contact attribute"
      operationId: "updateAttribute"
      parameters:
      - name: "attributeCategory"
        in: "path"
        description: "Category of the attribute"
        required: true
        type: "string"
        enum:
        - "category"
        - "calculated"
        - "global"
      - name: "attributeName"
        in: "path"
        description: "Name of the existing attribute"
        required: true
        type: "string"
      - in: "body"
        name: "updateAttribute"
        description: "Values to update an attribute"
        required: true
        schema:
          $ref: "#/definitions/updateAttribute"
      responses:
        "204":
          description: "Attribute updated"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Attribute not found"
          schema:
            $ref: "#/definitions/errorModel"
    delete:
      tags:
      - "Contacts"
      - "Attributes"
      summary: "Deletes an attribute"
      operationId: "deleteAttribute"
      parameters:
      - name: "attributeCategory"
        in: "path"
        description: "Category of the attribute"
        required: true
        type: "string"
        enum:
        - "normal"
        - "transactional"
        - "category"
        - "calculated"
        - "global"
      - name: "attributeName"
        in: "path"
        description: "Name of the existing attribute"
        required: true
        type: "string"
      responses:
        "204":
          description: "Attribute deleted"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Attribute not found"
          schema:
            $ref: "#/definitions/errorModel"
  /contacts/folders:
    get:
      tags:
      - "Contacts"
      - "Folders"
      summary: "Get all the folders"
      operationId: "getFolders"
      parameters:
      - name: "limit"
        in: "query"
        description: "Number of documents per page"
        required: true
        type: "integer"
        default: 10
        maximum: 50
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Index of the first document of the page"
        required: true
        type: "integer"
        default: 0
        format: "int64"
      responses:
        "200":
          description: "Folders informations"
          examples:
            application/json:
              folders:
              - id: 42
                name: "Ninja_Form"
                totalBlacklisted: 98
                totalSubscribers: 4567
                uniqueSubscribers: 4665
              - id: 29
                name: "Prestashop"
                totalBlacklisted: 10
                totalSubscribers: 6543
                uniqueSubscribers: 6553
              count: 2
          schema:
            $ref: "#/definitions/getFolders"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
    post:
      tags:
      - "Contacts"
      - "Folders"
      summary: "Create a folder"
      operationId: "createFolder"
      parameters:
      - in: "body"
        name: "createFolder"
        description: "Name of the folder"
        required: true
        schema:
          $ref: "#/definitions/createUpdateFolder"
      responses:
        "201":
          description: "Folder created"
          schema:
            $ref: "#/definitions/createModel"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
  /contacts/folders/{folderId}:
    get:
      tags:
      - "Contacts"
      - "Folders"
      summary: "Returns folder details"
      operationId: "getFolder"
      parameters:
      - name: "folderId"
        in: "path"
        description: "id of the folder"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Folder details"
          examples:
            application/json:
              id: 1
              name: "Client_Folder"
              totalBlacklisted: 987
              totalSubscribers: 16778
              uniqueSubscribers: 17765
          schema:
            $ref: "#/definitions/getFolder"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Folder ID not found"
          schema:
            $ref: "#/definitions/errorModel"
    put:
      tags:
      - "Contacts"
      - "Folders"
      summary: "Update a contact folder"
      operationId: "updateFolder"
      parameters:
      - name: "folderId"
        in: "path"
        description: "Id of the folder"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "updateFolder"
        description: "Name of the folder"
        required: true
        schema:
          $ref: "#/definitions/createUpdateFolder"
      responses:
        "204":
          description: "Folder updated"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Folder ID not found"
          schema:
            $ref: "#/definitions/errorModel"
    delete:
      tags:
      - "Contacts"
      - "Folders"
      summary: "Delete a folder (and all its lists)"
      operationId: "deleteFolder"
      parameters:
      - name: "folderId"
        in: "path"
        description: "Id of the folder"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "204":
          description: "Folder deleted"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Folder ID not found"
          schema:
            $ref: "#/definitions/errorModel"
  /contacts/folders/{folderId}/lists:
    get:
      tags:
      - "Contacts"
      - "Folders"
      - "Lists"
      summary: "Get the lists in a folder"
      operationId: "getFolderLists"
      parameters:
      - name: "folderId"
        in: "path"
        description: "Id of the folder"
        required: true
        type: "integer"
        format: "int64"
      - name: "limit"
        in: "query"
        description: "Number of documents per page"
        required: false
        type: "integer"
        default: 10
        maximum: 50
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Index of the first document of the page"
        required: false
        type: "integer"
        default: 0
        format: "int64"
      responses:
        "200":
          description: "Folder's Lists details"
          examples:
            application/json:
              lists:
              - id: 46
                name: "Reactiv"
                totalSubscribers: 7655
                totalBlacklisted: 0
              - id: 41
                name: "NY_Area"
                totalSubscribers: 3654
                totalBlacklisted: 23
              - id: 22
                name: "VIP_Customer"
                totalSubscribers: 8753
                totalBlacklisted: 72
              count: 3
          schema:
            $ref: "#/definitions/getFolderLists"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Folder ID not found"
          schema:
            $ref: "#/definitions/errorModel"
  /contacts/lists:
    get:
      tags:
      - "Contacts"
      - "Lists"
      summary: "Get all the lists"
      operationId: "getLists"
      parameters:
      - name: "limit"
        in: "query"
        description: "Number of documents per page"
        required: false
        type: "integer"
        default: 10
        maximum: 50
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Index of the first document of the page"
        required: false
        type: "integer"
        default: 0
        format: "int64"
      responses:
        "200":
          description: "Lists informations"
          examples:
            application/json:
              lists:
              - id: 53
                name: "Spanish_Speakers"
                totalSubscribers: 5432
                totalBlacklisted: 65
                folderId: 1
              - id: 50
                name: "Other"
                totalSubscribers: 10976
                totalBlacklisted: 765
                folderId: 2
              count: 2
          schema:
            $ref: "#/definitions/getLists"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
    post:
      tags:
      - "Contacts"
      - "Lists"
      summary: "Create a list"
      operationId: "createList"
      parameters:
      - in: "body"
        name: "createList"
        description: "Values to create a list"
        required: true
        schema:
          $ref: "#/definitions/createList"
      responses:
        "201":
          description: "List created"
          schema:
            $ref: "#/definitions/createModel"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
  /contacts/lists/{listId}:
    get:
      tags:
      - "Contacts"
      - "Lists"
      summary: "Get the details of a list"
      operationId: "getList"
      parameters:
      - name: "listId"
        in: "path"
        description: "Id of the list"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "List informations"
          examples:
            application/json:
              id: 12
              name: "Newsletter_Weekly"
              totalSubscribers: 6533
              totalBlacklisted: 63
              folderId: 1
              createdAt: "2016-02-26T11:56:08Z"
              campaignStats:
              - campaignId: 15
                stats:
                  uniqueClicks: 701
                  clickers: 789
                  complaints: 0
                  delivered: 6632
                  sent: 6645
                  softBounces: 34
                  hardBounces: 4
                  uniqueViews: 3442
                  unsubscriptions: 4
                  viewed: 4322
                  deferred: 0
              - campaignId: 45
                stats:
                  uniqueClicks: 654
                  clickers: 788
                  complaints: 1
                  delivered: 4078
                  sent: 4334
                  softBounces: 18
                  hardBounces: 2
                  uniqueViews: 987
                  unsubscriptions: 4
                  viewed: 1555
                  deferred: 0
              dynamicList: false
          schema:
            $ref: "#/definitions/getExtendedList"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "List ID not found"
          schema:
            $ref: "#/definitions/errorModel"
    put:
      tags:
      - "Contacts"
      - "Lists"
      summary: "Update a list"
      operationId: "updateList"
      parameters:
      - name: "listId"
        in: "path"
        description: "Id of the list"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "updateList"
        description: "Values to update a list"
        required: true
        schema:
          $ref: "#/definitions/updateList"
      responses:
        "204":
          description: "List updated"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "List ID not found"
          schema:
            $ref: "#/definitions/errorModel"
    delete:
      tags:
      - "Contacts"
      - "Lists"
      summary: "Delete a list"
      operationId: "deleteList"
      parameters:
      - name: "listId"
        in: "path"
        description: "Id of the list"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "204":
          description: "List deleted"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "List ID not found"
          schema:
            $ref: "#/definitions/errorModel"
  /contacts/lists/{listId}/contacts:
    get:
      tags:
      - "Contacts"
      - "Lists"
      summary: "Get the contacts in a list"
      operationId: "getContactsFromList"
      parameters:
      - name: "listId"
        in: "path"
        description: "Id of the list"
        required: true
        type: "integer"
        format: "int64"
      - name: "modifiedSince"
        in: "query"
        description: "Filter (urlencoded) the contacts modified after a given UTC\
          \ date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in\
          \ date-time format for accurate result."
        required: false
        type: "string"
        format: "date-time"
      - name: "limit"
        in: "query"
        description: "Number of documents per page"
        required: false
        type: "integer"
        default: 50
        maximum: 500
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Index of the first document of the page"
        required: false
        type: "integer"
        default: 0
        format: "int64"
      responses:
        "200":
          description: "Contact informations"
          examples:
            application/json:
              contacts:
              - email: "alex.pain@example.com"
                id: 45
                emailBlacklisted: false
                smsBlacklisted: true
                createdAt: "2017-05-12T12:30:00Z"
                modifiedAt: "2017-05-12T12:30:00Z"
                listIds:
                - 12
                - 9
                - 20
                listUnsubscribed:
                - 1
                - 2
                attributes:
                  LASTNAME: "Pain"
                  FIRSTNAME: "Alex"
                  DOB: "2010-12-31"
                  GENDER: "Kid"
              - email: "john.smith@example.com"
                id: 32
                emailBlacklisted: true
                smsBlacklisted: false
                createdAt: "2017-05-12T12:30:00Z"
                modifiedAt: "2017-05-12T12:30:00Z"
                listIds:
                - 12
                listUnsubscribed:
                - 1
                attributes:
                  LASTNAME: "Smith"
                  FIRSTNAME: "John"
                  DOB: "1986-06-21"
                  GENDER: "Men"
              - email: "helen.rose@example.com"
                id: 65
                emailBlacklisted: true
                smsBlacklisted: false
                createdAt: "2017-05-12T12:30:00Z"
                modifiedAt: "2017-05-12T12:30:00Z"
                listIds:
                - 12
                - 9
                - 20
                listUnsubscribed:
                - 1
                attributes:
                  LASTNAME: "Rose"
                  FIRSTNAME: "Helen"
                  DOB: "1988-11-02"
                  GENDER: "Women"
                  SMS: "3375599887766"
              count: 17655
          schema:
            $ref: "#/definitions/getContacts"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "List ID not found"
          schema:
            $ref: "#/definitions/errorModel"
  /contacts/lists/{listId}/contacts/add:
    post:
      tags:
      - "Contacts"
      - "Lists"
      summary: "Add existing contacts to a list"
      operationId: "addContactToList"
      parameters:
      - name: "listId"
        in: "path"
        description: "Id of the list"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "contactEmails"
        description: "Emails addresses of the contacts"
        required: true
        schema:
          $ref: "#/definitions/addContactToList"
      responses:
        "201":
          description: "All contacts have been added successfully to the list with\
            \ details of failed ones"
          schema:
            $ref: "#/definitions/postContactInfo"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "List ID not found"
          schema:
            $ref: "#/definitions/errorModel"
  /contacts/lists/{listId}/contacts/remove:
    post:
      tags:
      - "Contacts"
      - "Lists"
      summary: "Remove existing contacts from a list"
      operationId: "removeContactFromList"
      parameters:
      - name: "listId"
        in: "path"
        description: "Id of the list"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "contactEmails"
        description: "Emails adresses of the contact"
        required: true
        schema:
          $ref: "#/definitions/removeContactFromList"
      responses:
        "201":
          description: "All contacts have been removed successfully from the list\
            \ with details of failed ones"
          schema:
            $ref: "#/definitions/postContactInfo"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "List ID not found"
          schema:
            $ref: "#/definitions/errorModel"
  /contacts/export:
    post:
      tags:
      - "Contacts"
      summary: "Export contacts"
      description: "It returns the background process ID which on completion calls\
        \ the notify URL that you have set in the input. File will be available in\
        \ csv."
      operationId: "requestContactExport"
      parameters:
      - in: "body"
        name: "requestContactExport"
        description: "Values to request a contact export"
        required: true
        schema:
          $ref: "#/definitions/requestContactExport"
      responses:
        "202":
          description: "Contact export request has been accepted"
          schema:
            $ref: "#/definitions/createdProcessId"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
  /contacts/import:
    post:
      tags:
      - "Contacts"
      summary: "Import contacts"
      description: "It returns the background process ID which on completion calls\
        \ the notify URL that you have set in the input."
      operationId: "importContacts"
      parameters:
      - in: "body"
        name: "requestContactImport"
        description: "Values to import contacts in Sendinblue. To know more about\
          \ the expected format, please have a look at ``https://help.sendinblue.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns``"
        required: true
        schema:
          $ref: "#/definitions/requestContactImport"
      responses:
        "202":
          description: "Contact import request has been accepted"
          schema:
            $ref: "#/definitions/createdProcessId"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
  /smsCampaigns:
    get:
      tags:
      - "SMS Campaigns"
      summary: "Returns the informations for all your created SMS campaigns"
      operationId: "getSmsCampaigns"
      parameters:
      - name: "status"
        in: "query"
        description: "Status of campaign."
        required: false
        type: "string"
        enum:
        - "suspended"
        - "archive"
        - "sent"
        - "queued"
        - "draft"
        - "inProcess"
      - name: "startDate"
        in: "query"
        description: "Mandatory if endDate is used. Starting (urlencoded) UTC date-time\
          \ (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to\
          \ pass your timezone in date-time format for accurate result ( only available\
          \ if either 'status' not passed and if passed is set to 'sent' )"
        required: false
        type: "string"
        format: "date-time"
      - name: "endDate"
        in: "query"
        description: "Mandatory if startDate is used. Ending (urlencoded) UTC date-time\
          \ (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to\
          \ pass your timezone in date-time format for accurate result ( only available\
          \ if either 'status' not passed and if passed is set to 'sent' )"
        required: false
        type: "string"
        format: "date-time"
      - name: "limit"
        in: "query"
        description: "Number limitation for the result returned"
        required: false
        type: "integer"
        default: 500
        maximum: 1000
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Beginning point in the list to retrieve from."
        required: false
        type: "integer"
        default: 0
        format: "int64"
      responses:
        "200":
          description: "SMS campaigns informations"
          examples:
            application/json:
              campaigns:
              - id: 2
                name: "PROMO CODE"
                status: "sent"
                content: "Visit our Store and get some discount !"
                scheduledAt: "2017-06-01T12:30:00Z"
                testSent: true
                sender: "MyCompany"
                createdAt: "2017-06-01T12:30:00Z"
                modifiedAt: "2017-05-01T12:30:00Z"
                sentDate: "2017-06-01T12:30:00Z"
                recipients:
                  lists:
                  - 21
                  exclusionLists:
                  - 13
                statistics:
                  delivered: 2987
                  sent: 3000
                  processing: 0
                  softBounces: 3
                  hardBounces: 1
                  unsubscriptions: 3
                  answered: 2
              - id: 10
                name: "SUMMER SALE"
                status: "draft"
                content: "Summer Sale is starting tomorrow. Get extra 10% with this\
                  \ code:SUM17"
                scheduledAt: "2017-08-04T12:30:00Z"
                testSent: false
                sender: "MyCompany"
                createdAt: "2017-06-01T12:30:00Z"
                modifiedAt: "2017-05-01T12:30:00Z"
                sentDate: "2017-06-01T12:30:00Z"
                recipients:
                  lists:
                  - 21
                  exclusionLists:
                  - 13
                statistics:
                  delivered: 2987
                  sent: 3000
                  processing: 0
                  softBounces: 3
                  hardBounces: 1
                  unsubscriptions: 3
                  answered: 2
              count: 12
          schema:
            $ref: "#/definitions/getSmsCampaigns"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
    post:
      tags:
      - "SMS Campaigns"
      summary: "Creates an SMS campaign"
      operationId: "createSmsCampaign"
      parameters:
      - in: "body"
        name: "createSmsCampaign"
        description: "Values to create an SMS Campaign"
        required: true
        schema:
          $ref: "#/definitions/createSmsCampaign"
      responses:
        "201":
          description: "SMS campaign created"
          schema:
            $ref: "#/definitions/createModel"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
  /smsCampaigns/{campaignId}:
    get:
      tags:
      - "SMS Campaigns"
      summary: "Get an SMS campaign"
      operationId: "getSmsCampaign"
      parameters:
      - name: "campaignId"
        in: "path"
        description: "id of the SMS campaign"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "SMS campaign informations"
          examples:
            application/json:
              id: 2
              name: "PROMO CODE"
              status: "sent"
              content: "Visit our Store and get some discount !"
              scheduledAt: "2017-06-01T12:30:00Z"
              testSent: true
              sender: "MyCompany"
              createdAt: "2017-06-01T12:30:00Z"
              modifiedAt: "2017-05-01T12:30:00Z"
              recipients:
                lists:
                - 21
                exclusionLists:
                - 13
              statistics:
                delivered: 2987
                sent: 3000
                processing: 0
                softBounces: 3
                hardBounces: 1
                unsubscriptions: 3
                answered: 2
          schema:
            $ref: "#/definitions/getSmsCampaign"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Campaign ID not found"
          schema:
            $ref: "#/definitions/errorModel"
    put:
      tags:
      - "SMS Campaigns"
      summary: "Updates an SMS campaign"
      operationId: "updateSmsCampaign"
      parameters:
      - name: "campaignId"
        in: "path"
        description: "id of the SMS campaign"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "updateSmsCampaign"
        description: "Values to update an SMS Campaign"
        required: true
        schema:
          $ref: "#/definitions/updateSmsCampaign"
      responses:
        "204":
          description: "SMS campaign updated"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Campaign ID not found"
          schema:
            $ref: "#/definitions/errorModel"
    delete:
      tags:
      - "SMS Campaigns"
      summary: "Delete the SMS campaign"
      operationId: "deleteSmsCampaign"
      parameters:
      - name: "campaignId"
        in: "path"
        description: "id of the SMS campaign"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "204":
          description: "SMS campaign has been deleted"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Campaign ID not found"
          schema:
            $ref: "#/definitions/errorModel"
  /smsCampaigns/{campaignId}/sendNow:
    post:
      tags:
      - "SMS Campaigns"
      summary: "Send your SMS campaign immediately"
      operationId: "sendSmsCampaignNow"
      parameters:
      - name: "campaignId"
        in: "path"
        description: "id of the campaign"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "204":
          description: "SMS campaign has been scheduled"
        "400":
          description: "SMS Campaign could not be sent"
          schema:
            $ref: "#/definitions/errorModel"
        "402":
          description: "You don't have enough credit to send your campaign. Please\
            \ update your plan"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Campaign ID not found"
          schema:
            $ref: "#/definitions/errorModel"
  /smsCampaigns/{campaignId}/status:
    put:
      tags:
      - "SMS Campaigns"
      summary: "Update the campaign status"
      operationId: "updateSmsCampaignStatus"
      parameters:
      - name: "campaignId"
        in: "path"
        description: "id of the campaign"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "status"
        description: "Status of the campaign."
        required: true
        schema:
          $ref: "#/definitions/updateCampaignStatus"
      responses:
        "204":
          description: "The campaign status has been updated successfully"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Campaign ID not found"
          schema:
            $ref: "#/definitions/errorModel"
  /smsCampaigns/{campaignId}/sendTest:
    post:
      tags:
      - "SMS Campaigns"
      summary: "Send an SMS"
      operationId: "sendTestSms"
      parameters:
      - name: "campaignId"
        in: "path"
        description: "Id of the SMS campaign"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "phoneNumber"
        description: "Mobile number of the recipient with the country code. This number\
          \ must belong to one of your contacts in SendinBlue account and must not\
          \ be blacklisted"
        required: true
        schema:
          $ref: "#/definitions/sendTestSms"
      responses:
        "204":
          description: "Test SMS has been sent successfully to the recipient"
        "400":
          description: "Test SMS could not be sent to the following email addresses"
          schema:
            $ref: "#/definitions/postSendSmsTestFailed"
        "404":
          description: "Campaign ID not found"
          schema:
            $ref: "#/definitions/errorModel"
  /smsCampaigns/{campaignId}/exportRecipients:
    post:
      tags:
      - "SMS Campaigns"
      summary: "Exports the recipients of the specified campaign."
      description: "It returns the background process ID which on completion calls\
        \ the notify URL that you have set in the input."
      operationId: "requestSmsRecipientExport"
      parameters:
      - name: "campaignId"
        in: "path"
        description: "id of the campaign"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "recipientExport"
        description: "Values to send for a recipient export request"
        required: false
        schema:
          $ref: "#/definitions/requestSmsRecipientExport"
      responses:
        "202":
          description: "Recipient export request has been accepted"
          schema:
            $ref: "#/definitions/createdProcessId"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Campaign ID not found"
          schema:
            $ref: "#/definitions/errorModel"
  /smsCampaigns/{campaignId}/sendReport:
    post:
      tags:
      - "SMS Campaigns"
      summary: "Send report of SMS campaigns"
      description: "Send report of Sent and Archived campaign, to the specified email\
        \ addresses, with respective data and a pdf attachment in detail."
      operationId: "sendSmsReport"
      parameters:
      - name: "campaignId"
        in: "path"
        description: "id of the campaign"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "sendReport"
        description: "Values for send a report"
        required: true
        schema:
          $ref: "#/definitions/sendReport"
      responses:
        "204":
          description: "Report has been successfully sent to the defined recipients"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "404":
          description: "Campaign ID not found"
          schema:
            $ref: "#/definitions/errorModel"
  /transactionalSMS/sms:
    post:
      tags:
      - "Transactional SMS"
      summary: "Send the SMS campaign to the specified mobile number"
      operationId: "sendTransacSms"
      parameters:
      - in: "body"
        name: "sendTransacSms"
        description: "Values to send a transactional SMS"
        required: true
        schema:
          $ref: "#/definitions/sendTransacSms"
      responses:
        "201":
          description: "SMS has been sent successfully to the recipient"
          schema:
            $ref: "#/definitions/sendSms"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
        "402":
          description: "You don't have enough credit to send your SMS. Please update\
            \ your plan"
          schema:
            $ref: "#/definitions/errorModel"
  /transactionalSMS/statistics/events:
    get:
      tags:
      - "Transactional SMS"
      summary: "Get all the SMS activity (unaggregated events)"
      operationId: "getSmsEvents"
      parameters:
      - name: "limit"
        in: "query"
        description: "Number of documents per page"
        required: false
        type: "integer"
        default: 50
        maximum: 100
        format: "int64"
      - name: "startDate"
        in: "query"
        description: "Mandatory if endDate is used. Starting date (YYYY-MM-DD) of\
          \ the report"
        required: false
        type: "string"
      - name: "endDate"
        in: "query"
        description: "Mandatory if startDate is used. Ending date (YYYY-MM-DD) of\
          \ the report"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        description: "Index of the first document of the page"
        required: false
        type: "integer"
        default: 0
        format: "int64"
      - name: "days"
        in: "query"
        description: "Number of days in the past including today (positive integer).\
          \ Not compatible with 'startDate' and 'endDate'"
        required: false
        type: "integer"
      - name: "phoneNumber"
        in: "query"
        description: "Filter the report for a specific phone number"
        required: false
        type: "string"
      - name: "event"
        in: "query"
        description: "Filter the report for specific events"
        required: false
        type: "string"
        enum:
        - "bounces"
        - "hardBounces"
        - "softBounces"
        - "delivered"
        - "sent"
        - "accepted"
        - "unsubscription"
        - "replies"
        - "blocked"
      - name: "tags"
        in: "query"
        description: "Filter the report for specific tags passed as a serialized urlencoded\
          \ array"
        required: false
        type: "string"
      responses:
        "200":
          description: "Sms events report informations"
          examples:
            application/json:
              events:
              - phoneNumber: "00911059469013"
                date: "2015-05-20T12:30:00Z"
                messageId: "1473139351170140"
                event: "sent"
                reason: "Recipient is currently unreachable"
                tag: "cabWaiting"
              - phoneNumber: "00911059469013"
                date: "2015-05-20T16:30:00Z"
                messageId: "1473139351170140"
                event: "delivered"
                reason: "Recipient is currently unreachable"
                tag: "cabRequest"
          schema:
            $ref: "#/definitions/getSmsEventReport"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
  /transactionalSMS/statistics/aggregatedReport:
    get:
      tags:
      - "Transactional SMS"
      summary: "Get your SMS activity aggregated over a period of time"
      operationId: "getTransacAggregatedSmsReport"
      parameters:
      - name: "startDate"
        in: "query"
        description: "Mandatory if endDate is used. Starting date (YYYY-MM-DD) of\
          \ the report"
        required: false
        type: "string"
      - name: "endDate"
        in: "query"
        description: "Mandatory if startDate is used. Ending date (YYYY-MM-DD) of\
          \ the report"
        required: false
        type: "string"
      - name: "days"
        in: "query"
        description: "Number of days in the past including today (positive integer).\
          \ Not compatible with startDate and endDate"
        required: false
        type: "integer"
      - name: "tag"
        in: "query"
        description: "Filter on a tag"
        required: false
        type: "string"
      responses:
        "200":
          description: "Aggregated SMS report informations"
          examples:
            application/json:
              range: "2015-05-22|2017-11-29"
              requests: 54
              delivered: 16
              hardBounces: 5
              softBounces: 26
              blocked: 4
              unsubscribed: 10
              replied: 8
              accepted: 6
              rejected: 14
          schema:
            $ref: "#/definitions/getTransacAggregatedSmsReport"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
  /transactionalSMS/statistics/reports:
    get:
      tags:
      - "Transactional SMS"
      summary: "Get your SMS activity aggregated per day"
      operationId: "getTransacSmsReport"
      parameters:
      - name: "startDate"
        in: "query"
        description: "Mandatory if endDate is used. Starting date (YYYY-MM-DD) of\
          \ the report"
        required: false
        type: "string"
      - name: "endDate"
        in: "query"
        description: "Mandatory if startDate is used. Ending date (YYYY-MM-DD) of\
          \ the report"
        required: false
        type: "string"
      - name: "days"
        in: "query"
        description: "Number of days in the past including today (positive integer).\
          \ Not compatible with 'startDate' and 'endDate'"
        required: false
        type: "integer"
      - name: "tag"
        in: "query"
        description: "Filter on a tag"
        required: false
        type: "string"
      responses:
        "200":
          description: "Aggregated SMS report informations"
          examples:
            application/json:
              reports:
              - date: "2017-04-30"
                requests: 10756
                delivered: 10103
                hardBounces: 21
                softBounces: 137
                blocked: 1026
                unsubscribed: 720
                replied: 5091
                accepted: 2318
                rejected: 0
              - date: "2017-05-01"
                requests: 18812
                delivered: 17499
                hardBounces: 34
                softBounces: 254
                blocked: 1514
                unsubscribed: 1090
                replied: 10089
                accepted: 4393
                rejected: 0
              - date: "2017-05-02"
                requests: 14321
                delivered: 13427
                hardBounces: 16
                softBounces: 176
                blocked: 1646
                unsubscribed: 1170
                replied: 11563
                accepted: 4689
                rejected: 0
          schema:
            $ref: "#/definitions/getTransacSmsReport"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/errorModel"
securityDefinitions:
  api-key:
    description: "The API key should be passed in the request headers as `api-key`\
      \ for authentication."
    type: "apiKey"
    name: "api-key"
    in: "header"
definitions:
  getAccount:
    allOf:
    - $ref: "#/definitions/getExtendedClient"
    - type: "object"
      required:
      - "plan"
      - "relay"
      properties:
        plan:
          type: "array"
          description: "Information about your plans and credits"
          items:
            $ref: "#/definitions/getAccount_plan"
          x-dataType: "[GetAccountPlan]"
        relay:
          $ref: "#/definitions/getAccount_relay"
          x-dataType: "GetAccountRelay"
        marketingAutomation:
          $ref: "#/definitions/getAccount_marketingAutomation"
          x-dataType: "GetAccountMarketingAutomation"
  getChildrenList:
    type: "object"
    required:
    - "count"
    properties:
      children:
        type: "array"
        description: "Your children's account information"
        items:
          type: "object"
          allOf:
          - $ref: "#/definitions/getChildInfo"
          - type: "object"
            properties:
              id:
                type: "integer"
                format: "int64"
                example: 187588
                description: "ID of the child"
        x-dataType: "[A.Value]"
      count:
        type: "integer"
        format: "int64"
        example: 24
        description: "Number of child accounts"
        x-dataType: "Integer"
  getChildInfo:
    allOf:
    - $ref: "#/definitions/getClient"
    - type: "object"
      required:
      - "password"
      properties:
        credits:
          $ref: "#/definitions/getChildInfo_credits"
          x-dataType: "GetChildInfoCredits"
        statistics:
          $ref: "#/definitions/getChildInfo_statistics"
          x-dataType: "GetChildInfoStatistics"
        password:
          type: "string"
          format: "password"
          example: "abC01De2fGHI3jkL"
          description: "The encrypted password of child account"
          x-dataType: "Text"
        ips:
          type: "array"
          description: "IP(s) associated to a child account user"
          items:
            type: "string"
            example: ""
            description: "IP(s) associated to the user"
          x-dataType: "[Text]"
        apiKeys:
          $ref: "#/definitions/getChildInfo_apiKeys"
          x-dataType: "GetChildInfoApiKeys"
  getChildAccountCreationStatus:
    type: "object"
    required:
    - "childAccountCreated"
    properties:
      childAccountCreated:
        type: "boolean"
        example: true
        description: "Status of child account creation whether it is successfully\
          \ created (exists) or not."
        x-dataType: "Bool"
  getChildDomains:
    type: "array"
    items:
      type: "object"
      allOf:
      - $ref: "#/definitions/getChildDomain"
  getSsoToken:
    type: "object"
    required:
    - "token"
    properties:
      token:
        type: "string"
        example: "ede520dxxxxxxxxxxxx76d631fba2"
        description: "Session token. It will remain valid for a short period of time\
          \ only."
        x-dataType: "Text"
  getChildDomain:
    type: "object"
    required:
    - "active"
    - "domain"
    properties:
      domain:
        type: "string"
        example: "mycustomdomain.com"
        description: "Sender domain"
        x-dataType: "Text"
      active:
        type: "boolean"
        example: true
        description: "indicates whether a domain is verified or not"
        x-dataType: "Bool"
  getClient:
    type: "object"
    required:
    - "companyName"
    - "email"
    - "firstName"
    - "lastName"
    properties:
      email:
        type: "string"
        format: "email"
        example: "john.smith@example.com"
        description: "Login Email"
        x-dataType: "Text"
      firstName:
        type: "string"
        example: "John"
        description: "First Name"
        x-dataType: "Text"
      lastName:
        type: "string"
        example: "Smith"
        description: "Last Name"
        x-dataType: "Text"
      companyName:
        type: "string"
        example: "MyCompany"
        description: "Name of the company"
        x-dataType: "Text"
  getExtendedClient:
    allOf:
    - $ref: "#/definitions/getClient"
    - type: "object"
      required:
      - "address"
      properties:
        address:
          $ref: "#/definitions/getExtendedClient_address"
          x-dataType: "GetExtendedClientAddress"
  getSendersList:
    type: "object"
    properties:
      senders:
        type: "array"
        description: "List of the senders available in your account"
        items:
          $ref: "#/definitions/getSendersList_senders"
        x-dataType: "[GetSendersListSenders]"
  createChild:
    type: "object"
    required:
    - "companyName"
    - "email"
    - "firstName"
    - "lastName"
    - "password"
    properties:
      email:
        type: "string"
        format: "email"
        example: "josh.cruise@example.com"
        description: "Email address to create the child account"
        x-dataType: "Text"
      firstName:
        type: "string"
        example: "Josh"
        description: "First name to use to create the child account"
        x-dataType: "Text"
      lastName:
        type: "string"
        example: "Cruise"
        description: "Last name to use to create the child account"
        x-dataType: "Text"
      companyName:
        type: "string"
        example: "Your Company"
        description: "Company name to use to create the child account"
        x-dataType: "Text"
      password:
        type: "string"
        format: "password"
        example: "Pa55w0rd65"
        description: "Password for the child account to login"
        x-dataType: "Text"
    x-mimeTypes:
    - "MimeJSON"
  createSender:
    type: "object"
    required:
    - "email"
    - "name"
    properties:
      name:
        type: "string"
        example: "Newsletter"
        description: "From Name to use for the sender"
        x-dataType: "Text"
      email:
        type: "string"
        format: "email"
        example: "newsletter@mycompany.com"
        description: "From Email to use for the sender"
        x-dataType: "Text"
      ips:
        type: "array"
        description: "Mandatory in case of dedicated IP, IPs to associate to the sender"
        items:
          $ref: "#/definitions/createSender_ips"
        x-dataType: "[CreateSenderIps]"
    x-mimeTypes:
    - "MimeJSON"
  updateSender:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Newsletter"
        description: "From Name to update the sender"
        x-dataType: "Text"
      email:
        type: "string"
        format: "email"
        example: "newsletter@mycompany.com"
        description: "From Email to update the sender"
        x-dataType: "Text"
      ips:
        type: "array"
        description: "Only in case of dedicated IP, IPs to associate to the sender.\
          \ If passed, will replace all the existing IPs."
        items:
          $ref: "#/definitions/createSender_ips"
        x-dataType: "[CreateSenderIps]"
    x-mimeTypes:
    - "MimeJSON"
  updateChild:
    type: "object"
    properties:
      email:
        type: "string"
        format: "email"
        example: "josh.cruise@example.com"
        description: "New Email address to update the child account"
        x-dataType: "Text"
      firstName:
        type: "string"
        example: "Josh"
        description: "New First name to use to update the child account"
        x-dataType: "Text"
      lastName:
        type: "string"
        example: "Cruise"
        description: "New Last name to use to update the child account"
        x-dataType: "Text"
      companyName:
        type: "string"
        example: "Your Company"
        description: "New Company name to use to update the child account"
        x-dataType: "Text"
      password:
        type: "string"
        format: "password"
        example: "Pa55w0rd65"
        description: "New password for the child account to login"
        x-dataType: "Text"
    x-mimeTypes:
    - "MimeJSON"
  updateChildAccountStatus:
    type: "object"
    properties:
      transactionalEmail:
        type: "boolean"
        example: false
        description: "Status of Transactional Email Platform activation for your account\
          \ (true=enabled, false=disabled)"
        x-dataType: "Bool"
      transactionalSms:
        type: "boolean"
        example: false
        description: "Status of Transactional SMS Platform activation for your account\
          \ (true=enabled, false=disabled)"
        x-dataType: "Bool"
      marketingAutomation:
        type: "boolean"
        example: true
        description: "Status of Marketing Automation Platform activation for your\
          \ account (true=enabled, false=disabled)"
        x-dataType: "Bool"
    x-mimeTypes:
    - "MimeJSON"
  errorModel:
    type: "object"
    required:
    - "code"
    - "message"
    properties:
      code:
        type: "string"
        example: "method_not_allowed"
        description: "Error code displayed in case of a failure"
        enum:
        - "invalid_parameter"
        - "missing_parameter"
        - "out_of_range"
        - "campaign_processing"
        - "campaign_sent"
        - "document_not_found"
        - "reseller_permission_denied"
        - "not_enough_credits"
        - "permission_denied"
        - "duplicate_parameter"
        - "duplicate_request"
        - "method_not_allowed"
        - "unauthorized"
        - "account_under_validation"
        - "not_acceptable"
        x-dataType: "E'Code"
      message:
        type: "string"
        example: "POST Method is not allowed on this path"
        description: "Readable message associated to the failure"
        x-dataType: "Text"
  remainingCreditModel:
    type: "object"
    required:
    - "child"
    - "reseller"
    properties:
      child:
        $ref: "#/definitions/remainingCreditModel_child"
        x-dataType: "RemainingCreditModelChild"
      reseller:
        $ref: "#/definitions/remainingCreditModel_reseller"
        x-dataType: "RemainingCreditModelReseller"
  addCredits:
    type: "object"
    properties:
      sms:
        type: "integer"
        format: "int64"
        example: 450
        description: "Required if email credits are empty. SMS credits to be added\
          \ to the child account"
        x-dataType: "Integer"
      email:
        type: "integer"
        format: "int64"
        example: 1200
        description: "Required if sms credits are empty. Email credits to be added\
          \ to the child account"
        x-dataType: "Integer"
    x-mimeTypes:
    - "MimeJSON"
  removeCredits:
    type: "object"
    properties:
      sms:
        type: "integer"
        format: "int64"
        example: 300
        description: "Required if email credits are empty. SMS credits to be removed\
          \ from the child account"
        x-dataType: "Integer"
      email:
        type: "integer"
        format: "int64"
        example: 500
        description: "Required if sms credits are empty. Email credits to be removed\
          \ from the child account"
        x-dataType: "Integer"
    x-mimeTypes:
    - "MimeJSON"
  addChildDomain:
    type: "object"
    properties:
      domain:
        type: "string"
        example: "mychilddomain.com"
        description: "Sender domain to add for a specific child account"
        x-dataType: "Text"
    x-mimeTypes:
    - "MimeJSON"
  updateChildDomain:
    type: "object"
    properties:
      domain:
        type: "string"
        example: "myupdateddomain.com"
        description: "Value for the sender domain that will replace the existing domain"
        x-dataType: "Text"
    x-mimeTypes:
    - "MimeJSON"
  getProcesses:
    type: "object"
    required:
    - "count"
    properties:
      processes:
        type: "array"
        description: "List of processes available on your account"
        items:
          $ref: "#/definitions/getProcess"
        x-dataType: "[GetProcess]"
      count:
        type: "integer"
        format: "int64"
        example: 5
        description: "Number of processes available on your account"
        x-dataType: "Integer"
  getProcess:
    type: "object"
    required:
    - "id"
    - "name"
    - "status"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 145
        description: "Id of the process"
        x-dataType: "Integer"
      status:
        type: "string"
        example: "queued"
        description: "Status of the process"
        enum:
        - "queued"
        - "in_process"
        - "completed"
        x-dataType: "E'Status"
      name:
        type: "string"
        example: "IMPORTUSER"
        description: "Process name"
        x-dataType: "Text"
      export_url:
        type: "string"
        example: "http://requestb.in/16ua3aj1"
        description: "URL on which send export the of contacts once the process is\
          \ completed"
        x-dataType: "Text"
  getEmailCampaigns:
    type: "object"
    required:
    - "count"
    properties:
      campaigns:
        type: "array"
        items:
          type: "object"
          allOf:
          - $ref: "#/definitions/getExtendedCampaignOverview"
          - type: "object"
            properties:
              recipients:
                type: "object"
                allOf:
                - $ref: "#/definitions/getCampaignRecipients"
              statistics:
                type: "object"
                allOf:
                - $ref: "#/definitions/getExtendedCampaignStats"
              shareLink:
                type: "string"
                format: "url"
                example: "http://dhh.sendinblue.com/fhsgccc.html?t=9865448900"
                description: "Link to share the campaign on social medias"
            required:
            - "recipients"
            - "statistics"
        x-dataType: "[A.Value]"
      count:
        type: "integer"
        format: "int64"
        example: 24
        description: "Number of Email campaigns retrieved"
        x-dataType: "Integer"
  getSmsCampaigns:
    type: "object"
    required:
    - "count"
    properties:
      campaigns:
        type: "array"
        items:
          type: "object"
          allOf:
          - $ref: "#/definitions/getSmsCampaignOverview"
          - type: "object"
            properties:
              recipients:
                type: "object"
                allOf:
                - $ref: "#/definitions/getCampaignRecipients"
              statistics:
                type: "object"
                allOf:
                - $ref: "#/definitions/getSmsCampaignStats"
            required:
            - "recipients"
            - "statistics"
        x-dataType: "[A.Value]"
      count:
        type: "integer"
        format: "int64"
        example: 12
        description: "Number of SMS campaigns retrieved"
        x-dataType: "Integer"
  getSmsCampaign:
    allOf:
    - $ref: "#/definitions/getSmsCampaignOverview"
    - type: "object"
      required:
      - "recipients"
      - "statistics"
      properties:
        recipients:
          type: "object"
          allOf:
          - $ref: "#/definitions/getCampaignRecipients"
          x-dataType: "A.Value"
        statistics:
          type: "object"
          allOf:
          - $ref: "#/definitions/getSmsCampaignStats"
          x-dataType: "A.Value"
  getEmailCampaign:
    allOf:
    - $ref: "#/definitions/getExtendedCampaignOverview"
    - type: "object"
      required:
      - "recipients"
      - "statistics"
      properties:
        recipients:
          type: "object"
          allOf:
          - $ref: "#/definitions/getCampaignRecipients"
          x-dataType: "A.Value"
        statistics:
          type: "object"
          allOf:
          - $ref: "#/definitions/getExtendedCampaignStats"
          x-dataType: "A.Value"
  getCampaignOverview:
    type: "object"
    required:
    - "id"
    - "name"
    - "status"
    - "type"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 12
        description: "ID of the campaign"
        x-dataType: "Integer"
      name:
        type: "string"
        example: "EN - Sales Summer 2017"
        description: "Name of the campaign"
        x-dataType: "Text"
      subject:
        type: "string"
        example: "20% OFF for 2017 Summer Sales"
        description: "Subject of the campaign. Only available if `abTesting` flag\
          \ of the campaign is `false`"
        x-dataType: "Text"
      type:
        type: "string"
        example: "classic"
        description: "Type of campaign"
        enum:
        - "classic"
        - "trigger"
        x-dataType: "E'Type"
      status:
        type: "string"
        example: "sent"
        description: "Status of the campaign"
        enum:
        - "draft"
        - "sent"
        - "archive"
        - "queued"
        - "suspended"
        - "in_process"
        x-dataType: "E'Status3"
      scheduledAt:
        type: "string"
        format: "date-time"
        example: "2017-06-01T12:30:00Z"
        description: "UTC date-time on which campaign is scheduled (YYYY-MM-DDTHH:mm:ss.SSSZ)"
        x-dataType: "DateTime"
      abTesting:
        type: "boolean"
        example: true
        description: "Status of A/B Test for the campaign. abTesting = false means\
          \ it is disabled, & abTesting = true means it is enabled."
        x-dataType: "Bool"
      subjectA:
        type: "string"
        example: "Discover the New Collection!"
        description: "Subject A of the ab-test campaign. Only available if `abTesting`\
          \ flag of the campaign is `true`"
        x-dataType: "Text"
      subjectB:
        type: "string"
        example: "Want to discover the New Collection?"
        description: "Subject B of the ab-test campaign. Only available if `abTesting`\
          \ flag of the campaign is `true`"
        x-dataType: "Text"
      splitRule:
        type: "integer"
        example: 25
        description: "The size of your ab-test groups. Only available if `abTesting`\
          \ flag of the campaign is `true`"
        x-dataType: "Int"
      winnerCriteria:
        type: "string"
        example: "open"
        description: "Criteria for the winning version. Only available if `abTesting`\
          \ flag of the campaign is `true`"
        x-dataType: "Text"
      winnerDelay:
        type: "integer"
        example: 50
        description: "The duration of the test in hours at the end of which the winning\
          \ version will be sent. Only available if `abTesting` flag of the campaign\
          \ is `true`"
        x-dataType: "Int"
      sendAtBestTime:
        type: "boolean"
        example: true
        description: "It is true if you have chosen to send your campaign at best\
          \ time, otherwise it is false"
        x-dataType: "Bool"
  getExtendedCampaignOverview:
    allOf:
    - $ref: "#/definitions/getCampaignOverview"
    - type: "object"
      required:
      - "createdAt"
      - "footer"
      - "header"
      - "htmlContent"
      - "modifiedAt"
      - "replyTo"
      - "sender"
      - "tag"
      - "testSent"
      - "toField"
      properties:
        testSent:
          type: "boolean"
          example: true
          description: "Retrieved the status of test email sending. (true=Test email\
            \ has been sent  false=Test email has not been sent)"
          x-dataType: "Bool"
        header:
          type: "string"
          example: "[DEFAULT_HEADER]"
          description: "Header of the campaign"
          x-dataType: "Text"
        footer:
          type: "string"
          example: "[DEFAULT_FOOTER]"
          description: "Footer of the campaign"
          x-dataType: "Text"
        sender:
          $ref: "#/definitions/getExtendedCampaignOverview_sender"
          x-dataType: "GetExtendedCampaignOverviewSender"
        replyTo:
          type: "string"
          format: "email"
          example: "replyto@domain.com"
          description: "Email defined as the \"Reply to\" of the campaign"
          x-dataType: "Text"
        toField:
          type: "string"
          example: "{FNAME} {LNAME}"
          description: "Customisation of the \"to\" field of the campaign"
          x-dataType: "Text"
        htmlContent:
          type: "string"
          example: "This is my HTML Content"
          description: "HTML content of the campaign"
          x-dataType: "Text"
        shareLink:
          type: "string"
          format: "url"
          example: "http://dhh.sendinblue.com/fhsgccc.html?t=9865448900"
          description: "Link to share the campaign on social medias"
          x-dataType: "Text"
        tag:
          type: "string"
          example: "Newsletter"
          description: "Tag of the campaign"
          x-dataType: "Text"
        createdAt:
          type: "string"
          format: "date-time"
          example: "2017-05-01T12:30:00Z"
          description: "Creation UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)"
          x-dataType: "DateTime"
        modifiedAt:
          type: "string"
          format: "date-time"
          example: "2017-05-01T12:30:00Z"
          description: "UTC date-time of last modification of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)"
          x-dataType: "DateTime"
        inlineImageActivation:
          type: "boolean"
          example: true
          description: "Status of inline image. inlineImageActivation = false means\
            \ image can’t be embedded, & inlineImageActivation = true means image\
            \ can be embedded, in the email."
          x-dataType: "Bool"
        mirrorActive:
          type: "boolean"
          example: true
          description: "Status of mirror links in campaign. mirrorActive = false means\
            \ mirror links are deactivated, & mirrorActive = true means mirror links\
            \ are activated, in the campaign"
          x-dataType: "Bool"
        recurring:
          type: "boolean"
          example: true
          description: "FOR TRIGGER ONLY ! Type of trigger campaign.recurring = false\
            \ means contact can receive the same Trigger campaign only once, & recurring\
            \ = true means contact can receive the same Trigger campaign several times"
          x-dataType: "Bool"
        sentDate:
          type: "string"
          format: "date-time"
          example: "2018-12-01T16:30:00Z"
          description: "Sent UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ).\
            \ Only available if 'status' of the campaign is 'sent'"
          x-dataType: "DateTime"
  getCampaignRecipients:
    type: "object"
    required:
    - "exclusionLists"
    - "lists"
    properties:
      lists:
        type: "array"
        items:
          type: "integer"
          format: "int64"
          example: 21
          description: "List IDs included in the campaign"
        x-dataType: "[Integer]"
      exclusionLists:
        type: "array"
        items:
          type: "integer"
          format: "int64"
          example: 13
          description: "List IDs excluded of the campaign"
        x-dataType: "[Integer]"
  getExtendedCampaignStats:
    type: "object"
    required:
    - "campaignStats"
    - "globalStats"
    - "linksStats"
    - "mirrorClick"
    - "remaining"
    - "statsByBrowser"
    - "statsByDevice"
    - "statsByDomain"
    properties:
      globalStats:
        type: "object"
        description: "Overall statistics of the campaign"
        allOf:
        - $ref: "#/definitions/getCampaignStats"
        x-dataType: "A.Value"
      campaignStats:
        type: "array"
        description: "List-wise statistics of the campaign."
        items:
          type: "object"
          allOf:
          - $ref: "#/definitions/getCampaignStats"
        x-dataType: "[A.Value]"
      mirrorClick:
        type: "integer"
        format: "int64"
        example: 120
        description: "Number of clicks on mirror link"
        x-dataType: "Integer"
      remaining:
        type: "integer"
        format: "int64"
        example: 1000
        description: "Number of remaning emails to send"
        x-dataType: "Integer"
      linksStats:
        type: "object"
        example:
          example.abc.com: 7
          example.domain.com: 10
        description: "Statistics about the number of clicks for the links"
        properties: {}
        x-dataType: "A.Value"
      statsByDomain:
        $ref: "#/definitions/getStatsByDomain"
        x-dataType: "GetStatsByDomain"
      statsByDevice:
        description: "Statistics about the campaign on the basis of various devices"
        $ref: "#/definitions/getStatsByDevice"
        x-dataType: "GetStatsByDevice"
      statsByBrowser:
        description: "Statistics about the campaign on the basis of various browsers"
        $ref: "#/definitions/getStatsByBrowser"
        x-dataType: "GetStatsByBrowser"
  getStatsByDomain:
    type: "object"
    additionalProperties:
      $ref: "#/definitions/getCampaignStats"
  getStatsByDevice:
    type: "object"
    properties:
      desktop:
        type: "object"
        description: "Statistics of the campaign on the basis of desktop devices"
        additionalProperties:
          $ref: "#/definitions/getDeviceBrowserStats"
        x-dataType: "(Map.Map String GetDeviceBrowserStats)"
      mobile:
        type: "object"
        description: "Statistics of the campaign on the basis of mobile devices"
        additionalProperties:
          $ref: "#/definitions/getDeviceBrowserStats"
        x-dataType: "(Map.Map String GetDeviceBrowserStats)"
      tablet:
        type: "object"
        description: "Statistics of the campaign on the basis of tablet devices"
        additionalProperties:
          $ref: "#/definitions/getDeviceBrowserStats"
        x-dataType: "(Map.Map String GetDeviceBrowserStats)"
      unknown:
        type: "object"
        description: "Statistics of the campaign on the basis of unknown devices"
        additionalProperties:
          $ref: "#/definitions/getDeviceBrowserStats"
        x-dataType: "(Map.Map String GetDeviceBrowserStats)"
  getStatsByBrowser:
    type: "object"
    additionalProperties:
      $ref: "#/definitions/getDeviceBrowserStats"
  addContactToList:
    type: "object"
    properties:
      emails:
        type: "array"
        description: "Emails to add to a list"
        items:
          type: "string"
          format: "email"
          example: "john.smith@contact.com"
          description: "Email to add to a list"
        x-dataType: "[Text]"
    x-mimeTypes:
    - "MimeJSON"
  removeContactFromList:
    type: "object"
    properties:
      emails:
        type: "array"
        description: "Required if 'all' is false. Emails to remove from a list"
        items:
          type: "string"
          format: "email"
          example: "john.smith@contact.com"
          description: "Email to remove from a list"
        x-dataType: "[Text]"
      all:
        type: "boolean"
        example: false
        description: "Required if 'emails' is empty. Remove all existing contacts\
          \ from a list"
        x-dataType: "Bool"
    x-mimeTypes:
    - "MimeJSON"
  getSmsCampaignOverview:
    type: "object"
    required:
    - "content"
    - "createdAt"
    - "id"
    - "modifiedAt"
    - "name"
    - "scheduledAt"
    - "sender"
    - "status"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 2
        description: "ID of the SMS Campaign"
        x-dataType: "Integer"
      name:
        type: "string"
        example: "PROMO CODE"
        description: "Name of the SMS Campaign"
        x-dataType: "Text"
      status:
        type: "string"
        example: "draft"
        description: "Status of the SMS Campaign"
        enum:
        - "draft"
        - "sent"
        - "archive"
        - "queued"
        - "suspended"
        - "inProcess"
        x-dataType: "E'Status2"
      content:
        type: "string"
        example: "Visit our Store and get some discount !"
        description: "Content of the SMS Campaign"
        x-dataType: "Text"
      scheduledAt:
        type: "string"
        format: "date-time"
        example: "2017-06-01T12:30:00Z"
        description: "UTC date-time on which SMS campaign is scheduled. Should be\
          \ in YYYY-MM-DDTHH:mm:ss.SSSZ format"
        x-dataType: "DateTime"
      sender:
        type: "string"
        example: "MyCompany"
        description: "Sender of the SMS Campaign"
        x-dataType: "Text"
      createdAt:
        type: "string"
        format: "date-time"
        example: "2017-06-01T12:30:00Z"
        description: "Creation UTC date-time of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)"
        x-dataType: "DateTime"
      modifiedAt:
        type: "string"
        format: "date-time"
        example: "2017-05-01T12:30:00Z"
        description: "UTC date-time of last modification of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)"
        x-dataType: "DateTime"
  createModel:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 122
        description: "ID of the object created"
        x-dataType: "Integer"
    example:
      id: 122
  createUpdateContactModel:
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 122
        description: "ID of the contact when a new contact is created"
        x-dataType: "Integer"
    example:
      id: 122
  createSenderModel:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 5
        description: "ID of the Sender created"
        x-dataType: "Integer"
      spfError:
        type: "boolean"
        example: true
        description: "Status of SPF configuration for the sender (true = SPF not well\
          \ configured, false = SPF well configured)"
        x-dataType: "Bool"
      dkimError:
        type: "boolean"
        example: false
        description: "Status of DKIM configuration for the sender (true = DKIM not\
          \ well configured, false = DKIM well configured)"
        x-dataType: "Bool"
    example:
      dkimError: false
      id: 5
      spfError: true
  createSmtpEmail:
    type: "object"
    required:
    - "messageId"
    properties:
      messageId:
        type: "string"
        example: "<201798300811.5787683@relay.domain.com>"
        description: "Message ID of the transactional email sent"
        x-dataType: "Text"
    example:
      messageId: "<201798300811.5787683@relay.domain.com>"
  sendTemplateEmail:
    type: "object"
    required:
    - "messageId"
    properties:
      messageId:
        type: "string"
        example: "<201798300811.5787683@relay.domain.com>"
        description: "Message ID of the template Email sent"
        x-dataType: "Text"
    example:
      messageId: "<201798300811.5787683@relay.domain.com>"
  createReseller:
    type: "object"
    required:
    - "authKey"
    properties:
      authKey:
        type: "string"
        example: "xkeysib-21881axxxxxcc92e04-mIrexxxx7z"
        description: "AuthKey of Reseller child created"
        x-dataType: "Text"
    example:
      authKey: "xkeysib-21881axxxxxcc92e04-mIrexxxx7z"
  sendSms:
    type: "object"
    required:
    - "messageId"
    - "reference"
    properties:
      reference:
        type: "string"
        example: "ab1cde2fgh3i4jklmno"
        x-dataType: "Text"
      messageId:
        type: "integer"
        format: "int64"
        example: 1511882900176220
        x-dataType: "Integer"
      smsCount:
        type: "integer"
        format: "int64"
        example: 2
        description: "Count of SMS's to send multiple text messages"
        x-dataType: "Integer"
      usedCredits:
        type: "number"
        format: "float"
        example: 0.7
        description: "SMS credits used per text message"
        x-dataType: "Float"
      remainingCredits:
        type: "number"
        format: "float"
        example: 82.85
        description: "Remaining SMS credits of the user"
        x-dataType: "Float"
    example:
      reference: "ab1cde2fgh3i4jklmno"
      remainingCredits: 82.85
      smsCount: 2
      messageId: 1511882900176220
      usedCredits: 0.7
  createdProcessId:
    type: "object"
    required:
    - "processId"
    properties:
      processId:
        type: "integer"
        format: "int64"
        example: 78
        description: "Id of the process created"
        x-dataType: "Integer"
    example:
      processId: 78
  createUpdateFolder:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Wordpress Contacts"
        description: "Name of the folder"
        x-dataType: "Text"
    x-mimeTypes:
    - "MimeJSON"
  postSendFailed:
    type: "object"
    required:
    - "code"
    - "message"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "invalid_parameter"
        description: "Response code"
        x-dataType: "Integer"
      message:
        type: "string"
        example: "The email could not be sent to all recipients"
        description: "Response message"
        x-dataType: "Text"
      unexistingEmails:
        type: "array"
        items:
          type: "string"
          format: "email"
          example: "matthew.dow@example.com, elisa.carrely@example.com"
          description: "Email addresses you tried to sent an email to, but not existing\
            \ in your contacts"
        x-dataType: "[Text]"
      withoutListEmails:
        type: "array"
        items:
          type: "string"
          format: "email"
          example: "jeff.dean@example.com, jim.sue@example.com"
          description: "Email addresses you sent an email to, without a contact list"
        x-dataType: "[Text]"
      blackListedEmails:
        type: "array"
        items:
          type: "string"
          format: "email"
          example: "jeff.dean@example.com, jim.sue@example.com"
          description: "Email addresses which are blacklisted. ONLY FOR email-campign's\
            \ sendTest OR smtp-template's sendTest api's."
        x-dataType: "[Text]"
  postSendSmsTestFailed:
    type: "object"
    required:
    - "code"
    - "message"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "invalid_parameter"
        description: "Response code"
        x-dataType: "Integer"
      message:
        type: "string"
        example: "The SMS could not be sent to all recipients"
        description: "Response message"
        x-dataType: "Text"
      unexistingSms:
        type: "array"
        items:
          type: "string"
          format: "email"
          example: "337699086644@mailin.com, 41778899954@mailin.com"
          description: "Email addresses you tried to sent a SMS to, but not existing\
            \ in your contacts"
        x-dataType: "[Text]"
      withoutListSms:
        type: "array"
        items:
          type: "string"
          format: "email"
          example: "3542388988@mailin.com, 10976444477@mailin.com"
          description: "Email addresses you sent a SMS to, without a contact list"
        x-dataType: "[Text]"
  postContactInfo:
    type: "object"
    required:
    - "contacts"
    properties:
      contacts:
        $ref: "#/definitions/postContactInfo_contacts"
        x-dataType: "PostContactInfoContacts"
    example:
      contacts:
        total: 27
        success:
        - "jeff32@example.com, jim56@example.com"
        - "jeff32@example.com, jim56@example.com"
        failure:
        - "jeff32@example.com, jim56@example.com"
        - "jeff32@example.com, jim56@example.com"
  getAggregatedReport:
    type: "object"
    required:
    - "blocked"
    - "clicks"
    - "delivered"
    - "hardBounces"
    - "invalid"
    - "opens"
    - "range"
    - "requests"
    - "softBounces"
    - "spamReports"
    - "uniqueClicks"
    - "uniqueOpens"
    - "unsubscribed"
    properties:
      range:
        type: "string"
        example: "2016-09-08|2017-04-06"
        description: "Time frame of the report"
        x-dataType: "Text"
      requests:
        type: "integer"
        format: "int64"
        example: 263
        description: "Number of requests for the timeframe"
        x-dataType: "Integer"
      delivered:
        type: "integer"
        format: "int64"
        example: 249
        description: "Number of delivered emails for the timeframe"
        x-dataType: "Integer"
      hardBounces:
        type: "integer"
        format: "int64"
        example: 1
        description: "Number of hardbounces for the timeframe"
        x-dataType: "Integer"
      softBounces:
        type: "integer"
        format: "int64"
        example: 4
        description: "Number of softbounces for the timeframe"
        x-dataType: "Integer"
      clicks:
        type: "integer"
        format: "int64"
        example: 12
        description: "Number of clicks for the timeframe"
        x-dataType: "Integer"
      uniqueClicks:
        type: "integer"
        format: "int64"
        example: 8
        description: "Number of unique clicks for the timeframe"
        x-dataType: "Integer"
      opens:
        type: "integer"
        format: "int64"
        example: 47
        description: "Number of openings for the timeframe"
        x-dataType: "Integer"
      uniqueOpens:
        type: "integer"
        format: "int64"
        example: 37
        description: "Number of unique openings for the timeframe"
        x-dataType: "Integer"
      spamReports:
        type: "integer"
        format: "int64"
        example: 0
        description: "Number of complaint (spam report) for the timeframe"
        x-dataType: "Integer"
      blocked:
        type: "integer"
        format: "int64"
        example: 2
        description: "Number of blocked contact emails for the timeframe"
        x-dataType: "Integer"
      invalid:
        type: "integer"
        format: "int64"
        example: 0
        description: "Number of invalid emails for the timeframe"
        x-dataType: "Integer"
      unsubscribed:
        type: "integer"
        format: "int64"
        example: 0
        description: "Number of unsubscribed emails for the timeframe"
        x-dataType: "Integer"
  getTransacBlockedContacts:
    type: "object"
    properties:
      count:
        type: "integer"
        format: "int64"
        example: 1
        description: "Count of blocked or unsubscribed contact"
        x-dataType: "Integer"
      contacts:
        type: "array"
        items:
          $ref: "#/definitions/getTransacBlockedContacts_contacts"
        x-dataType: "[GetTransacBlockedContactsContacts]"
  getReports:
    type: "object"
    properties:
      reports:
        type: "array"
        items:
          $ref: "#/definitions/getReports_reports"
        x-dataType: "[GetReportsReports]"
  getEmailEventReport:
    type: "object"
    properties:
      events:
        type: "array"
        items:
          $ref: "#/definitions/getEmailEventReport_events"
        x-dataType: "[GetEmailEventReportEvents]"
  getSmsEventReport:
    type: "object"
    properties:
      events:
        type: "array"
        items:
          $ref: "#/definitions/getSmsEventReport_events"
        x-dataType: "[GetSmsEventReportEvents]"
  getSmtpTemplateOverview:
    type: "object"
    required:
    - "createdAt"
    - "htmlContent"
    - "id"
    - "isActive"
    - "modifiedAt"
    - "name"
    - "replyTo"
    - "sender"
    - "subject"
    - "tag"
    - "testSent"
    - "toField"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 4
        description: "ID of the template"
        x-dataType: "Integer"
      name:
        type: "string"
        example: "Order Confirmation - EN"
        description: "Name of the template"
        x-dataType: "Text"
      subject:
        type: "string"
        example: "Thanks for your order !"
        description: "Subject of the template"
        x-dataType: "Text"
      isActive:
        type: "boolean"
        example: true
        description: "Status of template (true=active, false=inactive)"
        x-dataType: "Bool"
      testSent:
        type: "boolean"
        example: true
        description: "Status of test sending for the template (true=test email has\
          \ been sent, false=test email has not been sent)"
        x-dataType: "Bool"
      sender:
        $ref: "#/definitions/getSmtpTemplateOverview_sender"
        x-dataType: "GetSmtpTemplateOverviewSender"
      replyTo:
        type: "string"
        format: "email"
        example: "replyto@domain.com"
        description: "Email defined as the \"Reply to\" for the template"
        x-dataType: "Text"
      toField:
        type: "string"
        example: "{FIRSTNAME} {LASTNAME}"
        description: "Customisation of the \"to\" field for the template"
        x-dataType: "Text"
      tag:
        type: "string"
        example: "sports"
        description: "Tag of the template"
        x-dataType: "Text"
      htmlContent:
        type: "string"
        example: "Your order n°xxxxx has been confirmed. Thanks for your purchase."
        description: "HTML content of the template"
        x-dataType: "Text"
      createdAt:
        type: "string"
        format: "date-time"
        example: "2017-05-01T12:30:00Z"
        description: "Creation UTC date-time of the template (YYYY-MM-DDTHH:mm:ss.SSSZ)"
        x-dataType: "DateTime"
      modifiedAt:
        type: "string"
        format: "date-time"
        example: "2017-05-12T12:30:00Z"
        description: "Last modification UTC date-time of the template (YYYY-MM-DDTHH:mm:ss.SSSZ)"
        x-dataType: "DateTime"
  getSmtpTemplates:
    type: "object"
    properties:
      count:
        type: "integer"
        format: "int64"
        example: 1
        description: "Count of transactional email templates"
        x-dataType: "Integer"
      templates:
        type: "array"
        items:
          $ref: "#/definitions/getSmtpTemplateOverview"
        x-dataType: "[GetSmtpTemplateOverview]"
  getWebhook:
    type: "object"
    required:
    - "createdAt"
    - "description"
    - "events"
    - "id"
    - "modifiedAt"
    - "type"
    - "url"
    properties:
      url:
        type: "string"
        format: "url"
        example: "http://requestb.in/173lyyx1"
        description: "URL of the webhook"
        x-dataType: "Text"
      id:
        type: "integer"
        format: "int64"
        example: 654
        description: "ID of the webhook"
        x-dataType: "Integer"
      description:
        type: "string"
        example: "Webhook triggered on campaign openings"
        description: "Description of the webhook"
        x-dataType: "Text"
      events:
        type: "array"
        items:
          type: "string"
          example: "opens,clicks"
          description: "Events which will trigger the webhook when they occure"
        x-dataType: "[Text]"
      type:
        type: "string"
        example: "marketing"
        description: "Type of webhook (marketing or transac)"
        enum:
        - "marketing"
        - "transac"
        x-dataType: "E'Type2"
      createdAt:
        type: "string"
        format: "date-time"
        example: "2016-12-01T12:50:00Z"
        description: "Creation UTC date-time of the webhook (YYYY-MM-DDTHH:mm:ss.SSSZ)"
        x-dataType: "DateTime"
      modifiedAt:
        type: "string"
        format: "date-time"
        example: "2017-05-12T13:15:00Z"
        description: "Last modification UTC date-time of the webhook (YYYY-MM-DDTHH:mm:ss.SSSZ)"
        x-dataType: "DateTime"
  getWebhooks:
    type: "object"
    required:
    - "webhooks"
    properties:
      webhooks:
        type: "array"
        items:
          type: "object"
          allOf:
          - $ref: "#/definitions/getWebhook"
        x-dataType: "[A.Value]"
  getContactDetails:
    type: "object"
    required:
    - "attributes"
    - "createdAt"
    - "email"
    - "emailBlacklisted"
    - "id"
    - "listIds"
    - "modifiedAt"
    - "smsBlacklisted"
    properties:
      email:
        type: "string"
        format: "email"
        example: "john.smith@example.com"
        description: "Email address of the contact for which you requested the details"
        x-dataType: "Text"
      id:
        type: "integer"
        format: "int64"
        example: 32
        description: "ID of the contact for which you requested the details"
        x-dataType: "Integer"
      emailBlacklisted:
        type: "boolean"
        example: false
        description: "Blacklist status for email campaigns (true=blacklisted, false=not\
          \ blacklisted)"
        x-dataType: "Bool"
      smsBlacklisted:
        type: "boolean"
        example: true
        description: "Blacklist status for SMS campaigns (true=blacklisted, false=not\
          \ blacklisted)"
        x-dataType: "Bool"
      createdAt:
        type: "string"
        format: "date-time"
        example: "2017-05-12T12:30:00Z"
        description: "Creation UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ)"
        x-dataType: "DateTime"
      modifiedAt:
        type: "string"
        format: "date-time"
        example: "2017-05-12T12:30:00Z"
        description: "Last modification UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ)"
        x-dataType: "DateTime"
      listIds:
        type: "array"
        items:
          type: "integer"
          format: "int64"
          example: "12,9,20"
          description: "List(s) in which the contact is included"
        x-dataType: "[Integer]"
      listUnsubscribed:
        type: "array"
        items:
          type: "integer"
          format: "int64"
          example: "1,2"
          description: "List(s) in which the contact is included (only available if\
            \ unsubscription per list is activated for the account)"
        x-dataType: "[Integer]"
      attributes:
        type: "object"
        example:
          name: "Joe"
          email: "joe@example.com"
        description: "Set of attributes of the contact"
        properties: {}
        x-dataType: "A.Value"
  getExtendedContactDetails:
    allOf:
    - $ref: "#/definitions/getContactDetails"
    - type: "object"
      required:
      - "statistics"
      properties:
        statistics:
          $ref: "#/definitions/getExtendedContactDetails_statistics"
          x-dataType: "GetExtendedContactDetailsStatistics"
  getContactCampaignStats:
    type: "object"
    properties:
      messagesSent:
        type: "array"
        items:
          $ref: "#/definitions/getExtendedContactDetails_statistics_messagesSent"
        x-dataType: "[GetExtendedContactDetailsStatisticsMessagesSent]"
      hardBounces:
        type: "array"
        items:
          $ref: "#/definitions/getExtendedContactDetails_statistics_messagesSent"
        x-dataType: "[GetExtendedContactDetailsStatisticsMessagesSent]"
      softBounces:
        type: "array"
        items:
          $ref: "#/definitions/getExtendedContactDetails_statistics_messagesSent"
        x-dataType: "[GetExtendedContactDetailsStatisticsMessagesSent]"
      complaints:
        type: "array"
        items:
          $ref: "#/definitions/getExtendedContactDetails_statistics_messagesSent"
        x-dataType: "[GetExtendedContactDetailsStatisticsMessagesSent]"
      unsubscriptions:
        $ref: "#/definitions/getContactCampaignStats_unsubscriptions"
        x-dataType: "GetContactCampaignStatsUnsubscriptions"
      opened:
        type: "array"
        items:
          $ref: "#/definitions/getContactCampaignStats_opened"
        x-dataType: "[GetContactCampaignStatsOpened]"
      clicked:
        type: "array"
        items:
          $ref: "#/definitions/getContactCampaignStats_clicked"
        x-dataType: "[GetContactCampaignStatsClicked]"
      transacAttributes:
        type: "array"
        items:
          $ref: "#/definitions/getContactCampaignStats_transacAttributes"
        x-dataType: "[GetContactCampaignStatsTransacAttributes]"
    description: "Campaign Statistics for the contact"
  getContacts:
    type: "object"
    required:
    - "contacts"
    - "count"
    properties:
      contacts:
        type: "array"
        items:
          type: "object"
          allOf:
          - $ref: "#/definitions/getContactDetails"
        x-dataType: "[A.Value]"
      count:
        type: "integer"
        format: "int64"
        example: 17655
        description: "Number of contacts"
        x-dataType: "Integer"
  getAttributes:
    type: "object"
    required:
    - "attributes"
    properties:
      attributes:
        type: "array"
        description: "Listing of available contact attributes in your account"
        items:
          $ref: "#/definitions/getAttributes_attributes"
        x-dataType: "[GetAttributesAttributes]"
  getFolders:
    type: "object"
    properties:
      folders:
        type: "array"
        items:
          type: "object"
          allOf:
          - $ref: "#/definitions/getFolder"
        x-dataType: "[A.Value]"
      count:
        type: "integer"
        format: "int64"
        example: 10
        description: "Number of folders available in your account"
        x-dataType: "Integer"
  getFolder:
    type: "object"
    required:
    - "id"
    - "name"
    - "totalBlacklisted"
    - "totalSubscribers"
    - "uniqueSubscribers"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 2
        description: "ID of the folder"
        x-dataType: "Integer"
      name:
        type: "string"
        example: "Magento Customers"
        description: "Name of the folder"
        x-dataType: "Text"
      totalBlacklisted:
        type: "integer"
        format: "int64"
        example: 32
        description: "Number of blacklisted contacts in the folder"
        x-dataType: "Integer"
      totalSubscribers:
        type: "integer"
        format: "int64"
        example: 19777
        description: "Number of contacts in the folder"
        x-dataType: "Integer"
      uniqueSubscribers:
        type: "integer"
        format: "int64"
        example: 16222
        description: "Number of unique contacts in the folder"
        x-dataType: "Integer"
  getFolderLists:
    type: "object"
    required:
    - "count"
    - "lists"
    properties:
      lists:
        type: "array"
        items:
          type: "object"
          allOf:
          - $ref: "#/definitions/getList"
        x-dataType: "[A.Value]"
      count:
        type: "integer"
        format: "int64"
        example: 6
        description: "Number of lists in the folder"
        x-dataType: "Integer"
  getLists:
    type: "object"
    required:
    - "count"
    - "lists"
    properties:
      lists:
        type: "array"
        description: "Listing of all the lists available in your account"
        items:
          type: "object"
          allOf:
          - $ref: "#/definitions/getList"
          - type: "object"
            properties:
              folderId:
                type: "integer"
                format: "int64"
                example: 2
                description: "ID of the folder"
            required:
            - "folderId"
        x-dataType: "[A.Value]"
      count:
        type: "integer"
        format: "int64"
        example: 150
        description: "Number of lists in your account"
        x-dataType: "Integer"
  getList:
    type: "object"
    required:
    - "id"
    - "name"
    - "totalBlacklisted"
    - "totalSubscribers"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 23
        description: "ID of the list"
        x-dataType: "Integer"
      name:
        type: "string"
        example: "Magento Customers - EN"
        description: "Name of the list"
        x-dataType: "Text"
      totalBlacklisted:
        type: "integer"
        format: "int64"
        example: 13
        description: "Number of blacklisted contacts in the list"
        x-dataType: "Integer"
      totalSubscribers:
        type: "integer"
        format: "int64"
        example: 1776
        description: "Number of contacts in the list"
        x-dataType: "Integer"
  getExtendedList:
    allOf:
    - $ref: "#/definitions/getList"
    - type: "object"
      required:
      - "createdAt"
      - "folderId"
      properties:
        folderId:
          type: "integer"
          format: "int64"
          example: 2
          description: "ID of the folder"
          x-dataType: "Integer"
        createdAt:
          type: "string"
          format: "date-time"
          example: "2017-03-13T17:05:09Z"
          description: "Creation UTC date-time of the list (YYYY-MM-DDTHH:mm:ss.SSSZ)"
          x-dataType: "DateTime"
        campaignStats:
          type: "array"
          items:
            $ref: "#/definitions/getExtendedList_campaignStats"
          x-dataType: "[GetExtendedListCampaignStats]"
        dynamicList:
          type: "boolean"
          example: false
          description: "Status telling if the list is dynamic or not (true=dynamic,\
            \ false=not dynamic)"
          x-dataType: "Bool"
  getSmsCampaignStats:
    type: "object"
    required:
    - "answered"
    - "delivered"
    - "hardBounces"
    - "processing"
    - "sent"
    - "softBounces"
    - "unsubscriptions"
    properties:
      delivered:
        type: "integer"
        format: "int64"
        example: 2987
        description: "Number of delivered SMS"
        x-dataType: "Integer"
      sent:
        type: "integer"
        format: "int64"
        example: 3000
        description: "Number of sent SMS"
        x-dataType: "Integer"
      processing:
        type: "integer"
        format: "int64"
        example: 0
        description: "Number of processing SMS"
        x-dataType: "Integer"
      softBounces:
        type: "integer"
        format: "int64"
        example: 3
        description: "Number of softbounced SMS"
        x-dataType: "Integer"
      hardBounces:
        type: "integer"
        format: "int64"
        example: 1
        description: "Number of hardbounced SMS"
        x-dataType: "Integer"
      unsubscriptions:
        type: "integer"
        format: "int64"
        example: 3
        description: "Number of unsubscription SMS"
        x-dataType: "Integer"
      answered:
        type: "integer"
        format: "int64"
        example: 2
        description: "Number of replies to the SMS"
        x-dataType: "Integer"
  getDeviceBrowserStats:
    type: "object"
    required:
    - "clickers"
    - "uniqueClicks"
    - "uniqueViews"
    - "viewed"
    properties:
      clickers:
        type: "integer"
        format: "int64"
        example: 2665
        description: "Number of total clicks for the campaign using the particular\
          \ browser"
        x-dataType: "Integer"
      uniqueClicks:
        type: "integer"
        format: "int64"
        example: 2300
        description: "Number of unique clicks for the campaign using the particular\
          \ browser"
        x-dataType: "Integer"
      viewed:
        type: "integer"
        format: "int64"
        example: 8999
        description: "Number of openings for the campaign using the particular browser"
        x-dataType: "Integer"
      uniqueViews:
        type: "integer"
        format: "int64"
        example: 7779
        description: "Number of unique openings for the campaign using the particular\
          \ browser"
        x-dataType: "Integer"
  getCampaignStats:
    type: "object"
    required:
    - "clickers"
    - "complaints"
    - "delivered"
    - "hardBounces"
    - "sent"
    - "softBounces"
    - "uniqueClicks"
    - "uniqueViews"
    - "unsubscriptions"
    - "viewed"
    properties:
      listId:
        type: "integer"
        format: "int64"
        example: 2
        description: "List Id of email campaign (only in case of get email campaign(s)(not\
          \ for global stats))"
        x-dataType: "Integer"
      uniqueClicks:
        type: "integer"
        format: "int64"
        example: 2300
        description: "Number of unique clicks for the campaign"
        x-dataType: "Integer"
      clickers:
        type: "integer"
        format: "int64"
        example: 2665
        description: "Number of total clicks for the campaign"
        x-dataType: "Integer"
      complaints:
        type: "integer"
        format: "int64"
        example: 1
        description: "Number of complaints (Spam reports) for the campaign"
        x-dataType: "Integer"
      delivered:
        type: "integer"
        format: "int64"
        example: 19765
        description: "Number of delivered emails for the campaign"
        x-dataType: "Integer"
      sent:
        type: "integer"
        format: "int64"
        example: 19887
        description: "Number of sent emails for the campaign"
        x-dataType: "Integer"
      softBounces:
        type: "integer"
        format: "int64"
        example: 100
        description: "Number of softbounce for the campaign"
        x-dataType: "Integer"
      hardBounces:
        type: "integer"
        format: "int64"
        example: 87
        description: "Number of harbounce for the campaign"
        x-dataType: "Integer"
      uniqueViews:
        type: "integer"
        format: "int64"
        example: 7779
        description: "Number of unique openings for the campaign"
        x-dataType: "Integer"
      unsubscriptions:
        type: "integer"
        format: "int64"
        example: 2
        description: "Number of unsubscription for the campaign"
        x-dataType: "Integer"
      viewed:
        type: "integer"
        format: "int64"
        example: 8999
        description: "Number of openings for the campaign"
        x-dataType: "Integer"
      deferred:
        type: "integer"
        format: "int64"
        example: 30
        description: "Number of deferred emails for the campaign"
        x-dataType: "Integer"
  updateSmtpTemplate:
    type: "object"
    properties:
      tag:
        type: "string"
        example: "OrderConfirmation"
        description: "Tag of the template"
        x-dataType: "Text"
      sender:
        $ref: "#/definitions/updateSmtpTemplate_sender"
        x-dataType: "UpdateSmtpTemplateSender"
      templateName:
        type: "string"
        example: "Order Confirmation - EN"
        description: "Name of the template"
        x-dataType: "Text"
      htmlContent:
        type: "string"
        example: "The order n°xxxxx has been confirmed. Thanks for your purchase"
        description: "Required if htmlUrl is empty. Body of the message (HTML must\
          \ have more than 10 characters)"
        x-dataType: "Text"
      htmlUrl:
        type: "string"
        format: "url"
        example: "https://html.domain.com"
        description: "Required if htmlContent is empty. URL to the body of the email\
          \ (HTML)"
        x-dataType: "Text"
      subject:
        type: "string"
        example: "Thanks for your purchase !"
        description: "Subject of the email"
        x-dataType: "Text"
      replyTo:
        type: "string"
        format: "email"
        example: "support@myshop.com"
        description: "Email on which campaign recipients will be able to reply to"
        x-dataType: "Text"
      toField:
        type: "string"
        example: "{FNAME} {LNAME}"
        description: "To personalize the «To» Field. If you want to include the first\
          \ name and last name of your recipient, add {FNAME} {LNAME}. These contact\
          \ attributes must already exist in your SendinBlue account. If input parameter\
          \ 'params' used please use {{contact.FNAME}} {{contact.LNAME}} for personalization"
        x-dataType: "Text"
      attachmentUrl:
        type: "string"
        format: "url"
        example: "https://attachment.domain.com"
        description: "Absolute url of the attachment (no local file). Extension allowed:\
          \ xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif,\
          \ tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar,\
          \ ez, ics, mobi, msg, pub and eps"
        x-dataType: "Text"
      isActive:
        type: "boolean"
        example: true
        description: "Status of the template. isActive = false means template is inactive,\
          \ isActive = true means template is active"
        x-dataType: "Bool"
    x-mimeTypes:
    - "MimeJSON"
  updateCampaignStatus:
    type: "object"
    properties:
      status:
        type: "string"
        description: "Note:- replicateTemplate status will be available only for template\
          \ type campaigns."
        enum:
        - "suspended"
        - "archive"
        - "darchive"
        - "sent"
        - "queued"
        - "replicate"
        - "replicateTemplate"
        - "draft"
        x-dataType: "E'Status4"
    description: "Status of the campaign"
    example: "draft"
    x-mimeTypes:
    - "MimeJSON"
  createSmtpTemplate:
    type: "object"
    required:
    - "sender"
    - "subject"
    - "templateName"
    properties:
      tag:
        type: "string"
        example: "OrderConfirmation"
        description: "Tag of the template"
        x-dataType: "Text"
      sender:
        $ref: "#/definitions/createSmtpTemplate_sender"
        x-dataType: "CreateSmtpTemplateSender"
      templateName:
        type: "string"
        example: "Order Confirmation - EN"
        description: "Name of the template"
        x-dataType: "Text"
      htmlContent:
        type: "string"
        example: "The order n°xxxxx has been confirmed. Thanks for your purchase"
        description: "Body of the message (HTML version). The field must have more\
          \ than 10 characters. REQUIRED if htmlUrl is empty"
        x-dataType: "Text"
      htmlUrl:
        type: "string"
        format: "url"
        example: "https://html.domain.com"
        description: "Url which contents the body of the email message. REQUIRED if\
          \ htmlContent is empty"
        x-dataType: "Text"
      subject:
        type: "string"
        example: "Thanks for your purchase !"
        description: "Subject of the template"
        x-dataType: "Text"
      replyTo:
        type: "string"
        format: "email"
        example: "support@myshop.com"
        description: "Email on which campaign recipients will be able to reply to"
        x-dataType: "Text"
      toField:
        type: "string"
        example: "{FNAME} {LNAME}"
        description: "To personalize the «To» Field. If you want to include the first\
          \ name and last name of your recipient, add {FNAME} {LNAME}. These contact\
          \ attributes must already exist in your SendinBlue account. If input parameter\
          \ 'params' used please use {{contact.FNAME}} {{contact.LNAME}} for personalization"
        x-dataType: "Text"
      attachmentUrl:
        type: "string"
        format: "url"
        example: "https://attachment.domain.com"
        description: "Absolute url of the attachment (no local file). Extension allowed:\
          \ xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif,\
          \ tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar,\
          \ ez, ics, mobi, msg, pub and eps"
        x-dataType: "Text"
      isActive:
        type: "boolean"
        example: true
        description: "Status of template. isActive = true means template is active\
          \ and isActive = false means template is inactive"
        x-dataType: "Bool"
    x-mimeTypes:
    - "MimeJSON"
  createEmailCampaign:
    type: "object"
    required:
    - "name"
    - "sender"
    properties:
      tag:
        type: "string"
        example: "Newsletter"
        description: "Tag of the campaign"
        x-dataType: "Text"
      sender:
        $ref: "#/definitions/createEmailCampaign_sender"
        x-dataType: "CreateEmailCampaignSender"
      name:
        type: "string"
        example: "Newsletter - May 2017"
        description: "Name of the campaign"
        x-dataType: "Text"
      htmlContent:
        type: "string"
        example: "Spring is here, discover my new collection"
        description: "Mandatory if htmlUrl and templateId are empty. Body of the message\
          \ (HTML)"
        x-dataType: "Text"
      htmlUrl:
        type: "string"
        format: "url"
        example: "https://html.domain.com"
        description: "Mandatory if htmlContent and templateId are empty. Url to the\
          \ message (HTML)"
        x-dataType: "Text"
      templateId:
        type: "integer"
        format: "int64"
        description: "Mandatory if htmlContent and htmlUrl are empty. Id of the transactional\
          \ email template with status 'active'. Used to copy only its content fetched\
          \ from htmlContent/htmlUrl to an email campaign for RSS feature."
        x-dataType: "Integer"
      scheduledAt:
        type: "string"
        format: "date-time"
        example: "2017-06-01T12:30:00+02:00"
        description: "Sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to\
          \ pass your timezone in date-time format for accurate result. If sendAtBestTime\
          \ is set to true, your campaign will be sent according to the date passed\
          \ (ignoring the time part)."
        x-dataType: "DateTime"
      subject:
        type: "string"
        example: "Discover the New Collection !"
        description: "Subject of the campaign. Mandatory if abTesting is false. Ignored\
          \ if abTesting is true."
        x-dataType: "Text"
      replyTo:
        type: "string"
        format: "email"
        example: "support@myshop.com"
        description: "Email on which the campaign recipients will be able to reply\
          \ to"
        x-dataType: "Text"
      toField:
        type: "string"
        example: "{FNAME} {LNAME}"
        description: "To personalize the «To» Field. If you want to include the first\
          \ name and last name of your recipient, add {FNAME} {LNAME}. These contact\
          \ attributes must already exist in your SendinBlue account. If input parameter\
          \ 'params' used please use {{contact.FNAME}} {{contact.LNAME}} for personalization"
        x-dataType: "Text"
      recipients:
        $ref: "#/definitions/createEmailCampaign_recipients"
        x-dataType: "CreateEmailCampaignRecipients"
      attachmentUrl:
        type: "string"
        format: "url"
        example: "https://attachment.domain.com"
        description: "Absolute url of the attachment (no local file). Extension allowed:\
          \ xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif,\
          \ tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar,\
          \ ez, ics, mobi, msg, pub and eps"
        x-dataType: "Text"
      inlineImageActivation:
        type: "boolean"
        example: true
        description: "Use true to embedded the images in your email. Final size of\
          \ the email should be less than 4MB. Campaigns with embedded images can\
          \ not be sent to more than 5000 contacts"
        default: false
        x-dataType: "Bool"
      mirrorActive:
        type: "boolean"
        example: true
        description: "Use true to enable the mirror link"
        x-dataType: "Bool"
      footer:
        type: "string"
        example: "[DEFAULT_FOOTER]"
        description: "Footer of the email campaign"
        x-dataType: "Text"
      header:
        type: "string"
        example: "[DEFAULT_HEADER]"
        description: "Header of the email campaign"
        x-dataType: "Text"
      utmCampaign:
        type: "string"
        example: "NL_05_2017"
        description: "Customize the utm_campaign value. If this field is empty, the\
          \ campaign name will be used. Only alphanumeric characters and spaces are\
          \ allowed"
        x-dataType: "Text"
      params:
        type: "object"
        example:
          FNAME: "Joe"
          LNAME: "Doe"
        description: "Pass the set of attributes to customize the type classic campaign.\
          \ For example, {'FNAME':'Joe', 'LNAME':'Doe'}. Only available if 'type'\
          \ is 'classic'. It's considered only if campaign is in New Template Language\
          \ format. The New Template Language is dependent on the values of 'subject',\
          \ 'htmlContent/htmlUrl', 'sender.name' & 'toField'"
        properties: {}
        x-dataType: "A.Value"
      sendAtBestTime:
        type: "boolean"
        example: true
        description: "Set this to true if you want to send your campaign at best time."
        default: false
        x-dataType: "Bool"
      abTesting:
        type: "boolean"
        example: true
        description: "Status of A/B Test. abTesting = false means it is disabled,\
          \ & abTesting = true means it is enabled. 'subjectA', 'subjectB', 'splitRule',\
          \ 'winnerCriteria' & 'winnerDelay' will be considered when abTesting is\
          \ set to true. 'subjectA' & 'subjectB' are mandatory together & 'subject'\
          \ if passed is ignored. Can be set to true only if 'sendAtBestTime' is 'false'.\
          \ You will be able to set up two subject lines for your campaign and send\
          \ them to a random sample of your total recipients. Half of the test group\
          \ will receive version A, and the other half will receive version B"
        default: false
        x-dataType: "Bool"
      subjectA:
        type: "string"
        example: "Discover the New Collection!"
        description: "Subject A of the campaign. Mandatory if abTesting = true. subjectA\
          \ & subjectB should have unique value"
        x-dataType: "Text"
      subjectB:
        type: "string"
        example: "Want to discover the New Collection?"
        description: "Subject B of the campaign. Mandatory if abTesting = true. subjectA\
          \ & subjectB should have unique value"
        x-dataType: "Text"
      splitRule:
        type: "integer"
        format: "int64"
        example: 50
        description: "Add the size of your test groups. Mandatory if abTesting = true\
          \ & 'recipients' is passed. We'll send version A and B to a random sample\
          \ of recipients, and then the winning version to everyone else"
        minimum: 1
        maximum: 50
        x-dataType: "Integer"
      winnerCriteria:
        type: "string"
        example: "open"
        description: "Choose the metrics that will determinate the winning version.\
          \ Mandatory if 'splitRule' >= 1 and < 50. If splitRule = 50, 'winnerCriteria'\
          \ is ignored if passed"
        enum:
        - "open"
        - "click"
        x-dataType: "E'WinnerCriteria"
      winnerDelay:
        type: "integer"
        format: "int64"
        example: 50
        description: "Choose the duration of the test in hours. Maximum is 7 days,\
          \ pass 24*7 = 168 hours. The winning version will be sent at the end of\
          \ the test. Mandatory if 'splitRule' >= 1 and < 50. If splitRule = 50, 'winnerDelay'\
          \ is ignored if passed"
        minimum: 1
        maximum: 168
        x-dataType: "Integer"
      ipWarmupEnable:
        type: "boolean"
        example: true
        description: "Available for dedicated ip clients. Set this to true if you\
          \ wish to warm up your ip."
        default: false
        x-dataType: "Bool"
      initialQuota:
        type: "integer"
        format: "int64"
        example: 3000
        description: "Mandatory if ipWarmupEnable is set to true. Set an initial quota\
          \ greater than 1 for warming up your ip. We recommend you set a value of\
          \ 3000."
        x-dataType: "Integer"
      increaseRate:
        type: "integer"
        format: "int64"
        example: 70
        description: "Mandatory if ipWarmupEnable is set to true. Set a percentage\
          \ increase rate for warming up your ip. We recommend you set the increase\
          \ rate to 30% per day. If you want to send the same number of emails every\
          \ day, set the daily increase value to 0%."
        minimum: 0
        maximum: 100
        x-dataType: "Integer"
    x-mimeTypes:
    - "MimeJSON"
  updateEmailCampaign:
    type: "object"
    properties:
      tag:
        type: "string"
        example: "Newsletter"
        description: "Tag of the campaign"
        x-dataType: "Text"
      sender:
        $ref: "#/definitions/updateEmailCampaign_sender"
        x-dataType: "UpdateEmailCampaignSender"
      name:
        type: "string"
        example: "Newsletter - May 2017"
        description: "Name of the campaign"
        x-dataType: "Text"
      htmlContent:
        type: "string"
        example: "Spring is here, discover my new collection"
        description: "Body of the message (HTML version). REQUIRED if htmlUrl is empty"
        x-dataType: "Text"
      htmlUrl:
        type: "string"
        format: "url"
        example: "https://html.domain.com"
        description: "Url which contents the body of the email message. REQUIRED if\
          \ htmlContent is empty"
        x-dataType: "Text"
      scheduledAt:
        type: "string"
        format: "date-time"
        example: "2017-06-01T12:30:00+02:00"
        description: "UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ).\
          \ Prefer to pass your timezone in date-time format for accurate result.\
          \ If sendAtBestTime is set to true, your campaign will be sent according\
          \ to the date passed (ignoring the time part)."
        x-dataType: "DateTime"
      subject:
        type: "string"
        example: "Discover the New Collection !"
        description: "Subject of the campaign"
        x-dataType: "Text"
      replyTo:
        type: "string"
        format: "email"
        example: "support@myshop.com"
        description: "Email on which campaign recipients will be able to reply to"
        x-dataType: "Text"
      toField:
        type: "string"
        example: "{FNAME} {LNAME}"
        description: "To personalize the «To» Field. If you want to include the first\
          \ name and last name of your recipient, add {FNAME} {LNAME}. These contact\
          \ attributes must already exist in your SendinBlue account. If input parameter\
          \ 'params' used please use {{contact.FNAME}} {{contact.LNAME}} for personalization"
        x-dataType: "Text"
      recipients:
        $ref: "#/definitions/updateEmailCampaign_recipients"
        x-dataType: "UpdateEmailCampaignRecipients"
      attachmentUrl:
        type: "string"
        format: "url"
        example: "https://attachment.domain.com"
        description: "Absolute url of the attachment (no local file). Extension allowed:\
          \ xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif,\
          \ tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar,\
          \ ez, ics, mobi, msg, pub and eps"
        x-dataType: "Text"
      inlineImageActivation:
        type: "boolean"
        example: true
        description: "Status of inline image. inlineImageActivation = false means\
          \ image can’t be embedded, & inlineImageActivation = true means image can\
          \ be embedded, in the email. You cannot send a campaign of more than 4MB\
          \ with images embedded in the email. Campaigns with the images embedded\
          \ in the email must be sent to less than 5000 contacts."
        default: false
        x-dataType: "Bool"
      mirrorActive:
        type: "boolean"
        example: true
        description: "Status of mirror links in campaign. mirrorActive = false means\
          \ mirror links are deactivated, & mirrorActive = true means mirror links\
          \ are activated, in the campaign"
        x-dataType: "Bool"
      recurring:
        type: "boolean"
        example: false
        description: "FOR TRIGGER ONLY ! Type of trigger campaign.recurring = false\
          \ means contact can receive the same Trigger campaign only once, & recurring\
          \ = true means contact can receive the same Trigger campaign several times"
        default: false
        x-dataType: "Bool"
      footer:
        type: "string"
        example: "[DEFAULT_FOOTER]"
        description: "Footer of the email campaign"
        x-dataType: "Text"
      header:
        type: "string"
        example: "[DEFAULT_HEADER]"
        description: "Header of the email campaign"
        x-dataType: "Text"
      utmCampaign:
        type: "string"
        example: "NL_05_2017"
        description: "Customize the utm_campaign value. If this field is empty, the\
          \ campaign name will be used. Only alphanumeric characters and spaces are\
          \ allowed"
        x-dataType: "Text"
      params:
        type: "object"
        example:
          FNAME: "Joe"
          LNAME: "Doe"
        description: "Pass the set of attributes to customize the type 'classic' campaign.\
          \ For example, {'FNAME':'Joe', 'LNAME':'Doe'}. The 'params' field will get\
          \ updated, only if the campaign is in New Template Language, else ignored.\
          \ The New Template Language is dependent on the values of 'subject', 'htmlContent/htmlUrl',\
          \ 'sender.name' & 'toField'"
        properties: {}
        x-dataType: "A.Value"
      sendAtBestTime:
        type: "boolean"
        example: true
        description: "Set this to true if you want to send your campaign at best time.\
          \ Note:- if true, warmup ip will be disabled."
        x-dataType: "Bool"
      abTesting:
        type: "boolean"
        example: true
        description: "Status of A/B Test. abTesting = false means it is disabled,\
          \ & abTesting = true means it is enabled. 'subjectA', 'subjectB', 'splitRule',\
          \ 'winnerCriteria' & 'winnerDelay' will be considered if abTesting is set\
          \ to true. 'subject' if passed is ignored.  Can be set to true only if 'sendAtBestTime'\
          \ is 'false'. You will be able to set up two subject lines for your campaign\
          \ and send them to a random sample of your total recipients. Half of the\
          \ test group will receive version A, and the other half will receive version\
          \ B"
        default: false
        x-dataType: "Bool"
      subjectA:
        type: "string"
        example: "Discover the New Collection!"
        description: "Subject A of the campaign. Considered if abTesting = true. subjectA\
          \ & subjectB should have unique value"
        x-dataType: "Text"
      subjectB:
        type: "string"
        example: "Want to discover the New Collection?"
        description: "Subject B of the campaign. Considered if abTesting = true. subjectA\
          \ & subjectB should have unique value"
        x-dataType: "Text"
      splitRule:
        type: "integer"
        format: "int64"
        example: 50
        description: "Add the size of your test groups. Considered if abTesting =\
          \ true. We'll send version A and B to a random sample of recipients, and\
          \ then the winning version to everyone else"
        minimum: 1
        maximum: 50
        x-dataType: "Integer"
      winnerCriteria:
        type: "string"
        example: "open"
        description: "Choose the metrics that will determinate the winning version.\
          \ Considered if 'splitRule' >= 1 and < 50. If splitRule = 50, 'winnerCriteria'\
          \ is ignored if passed or alreday exist in record"
        enum:
        - "open"
        - "click"
        x-dataType: "E'WinnerCriteria"
      winnerDelay:
        type: "integer"
        format: "int64"
        example: 50
        description: "Choose the duration of the test in hours. Maximum is 7 days,\
          \ pass 24*7 = 168 hours. The winning version will be sent at the end of\
          \ the test. Considered if 'splitRule' >= 1 and < 50. If splitRule = 50,\
          \ 'winnerDelay' is ignored if passed or alreday exist in record"
        minimum: 1
        maximum: 168
        x-dataType: "Integer"
      ipWarmupEnable:
        type: "boolean"
        example: true
        description: "Available for dedicated ip clients. Set this to true if you\
          \ wish to warm up your ip."
        default: false
        x-dataType: "Bool"
      initialQuota:
        type: "integer"
        format: "int64"
        example: 3000
        description: "Set an initial quota greater than 1 for warming up your ip.\
          \ We recommend you set a value of 3000."
        x-dataType: "Integer"
      increaseRate:
        type: "integer"
        format: "int64"
        example: 70
        description: "Set a percentage increase rate for warming up your ip. We recommend\
          \ you set the increase rate to 30% per day. If you want to send the same\
          \ number of emails every day, set the daily increase value to 0%."
        minimum: 0
        maximum: 100
        x-dataType: "Integer"
    x-mimeTypes:
    - "MimeJSON"
  getSharedTemplateUrl:
    type: "object"
    required:
    - "sharedUrl"
    properties:
      sharedUrl:
        type: "string"
        format: "url"
        example: "https://my.sendinblue.com/pt2YU7R5W_guXlowgumy_VX4pFsKu._zd0Gjj96x1_GMmzc1Qps5ZIpj6nx-"
        description: "A unique URL for the email campaign or transactional template.\
          \ This URL can be shared with other Sendinblue users."
        x-dataType: "Text"
  emailExportRecipients:
    type: "object"
    required:
    - "recipientsType"
    properties:
      notifyURL:
        type: "string"
        format: "url"
        example: "http://requestb.in/173lyyx1"
        description: "Webhook called once the export process is finished"
        x-dataType: "Text"
      recipientsType:
        type: "string"
        example: "openers"
        description: "Type of recipients to export for a campaign"
        enum:
        - "all"
        - "nonClickers"
        - "nonOpeners"
        - "clickers"
        - "openers"
        - "softBounces"
        - "hardBounces"
        - "unsubscribed"
        x-dataType: "E'RecipientsType"
    x-mimeTypes:
    - "MimeJSON"
  requestSmsRecipientExport:
    type: "object"
    required:
    - "recipientsType"
    properties:
      notifyURL:
        type: "string"
        format: "url"
        example: "http://requestb.in/173lyyx1"
        description: "URL that will be called once the export process is finished"
        x-dataType: "Text"
      recipientsType:
        type: "string"
        example: "answered"
        description: "Filter the recipients based on how they interacted with the\
          \ campaign"
        enum:
        - "all"
        - "delivered"
        - "answered"
        - "softBounces"
        - "hardBounces"
        - "unsubscribed"
        x-dataType: "E'RecipientsType2"
    x-mimeTypes:
    - "MimeJSON"
  sendReport:
    type: "object"
    required:
    - "email"
    properties:
      language:
        type: "string"
        example: "en"
        description: "Language of email content for campaign report sending."
        default: "fr"
        enum:
        - "fr"
        - "es"
        - "pt"
        - "it"
        - "de"
        - "en"
        x-dataType: "E'Language"
      email:
        $ref: "#/definitions/sendReport_email"
        x-dataType: "SendReportEmail"
    x-mimeTypes:
    - "MimeJSON"
  sendSmtpEmail:
    type: "object"
    required:
    - "to"
    properties:
      sender:
        $ref: "#/definitions/sendSmtpEmail_sender"
        x-dataType: "SendSmtpEmailSender"
      to:
        type: "array"
        description: "List of email addresses and names (optional) of the recipients.\
          \ For example, [{'name':'Jimmy', 'email':'jimmy98@example.com'}, {'name':'Joe',\
          \ 'email':'joe@example.com'}]"
        items:
          $ref: "#/definitions/sendSmtpEmail_to"
        x-dataType: "[SendSmtpEmailTo]"
      bcc:
        type: "array"
        description: "List of email addresses and names (optional) of the recipients\
          \ in bcc"
        items:
          $ref: "#/definitions/sendSmtpEmail_bcc"
        x-dataType: "[SendSmtpEmailBcc]"
      cc:
        type: "array"
        description: "List of email addresses and names (optional) of the recipients\
          \ in cc"
        items:
          $ref: "#/definitions/sendSmtpEmail_cc"
        x-dataType: "[SendSmtpEmailCc]"
      htmlContent:
        type: "string"
        example: "<!DOCTYPE html> <html> <body> <h1>Confirm you email</h1> <p>Please\
          \ confirm your email address by clicking on the link below</p> </body> </html>"
        description: "HTML body of the message ( Mandatory if 'templateId' is not\
          \ passed, ignored if 'templateId' is passed )"
        x-dataType: "Text"
      textContent:
        type: "string"
        example: "Please confirm your email address by clicking on the link https://text.domain.com"
        description: "Plain Text body of the message ( Ignored if 'templateId' is\
          \ passed )"
        x-dataType: "Text"
      subject:
        type: "string"
        example: "Login Email confirmation"
        description: "Subject of the message. Mandatory if 'templateId' is not passed"
        x-dataType: "Text"
      replyTo:
        $ref: "#/definitions/sendSmtpEmail_replyTo"
        x-dataType: "SendSmtpEmailReplyTo"
      attachment:
        type: "array"
        description: "Pass the absolute URL (no local file) or the base64 content\
          \ of the attachment along with the attachment name (Mandatory if attachment\
          \ content is passed). For example, `[{\"url\":\"https://attachment.domain.com/myAttachmentFromUrl.jpg\"\
          , \"name\":\"My attachment 1\"}, {\"content\":\"base64 exmaple content\"\
          , \"name\":\"My attachment 2\"}]`. Allowed extensions for attachment file:\
          \ xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif,\
          \ tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar,\
          \ ez, ics, mobi, msg, pub, eps, odt, mp3, m4a, m4v, wma, ogg, flac, wav,\
          \ aif, aifc, aiff, mp4, mov, avi, mkv, mpeg, mpg and wmv ( If 'templateId'\
          \ is passed and is in New Template Language format then only attachment\
          \ url is accepted. If template is in Old template Language format, then\
          \ 'attachment' is ignored )"
        items:
          $ref: "#/definitions/sendSmtpEmail_attachment"
        x-dataType: "[SendSmtpEmailAttachment]"
      headers:
        type: "object"
        example:
          sender.ip: "1.2.3.4"
          X-Mailin-custom: "some_custom_header"
        description: "Pass the set of custom headers (not the standard headers) that\
          \ shall be sent along the mail headers in the original email. 'sender.ip'\
          \ header can be set (only for dedicated ip users) to mention the IP to be\
          \ used for sending transactional emails. For example, `{\"sender.ip\":\"\
          1.2.3.4\", \"X-Mailin-custom\":\"some_custom_header\"}`."
        properties: {}
        x-dataType: "A.Value"
      templateId:
        type: "integer"
        format: "int64"
        example: 2
        description: "Id of the template"
        x-dataType: "Integer"
      params:
        type: "object"
        example:
          FNAME: "Joe"
          LNAME: "Doe"
        description: "Pass the set of attributes to customize the template. For example,\
          \ {'FNAME':'Joe', 'LNAME':'Doe'}. It's considered only if template is in\
          \ New Template Language format."
        properties: {}
        x-dataType: "A.Value"
      tags:
        type: "array"
        description: "Tag your emails to find them more easily"
        items:
          type: "string"
          example: "tag1"
        x-dataType: "[Text]"
    x-mimeTypes:
    - "MimeJSON"
  deleteHardbounces:
    type: "object"
    properties:
      startDate:
        type: "string"
        example: "2016-12-31"
        description: "Starting date (YYYY-MM-DD) of the time period for deletion.\
          \ The hardbounces occurred after this date will be deleted. Must be less\
          \ than or equal to the endDate"
        x-dataType: "Text"
      endDate:
        type: "string"
        example: "2017-01-31"
        description: "Ending date (YYYY-MM-DD) of the time period for deletion. The\
          \ hardbounces until this date will be deleted. Must be greater than or equal\
          \ to the startDate"
        x-dataType: "Text"
      contactEmail:
        type: "string"
        format: "email"
        example: "alex76@example.com"
        description: "Target a specific email address"
        x-dataType: "Text"
    x-mimeTypes:
    - "MimeJSON"
  createWebhook:
    type: "object"
    required:
    - "events"
    - "url"
    properties:
      url:
        type: "string"
        format: "url"
        example: "http://requestb.in/173lyyx1"
        description: "URL of the webhook"
        x-dataType: "Text"
      description:
        type: "string"
        example: "Webhook triggered on unsubscription"
        description: "Description of the webhook"
        x-dataType: "Text"
      events:
        type: "array"
        description: "Events triggering the webhook. Possible values for Transactional\
          \ type webhook – request, delivered, hardBounce, softBounce, blocked, spam,\
          \ invalid, deferred, click, opened, uniqueOpened and unsubscribed and possible\
          \ values for Marketing type webhook – spam, opened, click, hardBounce, softBounce,\
          \ unsubscribed, listAddition & delivered"
        items:
          type: "string"
          example: "unsubscribed"
          enum:
          - "hardBounce"
          - "softBounce"
          - "blocked"
          - "spam"
          - "delivered"
          - "request"
          - "click"
          - "invalid"
          - "deferred"
          - "opened"
          - "uniqueOpened"
          - "unsubscribed"
          - "listAddition"
          - "contactUpdated"
          - "contactDeleted"
        x-dataType: "[E'Events]"
      type:
        type: "string"
        example: "marketing"
        description: "Type of the webhook"
        default: "transactional"
        enum:
        - "transactional"
        - "marketing"
        x-dataType: "E'Type3"
    x-mimeTypes:
    - "MimeJSON"
  updateWebhook:
    type: "object"
    properties:
      url:
        type: "string"
        format: "url"
        example: "http://requestb.in/173lyyx1"
        description: "URL of the webhook"
        x-dataType: "Text"
      description:
        type: "string"
        example: "Webhook triggered on contact hardbounce"
        description: "Description of the webhook"
        x-dataType: "Text"
      events:
        type: "array"
        description: "Events triggering the webhook. Possible values for Transactional\
          \ type webhook – request, delivered, hardBounce, softBounce, blocked, spam,\
          \ invalid, deferred, click, opened, uniqueOpened and unsubscribed and possible\
          \ values for Marketing type webhook – spam, opened, click, hardBounce, softBounce,\
          \ unsubscribed, listAddition and delivered"
        items:
          type: "string"
          example: "hardBounce"
          enum:
          - "hardBounce"
          - "softBounce"
          - "blocked"
          - "spam"
          - "delivered"
          - "request"
          - "click"
          - "invalid"
          - "deferred"
          - "opened"
          - "uniqueOpened"
          - "unsubscribed"
          - "listAddition"
          - "contactUpdated"
          - "contactDeleted"
        x-dataType: "[E'Events]"
    x-mimeTypes:
    - "MimeJSON"
  createContact:
    type: "object"
    properties:
      email:
        type: "string"
        format: "email"
        example: "elly@example.com"
        description: "Email address of the user. Mandatory if \"sms\" field is not\
          \ passed in \"attributes\" parameter'"
        x-dataType: "Text"
      attributes:
        type: "object"
        example:
          FNAME: "Elly"
          LNAME: "Roger"
        description: "Pass the set of attributes and their values. These attributes\
          \ must be present in your SendinBlue account. For eg. {'FNAME':'Elly', 'LNAME':'Roger'}"
        properties: {}
        x-dataType: "A.Value"
      emailBlacklisted:
        type: "boolean"
        example: false
        description: "Set this field to blacklist the contact for emails (emailBlacklisted\
          \ = true)"
        x-dataType: "Bool"
      smsBlacklisted:
        type: "boolean"
        example: false
        description: "Set this field to blacklist the contact for SMS (smsBlacklisted\
          \ = true)"
        x-dataType: "Bool"
      listIds:
        type: "array"
        description: "Ids of the lists to add the contact to"
        items:
          type: "integer"
          format: "int64"
          example: 36
          description: "Id of the list to add the contact to"
        x-dataType: "[Integer]"
      updateEnabled:
        type: "boolean"
        example: false
        description: "Facilitate to update the existing contact in the same request\
          \ (updateEnabled = true)"
        default: false
        x-dataType: "Bool"
      smtpBlacklistSender:
        type: "array"
        description: "transactional email forbidden sender for contact. Use only for\
          \ email Contact ( only available if updateEnabled = true )"
        items:
          type: "string"
          format: "email"
        x-dataType: "[Text]"
    x-mimeTypes:
    - "MimeJSON"
  updateContact:
    type: "object"
    properties:
      attributes:
        type: "object"
        example:
          EMAIL: "newemail@domain.com"
          FNAME: "Ellie"
          LNAME: "Roger"
        description: "Pass the set of attributes to be updated. These attributes must\
          \ be present in your account. To update existing email address of a contact\
          \ with the new one please pass EMAIL in attribtes. For eg. { 'EMAIL':'newemail@domain.com',\
          \ 'FNAME':'Ellie', 'LNAME':'Roger'}"
        properties: {}
        x-dataType: "A.Value"
      emailBlacklisted:
        type: "boolean"
        example: false
        description: "Set/unset this field to blacklist/allow the contact for emails\
          \ (emailBlacklisted = true)"
        x-dataType: "Bool"
      smsBlacklisted:
        type: "boolean"
        example: true
        description: "Set/unset this field to blacklist/allow the contact for SMS\
          \ (smsBlacklisted = true)"
        x-dataType: "Bool"
      listIds:
        type: "array"
        description: "Ids of the lists to add the contact to"
        items:
          type: "integer"
          format: "int64"
          example: 65
          description: "Id of the list to add the contact to"
        x-dataType: "[Integer]"
      unlinkListIds:
        type: "array"
        description: "Ids of the lists to remove the contact from"
        items:
          type: "integer"
          format: "int64"
          example: 36
          description: "Id of the list to remove the contact from"
        x-dataType: "[Integer]"
      smtpBlacklistSender:
        type: "array"
        description: "transactional email forbidden sender for contact. Use only for\
          \ email Contact"
        items:
          type: "string"
          format: "email"
        x-dataType: "[Text]"
    x-mimeTypes:
    - "MimeJSON"
  createAttribute:
    type: "object"
    properties:
      value:
        type: "string"
        example: "COUNT[BLACKLISTED,BLACKLISTED,<,NOW()]"
        description: "Value of the attribute. Use only if the attribute's category\
          \ is 'calculated' or 'global'"
        x-dataType: "Text"
      enumeration:
        type: "array"
        description: "List of values and labels that the attribute can take. Use only\
          \ if the attribute's category is \"category\". For example, [{'value':1,\
          \ 'label':'male'}, {'value':2, 'label':'female'}]"
        items:
          $ref: "#/definitions/createAttribute_enumeration"
        x-dataType: "[CreateAttributeEnumeration]"
      type:
        type: "string"
        example: "text"
        description: "Type of the attribute. Use only if the attribute's category\
          \ is 'normal', 'category' or 'transactional' ( type 'boolean' is only available\
          \ if the category is 'normal' attribute, type 'id' is only available if\
          \ the category is 'transactional' attribute & type 'category' is only available\
          \ if the category is 'category' attribute )"
        enum:
        - "text"
        - "date"
        - "float"
        - "boolean"
        - "id"
        - "category"
        x-dataType: "E'Type4"
    x-mimeTypes:
    - "MimeJSON"
  updateAttribute:
    type: "object"
    properties:
      value:
        type: "string"
        example: "COUNT[BLACKLISTED,BLACKLISTED,<,NOW()]"
        description: "Value of the attribute to update. Use only if the attribute's\
          \ category is 'calculated' or 'global'"
        x-dataType: "Text"
      enumeration:
        type: "array"
        description: "List of the values and labels that the attribute can take. Use\
          \ only if the attribute's category is \"category\". For example, [{'value':1,\
          \ 'label':'male'}, {'value':2, 'label':'female'}]"
        items:
          $ref: "#/definitions/updateAttribute_enumeration"
        x-dataType: "[UpdateAttributeEnumeration]"
    x-mimeTypes:
    - "MimeJSON"
  createList:
    type: "object"
    required:
    - "folderId"
    - "name"
    properties:
      name:
        type: "string"
        example: "Magento Customer - ES"
        description: "Name of the list"
        x-dataType: "Text"
      folderId:
        type: "integer"
        format: "int64"
        example: 2
        description: "Id of the parent folder in which this list is to be created"
        x-dataType: "Integer"
    x-mimeTypes:
    - "MimeJSON"
  updateList:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Magento Customer - ES"
        description: "Name of the list. Either of the two parameters (name, folderId)\
          \ can be updated at a time."
        x-dataType: "Text"
      folderId:
        type: "integer"
        format: "int64"
        example: 2
        description: "Id of the folder in which the list is to be moved. Either of\
          \ the two parameters (name, folderId) can be updated at a time."
        x-dataType: "Integer"
    x-mimeTypes:
    - "MimeJSON"
  requestContactExport:
    type: "object"
    required:
    - "contactFilter"
    properties:
      exportAttributes:
        type: "array"
        description: "List of all the attributes that you want to export. These attributes\
          \ must be present in your contact database. For example, ['fname', 'lname',\
          \ 'email']."
        items:
          type: "string"
          example: "NAME"
        x-dataType: "[Text]"
      contactFilter:
        type: "object"
        example:
          blacklisted: true
          listid.id: 32
        description: "Set the filter for the contacts to be exported. For example,\
          \ {'blacklisted':true} will export all the blacklisted contacts."
        properties: {}
        x-dataType: "A.Value"
      notifyUrl:
        type: "string"
        format: "url"
        example: "http://requestb.in/173lyyx1"
        description: "Webhook that will be called once the export process is finished"
        x-dataType: "Text"
    x-mimeTypes:
    - "MimeJSON"
  requestContactImport:
    type: "object"
    properties:
      fileUrl:
        type: "string"
        format: "url"
        example: "https://importfile.domain.com"
        description: "Mandatory if fileBody is not defined. URL of the file to be\
          \ imported (no local file). Possible file formats: .txt, .csv"
        x-dataType: "Text"
      fileBody:
        type: "string"
        example: "NAME;SURNAME;EMAIL\\n\"Smith\";\"John\";\"john.smith@example.com\"\
          \\n\"Roger\";\"Ellie\";\"ellie36@example.com"
        description: "Mandatory if fileUrl is not defined. CSV content to be imported.\
          \ Use semicolon to separate multiple attributes"
        x-dataType: "Text"
      listIds:
        type: "array"
        description: "Mandatory if newList is not defined. Ids of the lists in which\
          \ the contacts shall be imported. For example, [2, 4, 7]."
        items:
          type: "integer"
          format: "int64"
          example: 76
          description: "List Id in which the contacts shall be imported"
        x-dataType: "[Integer]"
      notifyUrl:
        type: "string"
        format: "url"
        example: "http://requestb.in/173lyyx1"
        description: "URL that will be called once the export process is finished"
        x-dataType: "Text"
      newList:
        $ref: "#/definitions/requestContactImport_newList"
        x-dataType: "RequestContactImportNewList"
      emailBlacklist:
        type: "boolean"
        example: false
        description: "To blacklist all the contacts for email"
        default: false
        x-dataType: "Bool"
      smsBlacklist:
        type: "boolean"
        example: false
        description: "To blacklist all the contacts for sms"
        default: false
        x-dataType: "Bool"
      updateExistingContacts:
        type: "boolean"
        example: true
        description: "To facilitate the choice to update the existing contacts"
        default: true
        x-dataType: "Bool"
      emptyContactsAttributes:
        type: "boolean"
        example: true
        description: "To facilitate the choice to erase any attribute of the existing\
          \ contacts with empty value. emptyContactsAttributes = true means the empty\
          \ fields in your import will erase any attribute that currently contain\
          \ data in SendinBlue, & emptyContactsAttributes = false means the empty\
          \ fields will not affect your existing data ( only available if `updateExistingContacts`\
          \ set to true )"
        default: false
        x-dataType: "Bool"
    x-mimeTypes:
    - "MimeJSON"
  createSmsCampaign:
    type: "object"
    required:
    - "content"
    - "name"
    - "sender"
    properties:
      name:
        type: "string"
        example: "Spring Promo Code"
        description: "Name of the campaign"
        x-dataType: "Text"
      sender:
        type: "string"
        example: "MyShop"
        description: "Name of the sender. The number of characters is limited to 11"
        maxLength: 11
        x-dataType: "Text"
      content:
        type: "string"
        example: "Get a discount by visiting our NY store and saying : Happy Spring\
          \ !"
        description: "Content of the message. The maximum characters used per SMS\
          \ is 160, if used more than that, it will be counted as more than one SMS"
        x-dataType: "Text"
      recipients:
        $ref: "#/definitions/createSmsCampaign_recipients"
        x-dataType: "CreateSmsCampaignRecipients"
      scheduledAt:
        type: "string"
        format: "date-time"
        example: "2017-05-05T12:30:00+02:00"
        description: "UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ).\
          \ Prefer to pass your timezone in date-time format for accurate result."
        x-dataType: "DateTime"
    x-mimeTypes:
    - "MimeJSON"
  updateSmsCampaign:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Spring Promo Code"
        description: "Name of the campaign"
        x-dataType: "Text"
      sender:
        type: "string"
        example: "MyShop"
        description: "Name of the sender. The number of characters is limited to 11"
        maxLength: 11
        x-dataType: "Text"
      content:
        type: "string"
        example: "Get a discount by visiting our NY store and saying : Happy Spring!"
        description: "Content of the message. The maximum characters used per SMS\
          \ is 160, if used more than that, it will be counted as more than one SMS"
        x-dataType: "Text"
      recipients:
        $ref: "#/definitions/createSmsCampaign_recipients"
        x-dataType: "CreateSmsCampaignRecipients"
      scheduledAt:
        type: "string"
        format: "date-time"
        example: "2017-05-05T12:30:00+02:00"
        description: "UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ).\
          \ Prefer to pass your timezone in date-time format for accurate result."
        x-dataType: "DateTime"
    x-mimeTypes:
    - "MimeJSON"
  sendTransacSms:
    type: "object"
    required:
    - "content"
    - "recipient"
    - "sender"
    properties:
      sender:
        type: "string"
        example: "MyShop"
        description: "Name of the sender. Only alphanumeric characters. No more than\
          \ 11 characters"
        maxLength: 11
        x-dataType: "Text"
      recipient:
        type: "string"
        example: "33689965433"
        description: "Mobile number to send SMS with the country code"
        x-dataType: "Text"
      content:
        type: "string"
        example: "Enter this code:CCJJG8 to validate your account"
        description: "Content of the message. If more than 160 characters long, will\
          \ be sent as multiple text messages"
        x-dataType: "Text"
      type:
        type: "string"
        example: "marketing"
        description: "Type of the SMS. Marketing SMS messages are those sent typically\
          \ with marketing content. Transactional SMS messages are sent to individuals\
          \ and are triggered in response to some action, such as a sign-up, purchase,\
          \ etc."
        default: "transactional"
        enum:
        - "transactional"
        - "marketing"
        x-dataType: "E'Type3"
      tag:
        type: "string"
        example: "accountValidation"
        description: "Tag of the message"
        x-dataType: "Text"
      webUrl:
        type: "string"
        format: "url"
        example: "http://requestb.in/173lyyx1"
        description: "Webhook to call for each event triggered by the message (delivered\
          \ etc.)"
        x-dataType: "Text"
    x-mimeTypes:
    - "MimeJSON"
  sendTestEmail:
    type: "object"
    properties:
      emailTo:
        type: "array"
        description: "List of the email addresses of the recipients whom you wish\
          \ to send the test mail. If left empty, the test mail will be sent to your\
          \ entire test list."
        items:
          type: "string"
          format: "email"
          example: "helen.jurger@example.com"
          description: "Email addres of the recipient"
        x-dataType: "[Text]"
    x-mimeTypes:
    - "MimeJSON"
  sendTestSms:
    type: "object"
    properties:
      phoneNumber:
        type: "string"
        example: "33689965433"
        description: "Mobile number of the recipient with the country code. This number\
          \ must belong to one of your contacts in SendinBlue account and must not\
          \ be blacklisted"
        x-dataType: "Text"
    x-mimeTypes:
    - "MimeJSON"
  getTransacAggregatedSmsReport:
    type: "object"
    required:
    - "accepted"
    - "blocked"
    - "delivered"
    - "hardBounces"
    - "range"
    - "rejected"
    - "replied"
    - "requests"
    - "softBounces"
    - "unsubscribed"
    properties:
      range:
        type: "string"
        example: "2016-09-08|2017-04-06"
        description: "Time frame of the report"
        x-dataType: "Text"
      requests:
        type: "integer"
        format: "int64"
        example: 263
        description: "Number of requests for the timeframe"
        x-dataType: "Integer"
      delivered:
        type: "integer"
        format: "int64"
        example: 249
        description: "Number of delivered SMS for the timeframe"
        x-dataType: "Integer"
      hardBounces:
        type: "integer"
        format: "int64"
        example: 1
        description: "Number of hardbounces for the timeframe"
        x-dataType: "Integer"
      softBounces:
        type: "integer"
        format: "int64"
        example: 4
        description: "Number of softbounces for the timeframe"
        x-dataType: "Integer"
      blocked:
        type: "integer"
        format: "int64"
        example: 2
        description: "Number of blocked contact for the timeframe"
        x-dataType: "Integer"
      unsubscribed:
        type: "integer"
        format: "int64"
        example: 6
        description: "Number of unsubscription for the timeframe"
        x-dataType: "Integer"
      replied:
        type: "integer"
        format: "int64"
        example: 12
        description: "Number of answered SMS for the timeframe"
        x-dataType: "Integer"
      accepted:
        type: "integer"
        format: "int64"
        example: 252
        description: "Number of accepted for the timeframe"
        x-dataType: "Integer"
      rejected:
        type: "integer"
        format: "int64"
        example: 8
        description: "Number of rejected for the timeframe"
        x-dataType: "Integer"
  getTransacSmsReport:
    type: "object"
    properties:
      reports:
        type: "array"
        items:
          $ref: "#/definitions/getTransacSmsReport_reports"
        x-dataType: "[GetTransacSmsReportReports]"
  getIp:
    type: "object"
    required:
    - "active"
    - "domain"
    - "id"
    - "ip"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 3
        description: "ID of the dedicated IP"
        x-dataType: "Integer"
      ip:
        type: "string"
        example: "123.65.8.22"
        description: "Dedicated IP"
        x-dataType: "Text"
      active:
        type: "boolean"
        example: true
        description: "Status of the IP (true=active, false=inactive)"
        x-dataType: "Bool"
      domain:
        type: "string"
        example: "mailing.myshop.com"
        description: "Domain associated to the IP"
        x-dataType: "Text"
  getIpsFromSender:
    type: "object"
    required:
    - "ips"
    properties:
      ips:
        type: "array"
        description: "Dedicated IP(s) linked to a sender"
        items:
          $ref: "#/definitions/getIpFromSender"
        x-dataType: "[GetIpFromSender]"
  getIps:
    type: "object"
    required:
    - "ips"
    properties:
      ips:
        type: "array"
        description: "Dedicated IP(s) available on your account"
        items:
          $ref: "#/definitions/getIp"
        x-dataType: "[GetIp]"
  getIpFromSender:
    type: "object"
    required:
    - "domain"
    - "id"
    - "ip"
    - "weight"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 3
        description: "ID of the dedicated IP"
        x-dataType: "Integer"
      ip:
        type: "string"
        example: "123.65.8.22"
        description: "Dedicated IP"
        x-dataType: "Text"
      domain:
        type: "string"
        example: "mailing.myshop.dom"
        description: "Domain associated to the IP"
        x-dataType: "Text"
      weight:
        type: "integer"
        format: "int64"
        example: 75
        description: "Weight of the IP"
        x-dataType: "Integer"
  manageIp:
    type: "object"
    properties:
      ip:
        type: "string"
        example: "123.65.8.22"
        description: "Dedicated ID"
        x-dataType: "Text"
    x-mimeTypes:
    - "MimeJSON"
  sendEmail:
    type: "object"
    required:
    - "emailTo"
    properties:
      emailTo:
        type: "array"
        description: "List of the email addresses of the recipients. For example,\
          \ ['abc@example.com', 'asd@example.com']."
        items:
          type: "string"
          format: "email"
          example: "john.smith@example.com"
          description: "Email address of the recipient"
        x-dataType: "[Text]"
      emailBcc:
        type: "array"
        description: "List of the email addresses of the recipients in bcc"
        items:
          type: "string"
          format: "email"
          example: "jeff87@example.com"
          description: "Email address of the recipient in bcc"
        x-dataType: "[Text]"
      emailCc:
        type: "array"
        description: "List of the email addresses of the recipients in cc"
        items:
          type: "string"
          format: "email"
          example: "alex9877@example.com"
          description: "Email address of the recipient in cc"
        x-dataType: "[Text]"
      replyTo:
        type: "string"
        format: "email"
        example: "support@myshop.com"
        description: "Email address which shall be used by campaign recipients to\
          \ reply back"
        x-dataType: "Text"
      attachmentUrl:
        type: "string"
        format: "url"
        example: "https://attachment.domain.com"
        description: "Absolute url of the attachment (no local file). Extension allowed:\
          \ xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif,\
          \ tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar,\
          \ ez, ics, mobi, msg, pub and eps"
        x-dataType: "Text"
      attachment:
        type: "array"
        description: "Pass the list of content (base64 encoded) and name of the attachment.\
          \ For example, [{'content':'base64 encoded content 1', 'name':'attcahment1'},\
          \ {'content':'base64 encoded content 2', 'name':'attcahment2'}]."
        items:
          $ref: "#/definitions/sendEmail_attachment"
        x-dataType: "[SendEmailAttachment]"
      headers:
        type: "object"
        example:
          Content-Type: "text/html"
          charset: "iso-8859-1"
          sender.ip: "1.2.3.4"
        description: "Pass the set of headers that shall be sent along the mail headers\
          \ in the original email. 'sender.ip' header can be set (only for dedicated\
          \ ip users) to mention the IP to be used for sending transactional emails.\
          \ For example, {'Content-Type':'text/html', 'charset':'iso-8859-1', 'sender.ip':'1.2.3.4'}"
        properties: {}
        x-dataType: "A.Value"
      attributes:
        type: "object"
        example:
          FNAME: "Joe"
          LNAME: "Doe"
        description: "Pass the set of attributes to customize the template. For example,\
          \ {'FNAME':'Joe', 'LNAME':'Doe'}"
        properties: {}
        x-dataType: "A.Value"
      tags:
        type: "array"
        description: "Tag your emails to find them more easily"
        items:
          type: "string"
          example: "tag1"
        x-dataType: "[Text]"
    x-mimeTypes:
    - "MimeJSON"
  getTransacEmailContent:
    type: "object"
    required:
    - "attachmentCount"
    - "body"
    - "date"
    - "email"
    - "events"
    - "subject"
    properties:
      email:
        type: "string"
        format: "email"
        example: "abc@example.com"
        description: "Email address to which transactional email has been sent"
        x-dataType: "Text"
      subject:
        type: "string"
        example: "Summer Camp"
        description: "Subject of the sent email"
        x-dataType: "Text"
      templateId:
        type: "integer"
        format: "int64"
        example: 2
        description: "Id of the template"
        x-dataType: "Integer"
      date:
        type: "string"
        format: "date-time"
        example: "2017-03-12T12:30:00Z"
        description: "Date on which transactional email was sent"
        x-dataType: "DateTime"
      events:
        type: "array"
        description: "Series of events which occurred on the transactional email"
        items:
          $ref: "#/definitions/getTransacEmailContent_events"
        x-dataType: "[GetTransacEmailContentEvents]"
      body:
        type: "string"
        example: "<!DOCTYPE html> <html> <body> <h1>Greetings from the team</h1> <p>This\
          \ is the actual html content sent</p> </body> </html>"
        description: "Actual content of the transactional email that has been sent"
        x-dataType: "Text"
      attachmentCount:
        type: "integer"
        format: "int64"
        example: 2
        description: "Count of the attachments that were sent in the email"
        x-dataType: "Integer"
  getTransacEmailsList:
    type: "object"
    properties:
      transactionalEmails:
        type: "array"
        items:
          $ref: "#/definitions/getTransacEmailsList_transactionalEmails"
        x-dataType: "[GetTransacEmailsListTransactionalEmails]"
  getAccount_plan:
    type: "object"
    required:
    - "credits"
    - "creditsType"
    - "type"
    properties:
      type:
        type: "string"
        example: "subscription"
        description: "Displays the plan type of the user"
        enum:
        - "payAsYouGo"
        - "free"
        - "subscription"
        - "sms"
        - "reseller"
        x-dataType: "E'Type5"
      creditsType:
        type: "string"
        example: "sendLimit"
        description: "This is the type of the credit, \"Send Limit\" is one of the\
          \ possible types of credit of a user. \"Send Limit\" implies the total number\
          \ of emails you can send to the subscribers in your account."
        enum:
        - "sendLimit"
        x-dataType: "E'CreditsType"
      credits:
        type: "number"
        format: "float"
        example: 8755.0
        description: "Remaining credits of the user"
        x-dataType: "Float"
      startDate:
        type: "string"
        format: "date"
        example: "2016-12-31"
        description: "Date of the period from which the plan will start (only available\
          \ for \"subscription\" and \"reseller\" plan type)"
        x-dataType: "Date"
      endDate:
        type: "string"
        format: "date"
        example: "2017-01-31"
        description: "Date of the period from which the plan will end (only available\
          \ for \"subscription\" and \"reseller\" plan type)"
        x-dataType: "Date"
      userLimit:
        type: "integer"
        example: 10
        description: "Only in case of reseller account. It implies the total number\
          \ of child accounts you can add to your account."
        x-dataType: "Int"
  getAccount_relay_data:
    type: "object"
    required:
    - "port"
    - "relay"
    - "userName"
    properties:
      userName:
        type: "string"
        format: "email"
        example: "john.smith@example.com"
        description: "Email to use as login on transactional platform"
        x-dataType: "Text"
      relay:
        type: "string"
        example: "relay.domain.com"
        description: "URL of the SMTP Relay"
        x-dataType: "Text"
      port:
        type: "integer"
        example: 125
        description: "Port used for SMTP Relay"
        x-dataType: "Int"
    description: "Data regarding the transactional email account"
  getAccount_relay:
    type: "object"
    required:
    - "data"
    - "enabled"
    properties:
      enabled:
        type: "boolean"
        example: true
        description: "Status of your transactional email Account (true=Enabled, false=Disabled)"
        x-dataType: "Bool"
      data:
        $ref: "#/definitions/getAccount_relay_data"
        x-dataType: "GetAccountRelayData"
    description: "Information about your transactional email account"
  getAccount_marketingAutomation:
    type: "object"
    required:
    - "enabled"
    properties:
      key:
        type: "string"
        example: "iso05aopqych87ysy0jymf"
        description: "Marketing Automation Tracker ID"
        x-dataType: "Text"
      enabled:
        type: "boolean"
        example: false
        description: "Status of Marketing Automation Plateform activation for your\
          \ account (true=enabled, false=disabled)"
        x-dataType: "Bool"
  getChildInfo_credits:
    type: "object"
    properties:
      emailCredits:
        type: "integer"
        format: "int64"
        example: 98555
        description: "Email credits available for your child"
        x-dataType: "Integer"
      smsCredits:
        type: "integer"
        format: "int64"
        example: 87556
        description: "SMS credits available for your child"
        x-dataType: "Integer"
    description: "Credits available for your child"
  getChildInfo_statistics:
    type: "object"
    properties:
      previousMonthTotalSent:
        type: "integer"
        format: "int64"
        example: 7654
        description: "Overall emails sent for the previous month"
        x-dataType: "Integer"
      currentMonthTotalSent:
        type: "integer"
        format: "int64"
        example: 4566
        description: "Overall emails sent for current month"
        x-dataType: "Integer"
      totalSent:
        type: "integer"
        format: "int64"
        example: 987554
        description: "Overall emails sent for since the account exists"
        x-dataType: "Integer"
    description: "Statistics about your child account activity"
  getChildInfo_apiKeys_v2:
    type: "object"
    required:
    - "key"
    - "name"
    properties:
      name:
        type: "string"
        example: "N˚2"
        description: "Name of the key for version 2"
        x-dataType: "Text"
      key:
        type: "string"
        example: "nOpxxxxxy7z"
        description: "API Key for version 2"
        x-dataType: "Text"
  getChildInfo_apiKeys_v3:
    type: "object"
    required:
    - "key"
    - "name"
    properties:
      name:
        type: "string"
        example: "N˚3"
        description: "Name of the key for version 3"
        x-dataType: "Text"
      key:
        type: "string"
        example: "xkeysib-21881axxxxxcc92e04-mIrexxxx7z"
        description: "API Key for version 3"
        x-dataType: "Text"
  getChildInfo_apiKeys:
    type: "object"
    required:
    - "v2"
    properties:
      v2:
        type: "array"
        items:
          $ref: "#/definitions/getChildInfo_apiKeys_v2"
        x-dataType: "[GetChildInfoApiKeysV2]"
      v3:
        type: "array"
        items:
          $ref: "#/definitions/getChildInfo_apiKeys_v3"
        x-dataType: "[GetChildInfoApiKeysV3]"
    description: "API Keys associated to child account"
  getExtendedClient_address:
    type: "object"
    required:
    - "city"
    - "country"
    - "street"
    - "zipCode"
    properties:
      street:
        type: "string"
        example: "47 Harbour Street"
        description: "Street information"
        x-dataType: "Text"
      city:
        type: "string"
        example: "New-York"
        description: "City information"
        x-dataType: "Text"
      zipCode:
        type: "string"
        example: "9867"
        description: "Zip Code information"
        x-dataType: "Text"
      country:
        type: "string"
        example: "United States of America"
        description: "Country information"
        x-dataType: "Text"
    description: "Address informations"
  getSendersList_ips:
    type: "object"
    required:
    - "domain"
    - "ip"
    - "weight"
    properties:
      ip:
        type: "string"
        example: "123.98.689.7"
        description: "Dedicated IP available in your account"
        x-dataType: "Text"
      domain:
        type: "string"
        example: "mycompany.com"
        description: "Domain of the IP"
        x-dataType: "Text"
      weight:
        type: "integer"
        format: "int64"
        example: 50
        description: "Weight of the IP for this sender"
        x-dataType: "Integer"
  getSendersList_senders:
    type: "object"
    required:
    - "active"
    - "email"
    - "id"
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 0
        description: "Id of the sender"
        x-dataType: "Integer"
      name:
        type: "string"
        example: "Marketing"
        description: "From Name associated to the sender"
        x-dataType: "Text"
      email:
        type: "string"
        example: "marketing@mycompany.com"
        description: "From Email associated to the sender"
        x-dataType: "Text"
      active:
        type: "boolean"
        example: false
        description: "Status of sender (true=activated, false=deactivated)"
        x-dataType: "Bool"
      ips:
        type: "array"
        description: "List of dedicated IP(s) available in the account. This data\
          \ is displayed only for dedicated IPs"
        items:
          $ref: "#/definitions/getSendersList_ips"
        x-dataType: "[GetSendersListIps]"
  createSender_ips:
    type: "object"
    required:
    - "domain"
    - "ip"
    properties:
      ip:
        type: "string"
        example: "123.98.689.7"
        description: "Dedicated IP available in your account"
        x-dataType: "Text"
      domain:
        type: "string"
        example: "mycompany.com"
        description: "Domain of the IP"
        x-dataType: "Text"
      weight:
        type: "integer"
        format: "int64"
        example: 50
        description: "Weight to apply to the IP. Sum of all IP weights must be 100.\
          \ Should be passed for either ALL or NONE of the IPs. If it's not passed,\
          \ the sending will be equally balanced on all IPs."
        minimum: 1
        maximum: 100
        x-dataType: "Integer"
  remainingCreditModel_child:
    type: "object"
    required:
    - "email"
    - "sms"
    properties:
      sms:
        type: "integer"
        format: "int64"
        example: 500
        description: "SMS Credits remaining for child account"
        x-dataType: "Integer"
      email:
        type: "integer"
        format: "int64"
        example: 2000
        description: "Email Credits remaining for child account"
        x-dataType: "Integer"
    description: "Credits remaining for child account"
  remainingCreditModel_reseller:
    type: "object"
    required:
    - "email"
    - "sms"
    properties:
      sms:
        type: "integer"
        format: "int64"
        example: 12900
        description: "SMS Credits remaining for reseller account"
        x-dataType: "Integer"
      email:
        type: "integer"
        format: "int64"
        example: 2000000
        description: "Email Credits remaining for reseller account"
        x-dataType: "Integer"
  getExtendedCampaignOverview_sender:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Marketing"
        description: "Sender name of the campaign"
        x-dataType: "Text"
      email:
        type: "string"
        format: "email"
        example: "marketing@mycompany.com"
        description: "Sender email of the campaign"
        x-dataType: "Text"
      id:
        type: "string"
        example: "43"
        description: "Sender id of the campaign"
        x-dataType: "Text"
  postContactInfo_contacts:
    type: "object"
    properties:
      success:
        type: "array"
        items:
          type: "string"
          format: "email"
          example: "jeff32@example.com, jim56@example.com"
          description: "Email addresses which are successfully imported"
        x-dataType: "[Text]"
      failure:
        type: "array"
        items:
          type: "string"
          format: "email"
          example: "jeff32@example.com, jim56@example.com"
          description: "Email addresses which can not be imported, could be already\
            \ in/out list and/or doesn't exist"
        x-dataType: "[Text]"
      total:
        type: "integer"
        format: "int64"
        example: 27
        description: "Displays the count of total number of contacts removed from\
          \ list when user opts for \"all\" option."
        x-dataType: "Integer"
    example:
      total: 27
      success:
      - "jeff32@example.com, jim56@example.com"
      - "jeff32@example.com, jim56@example.com"
      failure:
      - "jeff32@example.com, jim56@example.com"
      - "jeff32@example.com, jim56@example.com"
  getTransacBlockedContacts_reason:
    type: "object"
    properties:
      code:
        type: "string"
        example: "AdminBlocked"
        description: "Reason code for blocking / unsubscribing (This code is safe\
          \ for comparison)"
        enum:
        - "unsubscribedViaMA"
        - "unsubscribedViaEmail"
        - "adminBlocked"
        - "unsubscribedViaApi"
        - "hardBounce"
        - "contactFlaggedAsSpam"
        x-dataType: "E'Code2"
      message:
        type: "string"
        example: "Admin blocked"
        description: "Reason for blocking / unsubscribing (This string is not safe\
          \ for comparison)"
        x-dataType: "Text"
    description: "Reason for blocking / unsubscribing"
    example: "\"Admin blocked\""
  getTransacBlockedContacts_contacts:
    type: "object"
    required:
    - "blockedAt"
    - "email"
    - "reason"
    - "senderEmail"
    properties:
      email:
        type: "string"
        format: "email"
        example: "john.smith@example.com"
        description: "Email address of the blocked or unsubscribed contact"
        x-dataType: "Text"
      senderEmail:
        type: "string"
        format: "email"
        example: "john.smith@example.com"
        description: "Sender email address of the blocked or unsubscribed contact"
        x-dataType: "Text"
      reason:
        $ref: "#/definitions/getTransacBlockedContacts_reason"
        x-dataType: "GetTransacBlockedContactsReason"
      blockedAt:
        type: "string"
        format: "date"
        example: "2017-05-01T12:30:00Z"
        description: "Date when the contact was blocked or unsubscribed on"
        x-dataType: "Date"
  getReports_reports:
    type: "object"
    required:
    - "blocked"
    - "clicks"
    - "date"
    - "delivered"
    - "hardBounces"
    - "invalid"
    - "opens"
    - "requests"
    - "softBounces"
    - "spamReports"
    - "uniqueClicks"
    - "uniqueOpens"
    - "unsubscribed"
    properties:
      date:
        type: "string"
        format: "date"
        example: "2017-04-06"
        description: "Date of the statistics"
        x-dataType: "Date"
      requests:
        type: "integer"
        format: "int64"
        example: 65
        description: "Number of requests for the date"
        x-dataType: "Integer"
      delivered:
        type: "integer"
        format: "int64"
        example: 63
        description: "Number of delivered emails for the date"
        x-dataType: "Integer"
      hardBounces:
        type: "integer"
        format: "int64"
        example: 1
        description: "Number of hardbounces for the date"
        x-dataType: "Integer"
      softBounces:
        type: "integer"
        format: "int64"
        example: 1
        description: "Number of softbounces for the date"
        x-dataType: "Integer"
      clicks:
        type: "integer"
        format: "int64"
        example: 6
        description: "Number of clicks for the date"
        x-dataType: "Integer"
      uniqueClicks:
        type: "integer"
        format: "int64"
        example: 5
        description: "Number of unique clicks for the date"
        x-dataType: "Integer"
      opens:
        type: "integer"
        format: "int64"
        example: 58
        description: "Number of openings for the date"
        x-dataType: "Integer"
      uniqueOpens:
        type: "integer"
        format: "int64"
        example: 52
        description: "Number of unique openings for the date"
        x-dataType: "Integer"
      spamReports:
        type: "integer"
        format: "int64"
        example: 0
        description: "Number of complaints (spam reports) for the date"
        x-dataType: "Integer"
      blocked:
        type: "integer"
        format: "int64"
        example: 0
        description: "Number of blocked emails for the date"
        x-dataType: "Integer"
      invalid:
        type: "integer"
        format: "int64"
        example: 0
        description: "Number of invalid emails for the date"
        x-dataType: "Integer"
      unsubscribed:
        type: "integer"
        format: "int64"
        example: 0
        description: "Number of unsubscribed emails for the date"
        x-dataType: "Integer"
  getEmailEventReport_events:
    type: "object"
    required:
    - "date"
    - "email"
    - "event"
    - "messageId"
    properties:
      email:
        type: "string"
        format: "email"
        example: "john.smith@example.com"
        description: "Email address which generates the event"
        x-dataType: "Text"
      date:
        type: "string"
        format: "date-time"
        example: "2017-03-12T12:30:00Z"
        description: "UTC date-time on which the event has been generated"
        x-dataType: "DateTime"
      subject:
        type: "string"
        example: "Sib client test"
        description: "Subject of the event"
        x-dataType: "Text"
      messageId:
        type: "string"
        example: "<201798300811.5787683@relay.domain.com>"
        description: "Message ID which generated the event"
        x-dataType: "Text"
      event:
        type: "string"
        example: "delivered"
        description: "Event which occurred"
        enum:
        - "bounces"
        - "hardBounces"
        - "softBounces"
        - "delivered"
        - "spam"
        - "requests"
        - "opened"
        - "clicks"
        - "invalid"
        - "deferred"
        - "blocked"
        - "unsubscribed"
        x-dataType: "E'Event"
      reason:
        type: "string"
        example: "Error connection timeout"
        description: "Reason of bounce (only available if the event is hardbounce\
          \ or softbounce)"
        x-dataType: "Text"
      tag:
        type: "string"
        example: "OrderConfirmation"
        description: "Tag of the email which generated the event"
        x-dataType: "Text"
      ip:
        type: "string"
        example: "165.87.3.15"
        description: "IP from which the user has opened the email or clicked on the\
          \ link (only available if the event is opened or clicks)"
        x-dataType: "Text"
      link:
        type: "string"
        example: "https://www.someexamplelink.com"
        description: "The link which is sent to the user (only available if the event\
          \ is requests or opened or clicks)"
        x-dataType: "Text"
      from:
        type: "string"
        format: "email"
        example: "john@example.com"
        description: "Sender email from which the emails are sent"
        x-dataType: "Text"
  getSmsEventReport_events:
    type: "object"
    required:
    - "date"
    - "event"
    - "messageId"
    - "phoneNumber"
    properties:
      phoneNumber:
        type: "string"
        example: "00189001094"
        description: "Phone number which has generated the event"
        x-dataType: "Text"
      date:
        type: "string"
        format: "date-time"
        example: "2017-03-12T12:30:00Z"
        description: "UTC date-time on which the event has been generated"
        x-dataType: "DateTime"
      messageId:
        type: "string"
        example: "1472640582425378"
        description: "Message ID which generated the event"
        x-dataType: "Text"
      event:
        type: "string"
        example: "accepted"
        description: "Event which occurred"
        enum:
        - "bounces"
        - "hardBounces"
        - "softBounces"
        - "delivered"
        - "sent"
        - "accepted"
        - "unsubscription"
        - "replies"
        - "blocked"
        x-dataType: "E'Event2"
      reason:
        type: "string"
        example: "Message is undeliverable due to an incorrect / invalid / blacklisted\
          \ / permanently barred MSISDN for this operator"
        description: "Reason of bounce (only available if the event is hardbounce\
          \ or softbounce)"
        x-dataType: "Text"
      reply:
        type: "string"
        x-dataType: "Text"
      tag:
        type: "string"
        example: "CabWaiting"
        description: "Tag of the SMS which generated the event"
        x-dataType: "Text"
  getSmtpTemplateOverview_sender:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Mary form MyShop"
        description: "From email for the template"
        x-dataType: "Text"
      email:
        type: "string"
        format: "email"
        example: "contact@myshop.fr"
        description: "From email for the template"
        x-dataType: "Text"
      id:
        type: "string"
        example: "43"
        description: "Sender id of the template"
        x-dataType: "Text"
  getExtendedContactDetails_statistics_messagesSent:
    type: "object"
    required:
    - "campaignId"
    - "eventTime"
    properties:
      campaignId:
        type: "integer"
        format: "int64"
        example: 3
        description: "ID of the campaign which generated the event"
        x-dataType: "Integer"
      eventTime:
        type: "string"
        format: "date-time"
        example: "2017-03-12T20:15:13Z"
        description: "UTC date-time of the event"
        x-dataType: "DateTime"
  getExtendedContactDetails_statistics_unsubscriptions_userUnsubscription:
    type: "object"
    required:
    - "campaignId"
    - "eventTime"
    - "ip"
    properties:
      campaignId:
        type: "integer"
        format: "int64"
        example: 3
        description: "ID of the campaign which generated the event"
        x-dataType: "Integer"
      eventTime:
        type: "string"
        format: "date-time"
        example: "2017-03-12T20:15:13Z"
        description: "UTC date-time of the event"
        x-dataType: "DateTime"
      ip:
        type: "string"
        example: "165.87.3.15"
        description: "IP from which the user has unsubscribed"
        x-dataType: "Text"
  getExtendedContactDetails_statistics_unsubscriptions_adminUnsubscription:
    type: "object"
    required:
    - "eventTime"
    - "ip"
    properties:
      eventTime:
        type: "string"
        format: "date-time"
        example: "2017-03-12T20:15:13Z"
        description: "UTC date-time of the event"
        x-dataType: "DateTime"
      ip:
        type: "string"
        example: "165.87.3.15"
        description: "IP from which the user has been unsubscribed"
        x-dataType: "Text"
  getExtendedContactDetails_statistics_unsubscriptions:
    type: "object"
    required:
    - "adminUnsubscription"
    - "userUnsubscription"
    properties:
      userUnsubscription:
        type: "array"
        description: "Contact unsubscribe via unsubscription link in a campaign"
        items:
          $ref: "#/definitions/getExtendedContactDetails_statistics_unsubscriptions_userUnsubscription"
        x-dataType: "[GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription]"
      adminUnsubscription:
        type: "array"
        description: "Contact has been unsubscribed from the administrator"
        items:
          $ref: "#/definitions/getExtendedContactDetails_statistics_unsubscriptions_adminUnsubscription"
        x-dataType: "[GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription]"
    description: "Listing of the unsubscription for the contact"
  getExtendedContactDetails_statistics_opened:
    type: "object"
    required:
    - "campaignId"
    - "count"
    - "eventTime"
    - "ip"
    properties:
      campaignId:
        type: "integer"
        format: "int64"
        example: 3
        description: "ID of the campaign which generated the event"
        x-dataType: "Integer"
      count:
        type: "integer"
        format: "int64"
        example: 1
        description: "Number of openings for the campaign"
        x-dataType: "Integer"
      eventTime:
        type: "string"
        format: "date-time"
        example: "2017-03-12T20:15:13Z"
        description: "UTC date-time of the event"
        x-dataType: "DateTime"
      ip:
        type: "string"
        example: "165.87.3.15"
        description: "IP from which the user has opened the email"
        x-dataType: "Text"
  getExtendedContactDetails_statistics_links:
    type: "object"
    required:
    - "count"
    - "eventTime"
    - "ip"
    - "url"
    properties:
      count:
        type: "integer"
        format: "int64"
        example: 1
        description: "Number of clicks on this link for the campaign"
        x-dataType: "Integer"
      eventTime:
        type: "string"
        format: "date-time"
        example: "2017-03-12T20:15:13Z"
        description: "UTC date-time of the event"
        x-dataType: "DateTime"
      ip:
        type: "string"
        example: "165.87.3.15"
        description: "IP from which the user has clicked on the link"
        x-dataType: "Text"
      url:
        type: "string"
        example: "www.myshop.com"
        description: "URL of the clicked link"
        x-dataType: "Text"
  getExtendedContactDetails_statistics_clicked:
    type: "object"
    required:
    - "campaignId"
    - "links"
    properties:
      campaignId:
        type: "integer"
        format: "int64"
        example: 3
        description: "ID of the campaign which generated the event"
        x-dataType: "Integer"
      links:
        type: "array"
        description: "Listing of the clicked links for the campaign"
        items:
          $ref: "#/definitions/getExtendedContactDetails_statistics_links"
        x-dataType: "[GetExtendedContactDetailsStatisticsLinks]"
  getExtendedContactDetails_statistics:
    type: "object"
    properties:
      messagesSent:
        type: "array"
        description: "Listing of the sent campaign for the contact"
        items:
          $ref: "#/definitions/getExtendedContactDetails_statistics_messagesSent"
        x-dataType: "[GetExtendedContactDetailsStatisticsMessagesSent]"
      hardBounces:
        type: "array"
        description: "Listing of the hardbounes generated by the contact"
        items:
          $ref: "#/definitions/getExtendedContactDetails_statistics_messagesSent"
        x-dataType: "[GetExtendedContactDetailsStatisticsMessagesSent]"
      softBounces:
        type: "array"
        description: "Listing of the softbounes generated by the contact"
        items:
          $ref: "#/definitions/getExtendedContactDetails_statistics_messagesSent"
        x-dataType: "[GetExtendedContactDetailsStatisticsMessagesSent]"
      complaints:
        type: "array"
        description: "Listing of the complaints generated by the contact"
        items:
          $ref: "#/definitions/getExtendedContactDetails_statistics_messagesSent"
        x-dataType: "[GetExtendedContactDetailsStatisticsMessagesSent]"
      unsubscriptions:
        $ref: "#/definitions/getExtendedContactDetails_statistics_unsubscriptions"
        x-dataType: "GetExtendedContactDetailsStatisticsUnsubscriptions"
      opened:
        type: "array"
        description: "Listing of the openings generated by the contact"
        items:
          $ref: "#/definitions/getExtendedContactDetails_statistics_opened"
        x-dataType: "[GetExtendedContactDetailsStatisticsOpened]"
      clicked:
        type: "array"
        description: "Listing of the clicks generated by the contact"
        items:
          $ref: "#/definitions/getExtendedContactDetails_statistics_clicked"
        x-dataType: "[GetExtendedContactDetailsStatisticsClicked]"
      transacAttributes:
        type: "array"
        description: "Listing of the transactional attributes for the contact"
        items:
          type: "object"
          properties: {}
        x-dataType: "[A.Value]"
    description: "Campaign statistics of the contact"
  getContactCampaignStats_unsubscriptions:
    type: "object"
    required:
    - "adminUnsubscription"
    - "userUnsubscription"
    properties:
      userUnsubscription:
        type: "array"
        description: "Contact has unsubscribed via the unsubscription link in the\
          \ email"
        items:
          $ref: "#/definitions/getExtendedContactDetails_statistics_unsubscriptions_userUnsubscription"
        x-dataType: "[GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription]"
      adminUnsubscription:
        type: "array"
        description: "Contact has been unsubscribed from the administrator"
        items:
          $ref: "#/definitions/getExtendedContactDetails_statistics_unsubscriptions_adminUnsubscription"
        x-dataType: "[GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription]"
  getContactCampaignStats_opened:
    type: "object"
    required:
    - "campaignId"
    - "count"
    - "eventTime"
    - "ip"
    properties:
      campaignId:
        type: "integer"
        format: "int64"
        example: 3
        description: "ID of the campaign which generated the event"
        x-dataType: "Integer"
      count:
        type: "integer"
        format: "int64"
        example: 3
        description: "Number of openings of the campaign"
        x-dataType: "Integer"
      eventTime:
        type: "string"
        format: "date-time"
        example: "2017-03-12T20:15:13Z"
        description: "UTC date-time of the event"
        x-dataType: "DateTime"
      ip:
        type: "string"
        example: "165.87.3.15"
        description: "IP from which the user has opened the campaign"
        x-dataType: "Text"
  getContactCampaignStats_clicked:
    type: "object"
    required:
    - "campaignId"
    - "links"
    properties:
      campaignId:
        type: "integer"
        format: "int64"
        example: 3
        description: "ID of the campaign which generated the event"
        x-dataType: "Integer"
      links:
        type: "array"
        items:
          $ref: "#/definitions/getExtendedContactDetails_statistics_links"
        x-dataType: "[GetExtendedContactDetailsStatisticsLinks]"
  getContactCampaignStats_transacAttributes:
    type: "object"
    required:
    - "orderDate"
    - "orderId"
    - "orderPrice"
    properties:
      orderDate:
        type: "string"
        format: "date"
        example: "2017-03-12"
        description: "Date of the order"
        x-dataType: "Date"
      orderPrice:
        type: "number"
        format: "float"
        example: 24.99
        description: "Price of the order"
        x-dataType: "Float"
      orderId:
        type: "integer"
        format: "int64"
        example: 248
        description: "ID of the order"
        x-dataType: "Integer"
  getAttributes_enumeration:
    type: "object"
    required:
    - "label"
    - "value"
    properties:
      value:
        type: "integer"
        format: "int64"
        example: 1
        description: "ID of Value of the \"category\" type attribute"
        x-dataType: "Integer"
      label:
        type: "string"
        example: "Women"
        description: "Label of the \"category\" type attribute"
        x-dataType: "Text"
  getAttributes_attributes:
    type: "object"
    required:
    - "category"
    - "name"
    properties:
      name:
        type: "string"
        example: "LASTNAME"
        description: "Name of the attribute"
        x-dataType: "Text"
      category:
        type: "string"
        example: "category"
        description: "Category of the attribute"
        enum:
        - "normal"
        - "transactional"
        - "category"
        - "calculated"
        - "global"
        x-dataType: "E'Category"
      type:
        type: "string"
        example: "text"
        description: "Type of the attribute"
        enum:
        - "text"
        - "date"
        - "float"
        - "id"
        - "boolean"
        x-dataType: "E'Type6"
      enumeration:
        type: "array"
        description: "Parameter only available for \"category\" type attributes."
        items:
          $ref: "#/definitions/getAttributes_enumeration"
        x-dataType: "[GetAttributesEnumeration]"
      calculatedValue:
        type: "string"
        example: "COUNT[ORDER_ID,ORDER_DATE,==,NOW(-1)]"
        description: "Calculated value formula"
        x-dataType: "Text"
  getExtendedList_campaignStats:
    type: "object"
    required:
    - "campaignId"
    - "stats"
    properties:
      campaignId:
        type: "integer"
        format: "int64"
        example: 143
        description: "ID of the campaign"
        x-dataType: "Integer"
      stats:
        $ref: "#/definitions/getCampaignStats"
        x-dataType: "GetCampaignStats"
  updateSmtpTemplate_sender:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Mary from MyShop"
        description: "Name of the sender"
        x-dataType: "Text"
      email:
        type: "string"
        format: "email"
        example: "contact@myshop.com"
        description: "Email of the sender"
        x-dataType: "Text"
      id:
        type: "integer"
        format: "int64"
        example: 3
        description: "Select the sender for the template on the basis of sender id.\
          \ In order to select a sender with specific pool of IP’s, dedicated ip users\
          \ shall pass id (instead of email)."
        x-dataType: "Integer"
    description: "Sender details including id or email and name (optional). Only one\
      \ of either Sender's email or Sender's ID shall be passed in one request at\
      \ a time. For example `{\"name\":\"xyz\", \"email\":\"example@abc.com\"}` ,\
      \ `{\"name\":\"xyz\", \"id\":123}`"
  createSmtpTemplate_sender:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Mary from MyShop"
        description: "Name of the sender. If not passed, will be set to default"
        x-dataType: "Text"
      email:
        type: "string"
        format: "email"
        example: "contact@myshop.com"
        description: "Email of the sender"
        x-dataType: "Text"
      id:
        type: "integer"
        format: "int64"
        example: 3
        description: "Select the sender for the template on the basis of sender id.\
          \ In order to select a sender with specific pool of IP’s, dedicated ip users\
          \ shall pass id (instead of email)."
        x-dataType: "Integer"
    description: "Sender details including id or email and name (optional). Only one\
      \ of either Sender's email or Sender's ID shall be passed in one request at\
      \ a time. For example `{\"name\":\"xyz\", \"email\":\"example@abc.com\"}` ,\
      \ `{\"name\":\"xyz\", \"id\":123}`"
  createEmailCampaign_sender:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Mary from MyShop"
        description: "Sender Name"
        x-dataType: "Text"
      email:
        type: "string"
        format: "email"
        example: "newsletter@myshop.com"
        description: "Sender email"
        x-dataType: "Text"
      id:
        type: "integer"
        format: "int64"
        example: 3
        description: "Select the sender for the campaign on the basis of sender id.\
          \ In order to select a sender with specific pool of IP’s, dedicated ip users\
          \ shall pass id (instead of email)."
        x-dataType: "Integer"
    description: "Sender details including id or email and name (optional). Only one\
      \ of either Sender's email or Sender's ID shall be passed in one request at\
      \ a time. For example `{\"name\":\"xyz\", \"email\":\"example@abc.com\"}` ,\
      \ `{\"name\":\"xyz\", \"id\":123}`"
  createEmailCampaign_recipients:
    type: "object"
    properties:
      exclusionListIds:
        type: "array"
        description: "List ids to exclude from the campaign"
        items:
          type: "integer"
          format: "int64"
          example: 8
        x-dataType: "[Integer]"
      listIds:
        type: "array"
        description: "Mandatory if scheduledAt is not empty. List Ids to send the\
          \ campaign to"
        items:
          type: "integer"
          format: "int64"
          example: 32
        x-dataType: "[Integer]"
    description: "List ids to include/exclude from campaign"
  updateEmailCampaign_sender:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Mary from MyShop"
        description: "Sender Name from which the campaign emails are sent"
        x-dataType: "Text"
      email:
        type: "string"
        format: "email"
        example: "newsletter@myshop.com"
        description: "Sender email from which the campaign emails are sent"
        x-dataType: "Text"
      id:
        type: "integer"
        format: "int64"
        example: 3
        description: "Select the sender for the campaign on the basis of sender id.\
          \ In order to select a sender with specific pool of IP’s, dedicated ip users\
          \ shall pass id (instead of email)."
        x-dataType: "Integer"
    description: "Sender details including id or email and name (optional). Only one\
      \ of either Sender's email or Sender's ID shall be passed in one request at\
      \ a time. For example `{\"name\":\"xyz\", \"email\":\"example@abc.com\"}` ,\
      \ `{\"name\":\"xyz\", \"id\":123}`"
  updateEmailCampaign_recipients:
    type: "object"
    properties:
      exclusionListIds:
        type: "array"
        description: "List ids which have to be excluded from a campaign"
        items:
          type: "integer"
          format: "int64"
          example: 8
        x-dataType: "[Integer]"
      listIds:
        type: "array"
        description: "Lists Ids to send the campaign to. REQUIRED if already not present\
          \ in campaign and scheduledAt is not empty"
        items:
          type: "integer"
          format: "int64"
          example: 32
        x-dataType: "[Integer]"
    description: "List ids to include/exclude from campaign"
  sendReport_email:
    type: "object"
    required:
    - "body"
    - "subject"
    - "to"
    properties:
      subject:
        type: "string"
        example: "Report of the last campaign"
        description: "Subject of the email message"
        x-dataType: "Text"
      to:
        type: "array"
        description: "Email addresses of the recipients"
        items:
          type: "string"
          format: "email"
          example: "jim.suehan@example.com"
          description: "Email address of the recipient"
        x-dataType: "[Text]"
      contentType:
        type: "string"
        example: "html"
        description: "Type of the message body"
        default: "html"
        enum:
        - "text"
        - "html"
        x-dataType: "E'ContentType"
      bcc:
        type: "array"
        description: "Email addresses of the recipients in bcc"
        items:
          type: "string"
          format: "email"
          example: "jeff39@example.com"
          description: "Email address of the recipient in bcc"
        x-dataType: "[Text]"
      cc:
        type: "array"
        description: "Email addresses of the recipients in cc"
        items:
          type: "string"
          format: "email"
          example: "ann9879@example.com"
          description: "Email address of the recipient in cc"
        x-dataType: "[Text]"
      body:
        type: "string"
        example: "Please find attached the report of our last email campaign."
        description: "Body of the email message"
        x-dataType: "Text"
    description: "Email sending credentials including subject, body, to, cc etc."
  sendSmtpEmail_sender:
    type: "object"
    required:
    - "email"
    properties:
      name:
        type: "string"
        example: "Mary from MyShop"
        description: "Name of the sender from which the emails will be sent. Maximum\
          \ allowed characters are 70."
        x-dataType: "Text"
      email:
        type: "string"
        format: "email"
        example: "no-reply@myshop.com"
        description: "Email of the sender from which the emails will be sent"
        x-dataType: "Text"
    description: "Mandatory if 'templateId' is not passed. Pass name (optional) and\
      \ email of sender from which emails will be sent. For example, {'name':'Mary\
      \ from MyShop', 'email':'no-reply@myshop.com'}"
  sendSmtpEmail_to:
    type: "object"
    required:
    - "email"
    properties:
      email:
        type: "string"
        format: "email"
        example: "jimmy98@example.com"
        description: "Email address of the recipient"
        x-dataType: "Text"
      name:
        type: "string"
        example: "Jimmy"
        description: "Name of the recipient. Maximum allowed characters are 70."
        x-dataType: "Text"
  sendSmtpEmail_bcc:
    type: "object"
    required:
    - "email"
    properties:
      email:
        type: "string"
        format: "email"
        example: "helen9766@example.com"
        description: "Email address of the recipient in bcc"
        x-dataType: "Text"
      name:
        type: "string"
        example: "Helen"
        description: "Name of the recipient in bcc. Maximum allowed characters are\
          \ 70."
        x-dataType: "Text"
  sendSmtpEmail_cc:
    type: "object"
    required:
    - "email"
    properties:
      email:
        type: "string"
        format: "email"
        example: "ann6533@example.com"
        description: "Email address of the recipient in cc"
        x-dataType: "Text"
      name:
        type: "string"
        example: "Ann"
        description: "Name of the recipient in cc. Maximum allowed characters are\
          \ 70."
        x-dataType: "Text"
  sendSmtpEmail_replyTo:
    type: "object"
    required:
    - "email"
    properties:
      email:
        type: "string"
        format: "email"
        example: "ann6533@example.com"
        description: "Email address in reply to"
        x-dataType: "Text"
      name:
        type: "string"
        example: "Ann"
        description: "Name in reply to. Maximum allowed characters are 70."
        x-dataType: "Text"
    description: "Email (required), along with name (optional), on which transactional\
      \ mail recipients will be able to reply back. For example, {'email':'ann6533@example.com',\
      \ 'name':'Ann'}."
  sendSmtpEmail_attachment:
    type: "object"
    properties:
      url:
        type: "string"
        format: "url"
        example: "https://attachment.domain.com/myAttachmentFromUrl.jpg"
        description: "Absolute url of the attachment (no local file)."
        x-dataType: "Text"
      content:
        type: "string"
        format: "byte"
        example: "b3JkZXIucGRm"
        description: "Base64 encoded chunk data of the attachment generated on the\
          \ fly"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
        x-dataType: "ByteArray"
      name:
        type: "string"
        example: "myAttachment.png"
        description: "Required if content is passed. Name of the attachment"
        x-dataType: "Text"
  createAttribute_enumeration:
    type: "object"
    required:
    - "label"
    - "value"
    properties:
      value:
        type: "integer"
        example: 1
        description: "Id of the value"
        x-dataType: "Int"
      label:
        type: "string"
        example: "Women"
        description: "Label of the value"
        x-dataType: "Text"
  updateAttribute_enumeration:
    type: "object"
    required:
    - "label"
    - "value"
    properties:
      value:
        type: "integer"
        example: 1
        description: "Id of the value"
        x-dataType: "Int"
      label:
        type: "string"
        example: "Men"
        description: "Label of the value"
        x-dataType: "Text"
  requestContactImport_newList:
    type: "object"
    properties:
      listName:
        type: "string"
        example: "ContactImport - 2017-05"
        description: "List with listName will be created first and users will be imported\
          \ in it (Mandatory if listIds is empty)."
        x-dataType: "Text"
      folderId:
        type: "integer"
        format: "int64"
        example: 2
        description: "Id of the folder where this new list shall be created (Mandatory\
          \ if listName is not empty)."
        x-dataType: "Integer"
    description: "To create a new list and import the contacts into it, pass the listName\
      \ and an optional folderId."
  createSmsCampaign_recipients:
    type: "object"
    required:
    - "listIds"
    properties:
      listIds:
        type: "array"
        description: "Lists Ids to send the campaign to. REQUIRED if scheduledAt is\
          \ not empty"
        items:
          type: "integer"
          format: "int64"
          example: 54
          description: "List Id to send the campaign to"
        x-dataType: "[Integer]"
      exclusionListIds:
        type: "array"
        description: "List ids which have to be excluded from a campaign"
        items:
          type: "integer"
          format: "int64"
          example: 15
          description: "List Id to exclude from the campaign"
        x-dataType: "[Integer]"
  getTransacSmsReport_reports:
    type: "object"
    required:
    - "accepted"
    - "blocked"
    - "date"
    - "delivered"
    - "hardBounces"
    - "rejected"
    - "replied"
    - "requests"
    - "softBounces"
    - "unsubscribed"
    properties:
      date:
        type: "string"
        format: "date"
        example: "2017-03-17"
        description: "Date for which statistics are retrieved"
        x-dataType: "Date"
      requests:
        type: "integer"
        format: "int64"
        example: 87
        description: "Number of requests for the date"
        x-dataType: "Integer"
      delivered:
        type: "integer"
        format: "int64"
        example: 85
        description: "Number of delivered SMS for the date"
        x-dataType: "Integer"
      hardBounces:
        type: "integer"
        format: "int64"
        example: 1
        description: "Number of hardbounces for the date"
        x-dataType: "Integer"
      softBounces:
        type: "integer"
        format: "int64"
        example: 1
        description: "Number of softbounces for the date"
        x-dataType: "Integer"
      blocked:
        type: "integer"
        format: "int64"
        example: 0
        description: "Number of blocked contact for the date"
        x-dataType: "Integer"
      unsubscribed:
        type: "integer"
        format: "int64"
        example: 1
        description: "Number of unsubscription for the date"
        x-dataType: "Integer"
      replied:
        type: "integer"
        format: "int64"
        example: 2
        description: "Number of answered SMS for the date"
        x-dataType: "Integer"
      accepted:
        type: "integer"
        format: "int64"
        example: 85
        description: "Number of accepted for the date"
        x-dataType: "Integer"
      rejected:
        type: "integer"
        format: "int64"
        example: 1
        description: "Number of rejected for the date"
        x-dataType: "Integer"
  sendEmail_attachment:
    type: "object"
    required:
    - "content"
    - "name"
    properties:
      content:
        type: "string"
        format: "byte"
        example: "b3JkZXIucGRm"
        description: "Base64 encoded chunk data of the attachment generated on the\
          \ fly"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
        x-dataType: "ByteArray"
      name:
        type: "string"
        example: "myAttachment.png"
        description: "Required for content. Name of the attachment"
        x-dataType: "Text"
  getTransacEmailContent_events:
    type: "object"
    required:
    - "name"
    - "time"
    properties:
      name:
        type: "string"
        example: "delivered"
        description: "Name of the event that occurred on the sent email"
        x-dataType: "Text"
      time:
        type: "string"
        format: "date-time"
        example: "2017-03-12T12:30:00Z"
        description: "Time at which the event occurred"
        x-dataType: "DateTime"
  getTransacEmailsList_transactionalEmails:
    type: "object"
    required:
    - "date"
    - "email"
    - "messageId"
    - "subject"
    - "uuid"
    properties:
      email:
        type: "string"
        format: "email"
        example: "john.smith@example.com"
        description: "Email address to which transactional email has been sent"
        x-dataType: "Text"
      subject:
        type: "string"
        example: "Summer Camp"
        description: "Subject of the sent email"
        x-dataType: "Text"
      templateId:
        type: "integer"
        format: "int64"
        example: 2
        description: "Id of the template"
        x-dataType: "Integer"
      messageId:
        type: "string"
        example: "<201798300811.5700093@relay.domain.com>"
        description: "Message Id of the sent email"
        x-dataType: "Text"
      uuid:
        type: "string"
        example: "5a78c-209ok98262910-s99a341"
        description: "Unique id of the email sent to a particular contact"
        x-dataType: "Text"
      date:
        type: "string"
        format: "date-time"
        example: "2017-03-12T12:30:00Z"
        description: "Date on which transactional email was sent"
        x-dataType: "DateTime"
x-samples-languages:
- "curl"
- "node"
- "php"
- "go"
- "ruby"
- "python"
- "java"
- "csharp"
